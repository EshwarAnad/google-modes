(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[26], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[27], -1,
     1, 117, -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 130, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[22], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 130, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 130, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 135, -1,
     1, 152, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 167, -1,
     2, 182, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     1, 191, -1,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 43,
     3, "keyword", e[7], 44,
     3, "keyword", e[8], 68,
     3, "keyword", e[9], 73,
     2, 200, -1, {"name":"Block"},
     3, "keyword", e[10], 77,
     3, "keyword", e[11], 79,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 93,
     3, "keyword", e[15], 94,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 204]], 93,
     1, 205, 97,
     2, 208, 101, {"name":"DeclType"},
     ";", -1,
     1, 232, 115],
    [1, 9, 14],
    [2, 237, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 242, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 247, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 117, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 232, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 200, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 251, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 124, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 242, 40],
    [1, 9, 41],
    [2, 263, -1, {"name":"FunctionDef"}],
    [1, 9, 45],
    [1, 9, 46],
    [1, 9, 47],
    ["(", 48],
    [2, 296, 49, {"name":"CondExpr"}],
    [2, 12, 50, {"name":"Statement"}],
    [1, 9, 51],
    [1, 9, 52],
    [1, 9, 53],
    [2, 12, 54, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 55],
    [1, 9, 56],
    [1, 9, 57],
    [1, 232, 58,
     0, 58],
    [2, 296, 59, {"name":"CondExpr"}],
    [1, 9, 60],
    [1, 9, 61],
    [";", 62],
    [";", -1],
    [1, 9, 63],
    [1, 232, 64,
     0, 64],
    [1, 9, 65],
    [")", 66],
    [1, 9, 67],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 69],
    [2, 296, 70, {"name":"CondExpr"}],
    [1, 9, 71],
    [2, 12, 72, {"name":"Statement"}],
    [2, 317, -1, {"name":"Alternative"}],
    [1, 9, 74],
    [2, 296, 75, {"name":"CondExpr"}],
    [1, 9, 76],
    [2, 200, -1, {"name":"Block"}],
    [1, 9, 78],
    [";", -1],
    [1, 9, 80],
    [e[21], 81],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [1, 232, 85,
     0, 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 242, 89,
     0, 89],
    [1, 9, 90],
    [2, 321, 91, {"name":"BlockOf"},
     0, 91],
    [1, 9, 92],
    [";", -1],
    [1, 9, 95],
    [1, 9, 96],
    [":", -1],
    [1, 232, 93],
    [1, 9, 98],
    [2, 200, -1, {"name":"Block"},
     0, 99],
    [1, 331, 100,
     0, -1],
    [1, 9, 99],
    [1, 9, 102],
    [1, 354, 103],
    [1, 9, 104],
    [1, 205, 105,
     0, 105],
    [1, 9, 106],
    [[5, 373], 107,
     1, 377, 108,
     0, 108],
    [2, 263, -1, {"name":"FunctionDef"}],
    [1, 9, 109],
    [",", 110,
     ";", -1],
    [1, 9, 111],
    [1, 242, 112],
    [1, 9, 113],
    [1, 377, 114,
     0, 114],
    [1, 9, 109],
    [1, 9, 116],
    [";", -1],
    [0, 118,
     3, "type", e[16], -1,
     2, 380, 123, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 381, 119],
    [0, 118,
     3, "type qualified", e[16], 120,
     2, 388, 120, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 389, 121, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 122,
     0, -1],
    [1, 117, -1],
    [2, 389, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 125,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 126],
    [[0, [7, "rawStringContinues"], /^[^]/], 125,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 127],
    ["\\", 128,
     [0, /^(?!\")/, /^[^]/], 127,
     "\"", -1],
    [/^[^]/, 127],
    [3, "keyword", e[17], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 131,
     "/*", 134,
     /^\/\/.*/, -1],
    [e[48], 132,
     0, 133],
    [0, 131,
     0, 131],
    [2, 394, 133, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 134,
     "*/", -1],
    [3, "keyword", e[18], 137,
     [0, [5, 405], "["], 138],
    [0, 135,
     0, -1],
    [1, 9, 139],
    [1, 9, 140],
    ["(", 141],
    ["[", 142],
    [1, 9, 143],
    [1, 9, 144],
    [3, "number", e[19], 145],
    [1, 409, 146],
    [1, 9, 147],
    [1, 9, 148],
    [")", 149],
    ["]", 150],
    [1, 9, 136],
    [1, 9, 151],
    ["]", 149],
    [3, "keyword", e[20], 153,
     3, "keyword", e[13], 153],
    [1, 9, 154],
    [1, 135, 155,
     0, 155],
    [1, 9, 156],
    [0, 157,
     3, "type def", e[21], 160],
    [1, 431, 158],
    [1, 9, 159],
    [0, 157,
     3, "type qualified", e[21], 160],
    [1, 9, 161],
    [3, "keyword", e[22], 162,
     ":", 163,
     0, 165],
    [1, 9, 161],
    [1, 9, 164],
    [1, 438, 165],
    [1, 9, 166],
    [";", -1,
     2, 452, -1, {"name":"ClassBody"}],
    [3, "keyword", e[23], 168],
    [1, 9, 169],
    [3, "keyword", e[17], 170,
     3, "keyword", e[1], 171,
     0, 171],
    [1, 9, 172],
    [1, 9, 173],
    [1, 456, 174],
    [1, 117, 174],
    [1, 9, 175],
    [3, "operator", "=", 176,
     0, 180],
    [1, 9, 177],
    [1, 456, 178],
    [1, 9, 179],
    [1, 354, 180,
     0, 180],
    [1, 9, 181],
    [";", -1],
    [3, "keyword", e[24], 183,
     0, 183],
    [1, 9, 184],
    [3, "keyword", e[25], 185],
    [1, 9, 186],
    [2, 471, 187, {"name":"TemplateParams"},
     0, 187],
    [1, 9, 188],
    [1, 9, 189],
    [1, 9, 190],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[26], 192],
    [1, 9, 193],
    [3, "keyword", e[20], 194,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 194,
     0, 194],
    [1, 9, 195],
    [1, 135, 196,
     0, 196],
    [1, 9, 197],
    [3, "type def", e[21], 198,
     0, 198],
    [1, 9, 199],
    [2, 476, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 201],
    [1, 9, 202],
    [2, 12, 203, {"name":"Statement"},
     "}", -1],
    [1, 9, 202],
    [e[45], 204,
     /^\:(?!\:)/, -1],
    [3, "meta", e[27], 206],
    [1, 9, 207],
    [2, 494, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 209,
     0, 220,
     3, "keyword", e[28], 226,
     [5, 498], 227],
    [3, "keyword", e[29], 210,
     3, "keyword", e[30], 210,
     3, "keyword", e[31], 210],
    [1, 9, 211],
    [0, 209,
     3, "keyword", e[28], 212,
     0, 213,
     1, 503, 214],
    [1, 9, 215],
    [3, "type", e[32], 216],
    [1, 9, 217],
    [/^\&?/, -1],
    [0, 213,
     1, 9, 218,
     0, 214],
    [1, 508, 219,
     0, -1],
    [3, "type", e[33], 214],
    [1, 9, 217],
    [3, "type", e[32], 221],
    [1, 9, 222],
    [0, 220,
     3, "type", e[33], 223,
     0, 223],
    [1, 9, 224],
    [1, 508, 225,
     0, -1],
    [1, 9, 224],
    [1, 9, 228],
    [1, 503, 229],
    [/^\&?/, -1],
    [1, 9, 230],
    [1, 508, 231,
     0, -1],
    [1, 9, 230],
    [1, 515, 233,
     1, 532, 234],
    [1, 9, 232],
    [1, 9, 235],
    [1, 331, 236,
     0, -1],
    [1, 9, 235],
    ["(", 238],
    [1, 9, 239],
    [1, 556, 240],
    [1, 9, 241],
    [")", -1],
    [3, "keyword", e[34], 243,
     0, 245,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[58], -1,
     3, "keyword", e[36], 244,
     3, "keyword", e[37], 244],
    [e[59], -1],
    [1, 566, 246],
    [0, 245,
     3, "qualified def", e[38], -1],
    ["{", 248],
    [1, 9, 249],
    [2, 12, 250, {"name":"Statement"},
     "}", -1],
    [1, 9, 249],
    [3, "keyword", e[39], 252,
     0, -1],
    [1, 9, 253],
    ["(", 254],
    [1, 9, 255],
    [1, 456, 256],
    [1, 9, 257],
    [1, 354, 258,
     0, 258],
    [1, 9, 259],
    [")", 260],
    [1, 9, 261],
    [2, 200, 262, {"name":"Block"}],
    [1, 9, 251],
    [2, 573, 264, {"name":"ParamList"}],
    [1, 9, 265],
    [3, "keyword", e[31], 266,
     /^(?:\&\&|\&)?/, 267],
    [1, 9, 265],
    [1, 9, 268],
    [3, "keyword", e[40], 269,
     3, "keyword", e[2], 270,
     0, 281],
    [1, 9, 271],
    [1, 9, 272],
    ["(", 273,
     0, 281],
    ["(", 274],
    [1, 9, 275],
    [1, 9, 276],
    [1, 232, 277],
    [1, 578, 278],
    [1, 9, 279],
    [1, 9, 280],
    [")", 281],
    [")", 281],
    [1, 9, 282],
    [1, 135, 283,
     0, 283],
    [1, 9, 284],
    ["->", 285,
     0, 287],
    [1, 9, 286],
    [1, 456, 287],
    [1, 9, 288],
    [3, "keyword", e[41], 289,
     2, 584, 290, {"name":"InitializerList"},
     0, 290],
    [1, 9, 288],
    [1, 9, 291],
    [";", -1,
     2, 200, -1, {"name":"Block"},
     3, "operator", "=", 292],
    [1, 9, 293],
    [3, "keyword", e[14], 294,
     3, "keyword", e[37], 294],
    [1, 9, 295],
    [";", -1],
    ["(", 297],
    [1, 9, 298],
    [[6, 587], 299,
     1, 232, 315,
     0, 315],
    [2, 208, 300, {"name":"DeclType"}],
    [1, 9, 301],
    [1, 354, 302],
    [1, 9, 303],
    [1, 205, 304,
     0, 304],
    [1, 9, 305],
    [1, 377, 306,
     0, 306],
    [1, 9, 307],
    [",", 308,
     ";", 309,
     0, 315],
    [1, 9, 310],
    [1, 9, 311],
    [1, 242, 312],
    [1, 232, 315,
     0, 315],
    [1, 9, 313],
    [1, 377, 314,
     0, 314],
    [1, 9, 307],
    [1, 9, 316],
    [")", -1],
    [1, 9, 318],
    [3, "keyword", e[42], 319,
     0, -1],
    [1, 9, 320],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 322],
    [1, 9, 323],
    [1, 590, 324,
     0, 329],
    [1, 9, 325],
    [";", 326,
     0, 329],
    [1, 9, 327],
    [1, 590, 328,
     0, 328],
    [1, 9, 325],
    [1, 9, 330],
    ["}", -1],
    [2, 601, -1, {"name":"BlockOf"},
     2, 237, 332, {"name":"ArgList"},
     e[44], 334,
     2, 237, -1, {"name":"ArgList"},
     "[", 340,
     3, "operator", e[43], -1,
     e[44], 344,
     3, "operator", e[35], 346,
     "?", 348],
    [1, 9, 333],
    [2, 200, -1, {"name":"Block"},
     0, -1],
    [1, 9, 335],
    [/^\*?/, 336],
    [1, 9, 337],
    [2, 623, 338, {"name":"fieldName","token":"property"}],
    [1, 9, 339],
    [2, 389, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 341],
    [1, 232, 342],
    [1, 9, 343],
    ["]", -1],
    [1, 9, 345],
    [2, 623, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 347],
    [1, 232, -1,
     0, -1],
    [1, 9, 349],
    [1, 232, 350],
    [1, 9, 351],
    [":", 352],
    [1, 9, 353],
    [1, 232, -1],
    [0, 355,
     "(", 369],
    [e[60], 356,
     "[", 357,
     1, 242, 358],
    [1, 9, 355],
    [1, 9, 359],
    [1, 9, 360],
    [1, 242, 361],
    ["[", 362,
     0, -1],
    [1, 9, 363],
    [1, 9, 364],
    [",", 365,
     "]", -1],
    ["]", 366],
    [1, 9, 367],
    [1, 9, 360],
    [1, 242, 368],
    [1, 9, 363],
    [1, 9, 370],
    [1, 354, 371],
    [1, 9, 372],
    [")", -1],
    ["(", 374],
    [1, 9, 375],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 498], 376],
    [1, 503, -1],
    [3, "operator", "=", 378,
     2, 624, -1, {"name":"BlockOf"},
     2, 237, -1, {"name":"ArgList"}],
    [1, 9, 379],
    [1, 232, -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    ["::", 386,
     [5, 634], 382],
    [3, "variable qualifier", e[21], 383],
    [2, 389, 384, {"name":"TemplateArgs"},
     0, 384],
    [1, 9, 385],
    ["::", 386],
    [1, 9, 387],
    [/^\*?/, -1],
    [2, 380, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 390],
    [1, 9, 391],
    [1, 638, 392],
    [1, 9, 393],
    [">", -1],
    [3, "tag", /^\@f[\$\[\]]/, 403,
     3, "tag", /^\@param(?:\[(?:in|out|in\,out)\])?(?![a-zA-Z0-9¡-￿_])/, 395,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 396,
     3, "tag", e[47], 403,
     "{", 397],
    [e[45], 395,
     3, "def", e[46], 403,
     "<", 398,
     0, 403],
    [e[45], 396,
     3, "type", e[46], 403,
     0, 403],
    [3, "tag", e[47], 399],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 400],
    [/^[\t ]*/, 401],
    [">", 403],
    [1, 678, 402],
    ["}", 403],
    [e[48], 404,
     0, -1],
    [0, 403,
     0, 403],
    ["[", 406],
    [1, 9, 407],
    [" ", 408,
     "[", -1],
    [1, 9, 407],
    [1, 682, 410,
     3, "meta", e[21], 411,
     0, -1],
    [1, 9, 409],
    [1, 9, 412],
    ["(", 413,
     0, 414],
    [1, 9, 415],
    [1, 9, 416],
    [1, 689, 417,
     ")", 414],
    [e[49], 418],
    [1, 9, 415],
    [1, 9, 419],
    [",", 420,
     0, -1],
    [1, 9, 421],
    [1, 682, 422,
     3, "meta", e[21], 423],
    [1, 9, 421],
    [1, 9, 424],
    ["(", 425,
     0, 426],
    [1, 9, 427],
    [1, 9, 428],
    [1, 689, 429,
     ")", 426],
    [e[49], 430],
    [1, 9, 427],
    [1, 9, 419],
    ["::", 436,
     [5, 699], 432],
    [3, "type qualifier", e[21], 433],
    [2, 389, 434, {"name":"TemplateArgs"},
     0, 434],
    [1, 9, 435],
    ["::", 436],
    [1, 9, 437],
    [/^\*?/, -1],
    [3, "keyword", e[50], 439,
     0, 439,
     0, -1],
    [1, 9, 440],
    [3, "keyword", e[51], 441,
     0, 441],
    [1, 9, 442],
    [1, 456, 443],
    [1, 9, 444],
    [",", 445,
     0, -1],
    [1, 9, 446],
    [3, "keyword", e[50], 447,
     0, 447],
    [1, 9, 448],
    [3, "keyword", e[51], 449,
     0, 449],
    [1, 9, 450],
    [1, 456, 451],
    [1, 9, 444],
    ["{", 453],
    [1, 9, 454],
    [2, 703, 455, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 454],
    [3, "keyword", e[17], 457,
     1, 152, -1,
     0, 459],
    [1, 9, 458],
    [1, 456, -1],
    [3, "keyword", e[29], 460,
     3, "keyword", e[30], 460,
     3, "keyword", e[31], 460,
     3, "keyword", e[13], 461,
     0, 461],
    [1, 9, 459],
    [1, 9, 462],
    [3, "keyword", e[28], 463,
     0, 464,
     1, 503, 465],
    [1, 9, 466],
    [3, "type", e[32], 467],
    [1, 9, 468],
    [/^\&?/, -1],
    [0, 464,
     1, 9, 469,
     0, 465],
    [1, 508, 470,
     0, -1],
    [3, "type", e[33], 465],
    [1, 9, 468],
    ["<", 472],
    [1, 9, 473],
    [1, 718, 474],
    [1, 9, 475],
    [">", -1],
    ["{", 477],
    [1, 9, 478],
    [1, 744, 479,
     0, 492],
    [1, 9, 480],
    [3, "operator", "=", 481,
     0, 482],
    [1, 9, 483],
    [1, 9, 484],
    [1, 232, 482],
    [",", 485,
     0, 492],
    [1, 9, 486],
    [1, 744, 487,
     0, 488],
    [1, 9, 489],
    [1, 9, 484],
    [3, "operator", "=", 490,
     0, 488],
    [1, 9, 491],
    [1, 232, 488],
    [1, 9, 493],
    ["}", -1],
    ["(", 495],
    [1, 9, 496],
    [1, 747, 497,
     ")", -1],
    [1, 9, 496],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 499],
    [1, 503, 500],
    [1, 9, 501],
    [1, 508, 502,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 501],
    [3, "keyword", e[17], 504,
     0, 505],
    [1, 9, 505],
    [0, 506,
     3, "type", e[21], -1],
    [1, 431, 507],
    [0, 506,
     3, "type qualified", e[21], -1],
    [2, 389, -1, {"name":"TemplateArgs"},
     "::", 509,
     1, 135, -1,
     "[", 511,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 510],
    [3, "type qualified", e[21], -1],
    [1, 9, 512],
    [1, 232, 513,
     0, 513],
    [1, 9, 514],
    ["]", -1],
    [3, "keyword", e[37], 516,
     3, "keyword", e[36], 520,
     2, 129, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 517],
    ["[", 518,
     0, -1],
    [1, 9, 519],
    ["]", -1],
    [1, 9, 521],
    ["[", 522,
     0, 523],
    [1, 9, 524],
    [1, 9, 525],
    ["]", 523],
    ["(", 526,
     0, 527],
    [1, 9, 528],
    [1, 9, 529],
    [1, 232, 530],
    [1, 135, -1,
     0, -1],
    [1, 9, 531],
    [")", 527],
    [3, "keyword", e[52], -1,
     2, 752, -1, {"name":"Lambda"},
     3, "keyword", e[53], 533,
     2, 601, -1, {"name":"BlockOf"},
     2, 760, 545, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 624, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 548,
     1, 205, -1,
     1, 117, -1],
    [1, 9, 534],
    ["<", 535],
    [1, 9, 536],
    [1, 456, 537],
    [1, 9, 538],
    [">", 539],
    [1, 9, 540],
    ["(", 541],
    [1, 9, 542],
    [1, 232, 543],
    [1, 9, 544],
    [")", -1],
    [1, 9, 546],
    [/^(?![\[\(\-\+])/, 547,
     0, -1],
    [1, 232, -1],
    [1, 9, 549],
    ["(", 550,
     e[49], 551],
    [1, 9, 552],
    [1, 9, 553],
    [1, 456, 554],
    [1, 232, -1],
    [1, 9, 555],
    [")", -1],
    [1, 232, 557,
     0, -1],
    [1, 9, 558],
    [e[49], 559],
    [1, 9, 560],
    [",", 561,
     0, -1],
    [1, 9, 562],
    [1, 232, 563],
    [1, 9, 564],
    [e[49], 565],
    [1, 9, 560],
    ["::", 571,
     [5, 765], 567],
    [3, "qualifier def", e[21], 568],
    [2, 389, 569, {"name":"TemplateArgs"},
     0, 569],
    [1, 9, 570],
    ["::", 571],
    [1, 9, 572],
    [/^\*?/, -1],
    ["(", 574],
    [1, 9, 575],
    [1, 769, 576],
    [1, 9, 577],
    [")", -1],
    [1, 456, 579,
     0, -1],
    [1, 9, 580],
    [",", 581,
     0, -1],
    [1, 9, 582],
    [1, 456, 583],
    [1, 9, 580],
    [":", 585],
    [1, 9, 586],
    [1, 791, -1],
    [e[21], 588],
    [1, 9, 589],
    ["&&", -1],
    [1, 456, 591],
    [1, 9, 592],
    [2, 623, 593, {"name":"fieldName","token":"property"},
     0, 593],
    [1, 9, 594],
    [":", 595,
     "[", 596,
     0, -1],
    [1, 9, 597],
    [1, 9, 598],
    [3, "number", e[19], -1],
    [1, 232, 599,
     0, 599],
    [1, 9, 600],
    ["]", -1],
    ["{", 602],
    [1, 9, 603],
    [".", 604,
     0, 605,
     0, 621],
    [1, 9, 606],
    [1, 9, 607],
    [2, 623, 608, {"name":"fieldName","token":"property"}],
    [1, 232, 609],
    [1, 9, 610],
    [1, 9, 611],
    [3, "operator", "=", 605],
    [",", 612,
     0, 621],
    [1, 9, 613],
    [".", 614,
     0, 615,
     0, 616],
    [1, 9, 617],
    [1, 9, 618],
    [1, 9, 611],
    [2, 623, 619, {"name":"fieldName","token":"property"}],
    [1, 232, 616],
    [1, 9, 620],
    [3, "operator", "=", 615],
    [1, 9, 622],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    ["{", 625],
    [1, 9, 626],
    [1, 232, 627,
     0, 632],
    [1, 9, 628],
    [",", 629,
     0, 632],
    [1, 9, 630],
    [1, 232, 631,
     0, 631],
    [1, 9, 628],
    [1, 9, 633],
    ["}", -1],
    [3, "variable qualifier", e[21], 635],
    [1, 797, 636,
     0, 636],
    [1, 9, 637],
    ["::", -1],
    [3, "keyword", e[25], 639,
     0, 640,
     0, 641,
     0, -1],
    [1, 9, 642],
    [1, 9, 643],
    [3, "keyword", e[29], 644,
     3, "keyword", e[30], 644,
     [5, 802], 645,
     1, 456, 646],
    [2, 389, 640, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 647,
     3, "keyword", e[17], 647],
    [1, 9, 641],
    [1, 803, 648],
    [1, 9, 649],
    [1, 9, 650],
    [1, 9, 651],
    [2, 573, 648, {"name":"ParamList"},
     1, 377, 648,
     0, 652,
     0, 648],
    [1, 456, 653],
    [e[49], 653],
    [e[57], 654],
    [1, 9, 655],
    [1, 331, 656],
    [",", 657,
     0, -1],
    [1, 9, 658],
    [1, 9, 659],
    [0, 652,
     0, 648],
    [3, "keyword", e[25], 660,
     0, 661,
     0, 662],
    [1, 9, 663],
    [1, 9, 664],
    [3, "keyword", e[29], 665,
     3, "keyword", e[30], 665,
     [5, 809], 666,
     1, 456, 667],
    [2, 389, 661, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 668,
     3, "keyword", e[17], 668],
    [1, 9, 662],
    [1, 803, 669],
    [1, 9, 670],
    [1, 9, 671],
    [1, 9, 672],
    [2, 573, 669, {"name":"ParamList"},
     1, 377, 669,
     0, 673,
     0, 669],
    [1, 456, 674],
    [e[49], 674],
    [e[57], 675],
    [1, 9, 655],
    [1, 331, 676],
    [1, 9, 677],
    [0, 673,
     0, 669],
    [3, "attribute", "{", 679,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 678,
     "\n", 680,
     0, -1],
    [1, 678, 681],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 678],
    [/^(?=\*\/)/, 678,
     3, "attribute", "}", 678],
    ["::", 687,
     [5, 810], 683],
    [3, "meta", e[21], 684],
    [2, 389, 685, {"name":"TemplateArgs"},
     0, 685],
    [1, 9, 686],
    ["::", 687],
    [1, 9, 688],
    [/^\*?/, -1],
    [3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     e[21], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 690,
     "[", 693,
     "{", 696],
    [1, 9, 691],
    [1, 689, 692,
     ")", -1],
    [1, 9, 691],
    [1, 9, 694],
    [1, 689, 695,
     "]", -1],
    [1, 9, 694],
    [1, 9, 697],
    [1, 689, 698,
     "}", -1],
    [1, 9, 697],
    [3, "type qualifier", e[21], 700],
    [1, 797, 701,
     0, 701],
    [1, 9, 702],
    ["::", -1],
    [3, "keyword", e[51], 704,
     2, 182, -1, {"name":"Template"},
     1, 167, -1,
     3, "keyword", e[0], 706,
     1, 205, 710,
     0, 712],
    [1, 9, 705],
    [":", -1],
    [1, 9, 707],
    [2, 237, 708, {"name":"ArgList"}],
    [1, 9, 709],
    [";", -1],
    [1, 9, 711],
    [/^\;?/, -1],
    [3, "keyword", e[29], 713,
     3, "keyword", e[30], 713,
     1, 191, 714,
     1, 152, 715,
     2, 814, -1, {"name":"ObjectMember"}],
    [1, 9, 712],
    [1, 9, 716],
    [1, 9, 717],
    [/^\;?/, -1],
    [/^\;?/, -1],
    [1, 835, 719,
     1, 456, 720,
     0, -1],
    [1, 9, 721],
    [1, 9, 722],
    [",", 723,
     0, -1],
    ["...", 724,
     1, 354, 725],
    [1, 9, 726],
    [1, 9, 722],
    [1, 9, 727],
    [1, 835, 728,
     1, 456, 729],
    [2, 573, 730, {"name":"ParamList"},
     0, 730],
    [1, 9, 721],
    [1, 9, 731],
    [1, 9, 732],
    ["...", 733,
     1, 354, 734],
    [3, "keyword", e[29], 735,
     3, "keyword", e[30], 735,
     3, "keyword", e[31], 735,
     3, "operator", "=", 736,
     0, 719],
    [1, 9, 731],
    [1, 9, 737],
    [1, 9, 732],
    [1, 9, 738],
    [2, 573, 739, {"name":"ParamList"},
     0, 739],
    [1, 803, 719],
    [1, 9, 740],
    [3, "keyword", e[29], 741,
     3, "keyword", e[30], 741,
     3, "keyword", e[31], 741,
     3, "operator", "=", 742,
     0, 728],
    [1, 9, 740],
    [1, 9, 743],
    [1, 803, 728],
    [3, "keyword", e[34], 745,
     3, "def property", e[21], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[58], -1,
     3, "keyword", e[36], 746,
     3, "keyword", e[37], 746],
    [e[59], -1],
    [2, 494, -1, {"name":"ParenTokens"},
     2, 848, -1, {"name":"BracketTokens"},
     2, 852, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     0, 748,
     2, 380, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 749,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 750],
    [0, 748,
     2, 388, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[21], 751],
    ["::", 749],
    ["[", 753],
    [1, 9, 754],
    [/^(?!\[)/, 755],
    [1, 856, 756],
    [1, 9, 757],
    ["]", 758],
    [1, 9, 759],
    [2, 263, -1, {"name":"FunctionDef"},
     2, 200, -1, {"name":"Block"}],
    ["(", 761],
    [1, 9, 762],
    [1, 232, 763,
     0, 763],
    [1, 9, 764],
    [")", -1],
    [3, "qualifier def", e[21], 766],
    [1, 797, 767,
     0, 767],
    [1, 9, 768],
    ["::", -1],
    [1, 456, 770,
     0, -1],
    [1, 9, 771],
    [1, 354, 772,
     0, 773],
    [1, 9, 774],
    [1, 9, 775],
    [2, 573, 776, {"name":"ParamList"},
     0, 776],
    [",", 777,
     0, -1],
    [1, 9, 778],
    [1, 9, 779],
    [3, "operator", "=", 780,
     0, 773],
    [1, 456, 781],
    [1, 9, 782],
    [1, 9, 783],
    [1, 232, 773],
    [1, 354, 784,
     0, 785],
    [1, 9, 786],
    [1, 9, 775],
    [2, 573, 787, {"name":"ParamList"},
     0, 787],
    [1, 9, 788],
    [3, "operator", "=", 789,
     0, 785],
    [1, 9, 790],
    [1, 232, 785],
    [1, 866, 792,
     0, -1],
    [1, 9, 793],
    [",", 794,
     0, -1],
    [1, 9, 795],
    [1, 866, 796],
    [1, 9, 793],
    ["<", 798],
    [1, 9, 799],
    [e[57], 800,
     ">", -1],
    [1, 797, 801,
     2, 124, 801, {"name":"string","token":"string"},
     /^[^]/, 801],
    [1, 9, 799],
    [3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"}],
    [1, 515, 804,
     1, 532, 805],
    [1, 9, 803],
    [1, 9, 806],
    [e[57], 807,
     0, -1],
    [1, 331, 808],
    [1, 9, 806],
    [3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"}],
    [3, "meta", e[21], 811],
    [1, 797, 812,
     0, 812],
    [1, 9, 813],
    ["::", -1],
    [3, "keyword", e[29], 815,
     3, "keyword", e[30], 815,
     3, "keyword", e[31], 815,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 823,
     1, 456, 816],
    [1, 9, 814],
    [1, 9, 817],
    [1, 880, 818],
    [1, 9, 819],
    [",", 820,
     0, 823],
    [1, 9, 821],
    [1, 880, 822],
    [1, 9, 819],
    [1, 9, 824],
    [2, 263, -1, {"name":"FunctionDef"},
     1, 377, 825,
     ":", 826,
     "[", 827,
     0, 825,
     1, 205, 828],
    [1, 9, 829],
    [1, 9, 830],
    [1, 9, 831],
    [1, 9, 832],
    [";", -1],
    [3, "number", e[19], 825],
    [1, 232, 833,
     0, 833],
    [/^\;?/, -1],
    [1, 9, 834],
    ["]", 825],
    [3, "keyword", e[25], 836,
     0, 838],
    [1, 9, 837],
    [2, 471, 838, {"name":"TemplateParams"}],
    [1, 9, 839],
    [3, "keyword", e[20], 840,
     3, "keyword", e[17], 840],
    [1, 9, 841],
    [e[49], 842],
    [1, 9, 843],
    [3, "type def", e[21], 844,
     0, 844],
    [1, 9, 845],
    [3, "operator", "=", 846,
     0, -1],
    [1, 9, 847],
    [1, 117, -1,
     3, "number", e[19], -1],
    ["[", 849],
    [1, 9, 850],
    [1, 747, 851,
     "]", -1],
    [1, 9, 850],
    ["{", 853],
    [1, 9, 854],
    [1, 747, 855,
     "}", -1],
    [1, 9, 854],
    [/^\&?/, 857,
     "=", 858,
     3, "keyword", e[52], 858,
     0, -1],
    [1, 9, 859],
    [1, 9, 860],
    [1, 117, 858,
     0, 858],
    [",", 861,
     0, -1],
    [1, 9, 862],
    [/^\&?/, 863,
     "=", 864,
     3, "keyword", e[52], 864],
    [1, 9, 865],
    [1, 9, 860],
    [1, 117, 864,
     0, 864],
    [1, 381, 867,
     2, 623, 868, {"name":"fieldName","token":"property"}],
    [1, 9, 866],
    [1, 9, 869],
    [2, 389, 870, {"name":"TemplateArgs"},
     0, 870],
    [1, 9, 871],
    ["(", 872,
     "{", 873],
    [1, 9, 874],
    [1, 9, 875],
    [1, 892, 876],
    [1, 892, 877],
    [1, 9, 878],
    [1, 9, 879],
    [")", -1],
    ["}", -1],
    [0, 881,
     "(", 888],
    [e[60], 882,
     1, 744, 883],
    [1, 9, 881],
    [1, 9, 884],
    ["[", 885,
     0, -1],
    [1, 9, 886],
    ["]", 887],
    [1, 9, 884],
    [1, 9, 889],
    [1, 880, 890],
    [1, 9, 891],
    [")", -1],
    [1, 232, 893,
     0, -1],
    [1, 9, 894],
    [",", 895,
     0, -1],
    [1, 9, 896],
    [1, 232, 897],
    [1, 9, 894]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var open = rawStringOpen.exec(cx.startLine);
    if (!open) { return false }
    var closing = ")" + open[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
