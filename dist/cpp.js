(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile|restrict)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[27], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[33], -1,
     3, "type", e[34], -1,
     3, "keyword", e[32], -1,
     3, "atom", e[54], -1,
     3, "meta", e[28], -1,
     1, 123, -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[41], -1,
     3, "operator", e[43], -1,
     2, 137, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[23], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 137, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 137, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 142, -1,
     1, 159, 13,
     3, "keyword", e[0], 17,
     3, "keyword", e[1], 21,
     3, "keyword", e[2], 29,
     3, "keyword", e[3], 33,
     3, "keyword", e[4], 37,
     1, 174, -1,
     2, 189, -1, {"name":"Template"},
     [7, "constructorAhead"], 43,
     1, 198, -1,
     3, "keyword", e[5], 46,
     3, "keyword", e[6], 47,
     3, "keyword", e[7], 48,
     3, "keyword", e[8], 72,
     3, "keyword", e[9], 77,
     2, 207, -1, {"name":"Block"},
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 83,
     3, "keyword", e[12], 87,
     3, "keyword", e[13], 91,
     3, "keyword", e[14], 99,
     3, "keyword", e[15], 100,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 211]], 99,
     1, 212, 103,
     2, 215, 107, {"name":"DeclType"},
     ";", -1,
     1, 239, 121],
    [1, 9, 14],
    [1, 245, 15,
     0, 15],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [2, 249, 19, {"name":"ArgList"}],
    [1, 9, 20],
    [";", -1],
    [1, 9, 22],
    [1, 245, 23,
     0, 23],
    [1, 9, 24],
    [3, "operator", "=", 25,
     2, 254, -1, {"name":"NamespaceBlock"}],
    [1, 9, 26],
    [1, 123, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [1, 258, 31],
    [1, 9, 32],
    [";", -1],
    [1, 9, 34],
    [2, 207, 35, {"name":"Block"}],
    [1, 9, 36],
    [2, 263, -1, {"name":"Catch"}],
    [1, 9, 38],
    ["{", 39],
    [1, 9, 40],
    [2, 131, 41, {"name":"string","token":"string"}],
    [1, 9, 42],
    ["}", -1],
    [1, 245, 44],
    [1, 9, 45],
    [2, 275, -1, {"name":"FunctionDef"}],
    [1, 9, 49],
    [1, 9, 50],
    [1, 9, 51],
    ["(", 52],
    [2, 308, 53, {"name":"CondExpr"}],
    [2, 12, 54, {"name":"Statement"}],
    [1, 9, 55],
    [1, 9, 56],
    [1, 9, 57],
    [2, 12, 58, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 59],
    [1, 9, 60],
    [1, 9, 61],
    [1, 239, 62,
     0, 62],
    [2, 308, 63, {"name":"CondExpr"}],
    [1, 9, 64],
    [1, 9, 65],
    [";", 66],
    [";", -1],
    [1, 9, 67],
    [1, 239, 68,
     0, 68],
    [1, 9, 69],
    [")", 70],
    [1, 9, 71],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 73],
    [2, 308, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [2, 12, 76, {"name":"Statement"}],
    [2, 329, -1, {"name":"Alternative"}],
    [1, 9, 78],
    [2, 308, 79, {"name":"CondExpr"}],
    [1, 9, 80],
    [2, 207, -1, {"name":"Block"}],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [e[22], 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 239, 89,
     0, 89],
    [1, 9, 90],
    [";", -1],
    [1, 9, 92],
    [1, 245, 93,
     0, 93],
    [1, 9, 94],
    [2, 333, 95, {"name":"BlockOf"},
     0, 95],
    [1, 9, 96],
    [1, 245, 97,
     0, 97],
    [1, 9, 98],
    [";", -1],
    [1, 9, 101],
    [1, 9, 102],
    [":", -1],
    [1, 258, 99],
    [1, 9, 104],
    [2, 207, -1, {"name":"Block"},
     0, 105],
    [1, 343, 106,
     0, -1],
    [1, 9, 105],
    [1, 9, 108],
    [1, 366, 109],
    [1, 9, 110],
    [1, 212, 111,
     0, 111],
    [1, 9, 112],
    [[5, 385], 113,
     1, 389, 114,
     0, 114],
    [2, 275, -1, {"name":"FunctionDef"}],
    [1, 9, 115],
    [",", 116,
     ";", -1],
    [1, 9, 117],
    [1, 245, 118],
    [1, 9, 119],
    [1, 389, 120,
     0, 120],
    [1, 9, 115],
    [1, 9, 122],
    [";", -1],
    [0, 124,
     3, "type", e[17], -1,
     2, 392, 130, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 393, 125],
    [0, 124,
     3, "keyword", e[16], 126,
     3, "type qualified", e[17], 127,
     2, 400, 127, {"name":"qualifiedVariableName","token":"qualified"}],
    [1, 401, 127],
    [2, 403, 128, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 129,
     0, -1],
    [1, 123, -1],
    [2, 403, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 132,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 133],
    [[0, [7, "rawStringContinues"], /^[^]/], 132,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 134],
    ["\\", 135,
     [0, /^(?!\")/, /^[^]/], 134,
     "\"", -1],
    [/^[^]/, 134],
    [3, "keyword", e[18], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 138,
     "/*", 141,
     /^\/\/.*/, -1],
    [e[48], 139,
     0, 140],
    [0, 138,
     0, 138],
    [2, 408, 140, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 141,
     "*/", -1],
    [3, "keyword", e[19], 144,
     [0, [5, 419], "["], 145],
    [0, 142,
     0, -1],
    [1, 9, 146],
    [1, 9, 147],
    ["(", 148],
    ["[", 149],
    [1, 9, 150],
    [1, 9, 151],
    [3, "number", e[20], 152],
    [1, 423, 153],
    [1, 9, 154],
    [1, 9, 155],
    [")", 156],
    ["]", 157],
    [1, 9, 143],
    [1, 9, 158],
    ["]", 156],
    [3, "keyword", e[21], 160,
     3, "keyword", e[13], 160],
    [1, 9, 161],
    [1, 142, 162,
     0, 162],
    [1, 9, 163],
    [0, 164,
     3, "type def", e[22], 167],
    [1, 445, 165],
    [1, 9, 166],
    [0, 164,
     3, "type qualified", e[22], 167],
    [1, 9, 168],
    [3, "keyword", e[23], 169,
     ":", 170,
     0, 172],
    [1, 9, 168],
    [1, 9, 171],
    [1, 452, 172],
    [1, 9, 173],
    [2, 466, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 175],
    [1, 9, 176],
    [3, "keyword", e[18], 177,
     3, "keyword", e[1], 178,
     0, 178],
    [1, 9, 179],
    [1, 9, 180],
    [1, 470, 181],
    [1, 123, 181],
    [1, 9, 182],
    [3, "operator", "=", 183,
     0, 187],
    [1, 9, 184],
    [1, 470, 185],
    [1, 9, 186],
    [1, 366, 187,
     0, 187],
    [1, 9, 188],
    [";", -1],
    [3, "keyword", e[25], 190,
     0, 190],
    [1, 9, 191],
    [3, "keyword", e[26], 192],
    [1, 9, 193],
    [2, 485, 194, {"name":"TemplateParams"},
     0, 194],
    [1, 9, 195],
    [1, 9, 196],
    [1, 9, 197],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[27], 199],
    [1, 9, 200],
    [3, "keyword", e[21], 201,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 201,
     0, 201],
    [1, 9, 202],
    [1, 142, 203,
     0, 203],
    [1, 9, 204],
    [3, "type def", e[22], 205,
     0, 205],
    [1, 9, 206],
    [2, 490, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 208],
    [1, 9, 209],
    [2, 12, 210, {"name":"Statement"},
     "}", -1],
    [1, 9, 209],
    [e[45], 211,
     /^\:(?!\:)/, -1],
    [3, "meta", e[28], 213],
    [1, 9, 214],
    [2, 510, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 216,
     0, 227,
     3, "keyword", e[29], 233,
     [5, 514], 234],
    [3, "keyword", e[30], 217,
     3, "keyword", e[31], 217,
     3, "keyword", e[32], 217],
    [1, 9, 218],
    [0, 216,
     3, "keyword", e[29], 219,
     0, 220,
     1, 527, 221],
    [1, 9, 222],
    [3, "type", e[33], 223],
    [1, 9, 224],
    [/^\&?/, -1],
    [0, 220,
     1, 9, 225,
     0, 221],
    [1, 532, 226,
     0, -1],
    [3, "type", e[34], 221],
    [1, 9, 224],
    [3, "type", e[33], 228],
    [1, 9, 229],
    [0, 227,
     3, "type", e[34], 230,
     0, 230],
    [1, 9, 231],
    [1, 532, 232,
     0, -1],
    [1, 9, 231],
    [1, 9, 235],
    [1, 527, 236],
    [/^\&?/, -1],
    [1, 9, 237],
    [1, 532, 238,
     0, -1],
    [1, 9, 237],
    [1, 258, 240],
    [1, 9, 241],
    [",", 242,
     0, -1],
    [1, 9, 243],
    [1, 258, 244],
    [1, 9, 241],
    [3, "keyword", e[16], 246,
     0, 247,
     3, "def", e[35], -1],
    [1, 401, -1],
    [1, 541, 248],
    [0, 247,
     3, "qualified def", e[35], -1],
    ["(", 250],
    [1, 9, 251],
    [1, 548, 252],
    [1, 9, 253],
    [")", -1],
    ["{", 255],
    [1, 9, 256],
    [2, 12, 257, {"name":"Statement"},
     "}", -1],
    [1, 9, 256],
    [1, 558, 259,
     1, 575, 260],
    [1, 9, 258],
    [1, 9, 261],
    [1, 343, 262,
     0, -1],
    [1, 9, 261],
    [3, "keyword", e[36], 264,
     0, -1],
    [1, 9, 265],
    ["(", 266],
    [1, 9, 267],
    [1, 470, 268],
    [1, 9, 269],
    [1, 366, 270,
     0, 270],
    [1, 9, 271],
    [")", 272],
    [1, 9, 273],
    [2, 207, 274, {"name":"Block"}],
    [1, 9, 263],
    [2, 599, 276, {"name":"ParamList"}],
    [1, 9, 277],
    [3, "keyword", e[32], 278,
     /^(?:\&\&|\&)?/, 279],
    [1, 9, 277],
    [1, 9, 280],
    [3, "keyword", e[37], 281,
     3, "keyword", e[2], 282,
     0, 293],
    [1, 9, 283],
    [1, 9, 284],
    ["(", 285,
     0, 293],
    ["(", 286],
    [1, 9, 287],
    [1, 9, 288],
    [1, 258, 289],
    [1, 604, 290],
    [1, 9, 291],
    [1, 9, 292],
    [")", 293],
    [")", 293],
    [1, 9, 294],
    [1, 142, 295,
     0, 295],
    [1, 9, 296],
    ["->", 297,
     0, 299],
    [1, 9, 298],
    [1, 470, 299],
    [1, 9, 300],
    [3, "keyword", e[38], 301,
     2, 610, 302, {"name":"InitializerList"},
     0, 302],
    [1, 9, 300],
    [1, 9, 303],
    [";", -1,
     2, 207, -1, {"name":"Block"},
     3, "operator", "=", 304],
    [1, 9, 305],
    [3, "keyword", e[14], 306,
     3, "keyword", e[39], 306],
    [1, 9, 307],
    [";", -1],
    ["(", 309],
    [1, 9, 310],
    [[6, 613], 311,
     1, 239, 327,
     0, 327],
    [2, 215, 312, {"name":"DeclType"}],
    [1, 9, 313],
    [1, 366, 314],
    [1, 9, 315],
    [1, 212, 316,
     0, 316],
    [1, 9, 317],
    [1, 389, 318,
     0, 318],
    [1, 9, 319],
    [",", 320,
     ";", 321,
     0, 327],
    [1, 9, 322],
    [1, 9, 323],
    [1, 245, 324],
    [1, 258, 327,
     0, 327],
    [1, 9, 325],
    [1, 389, 326,
     0, 326],
    [1, 9, 319],
    [1, 9, 328],
    [")", -1],
    [1, 9, 330],
    [3, "keyword", e[40], 331,
     0, -1],
    [1, 9, 332],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 334],
    [1, 9, 335],
    [1, 616, 336,
     0, 341],
    [1, 9, 337],
    [";", 338,
     0, 341],
    [1, 9, 339],
    [1, 616, 340,
     0, 340],
    [1, 9, 337],
    [1, 9, 342],
    ["}", -1],
    [2, 627, -1, {"name":"BlockOf"},
     2, 249, 344, {"name":"ArgList"},
     e[42], 346,
     2, 249, -1, {"name":"ArgList"},
     "[", 352,
     3, "operator", e[41], -1,
     e[42], 356,
     3, "operator", e[43], 358,
     "?", 360],
    [1, 9, 345],
    [2, 207, -1, {"name":"Block"},
     0, -1],
    [1, 9, 347],
    [/^\*?/, 348],
    [1, 9, 349],
    [2, 649, 350, {"name":"fieldName","token":"property"}],
    [1, 9, 351],
    [2, 403, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 353],
    [1, 258, 354],
    [1, 9, 355],
    ["]", -1],
    [1, 9, 357],
    [2, 649, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 359],
    [1, 258, -1,
     0, -1],
    [1, 9, 361],
    [1, 258, 362],
    [1, 9, 363],
    [":", 364],
    [1, 9, 365],
    [1, 258, -1],
    [0, 367,
     "(", 381],
    [e[58], 368,
     "[", 369,
     1, 245, 370],
    [1, 9, 367],
    [1, 9, 371],
    [1, 9, 372],
    [1, 245, 373],
    ["[", 374,
     0, -1],
    [1, 9, 375],
    [1, 9, 376],
    [",", 377,
     "]", -1],
    ["]", 378],
    [1, 9, 379],
    [1, 9, 372],
    [1, 245, 380],
    [1, 9, 375],
    [1, 9, 382],
    [1, 366, 383],
    [1, 9, 384],
    [")", -1],
    ["(", 386],
    [1, 9, 387],
    [")", -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[29], -1,
     [5, 514], 388],
    [1, 527, -1],
    [3, "operator", "=", 390,
     2, 650, -1, {"name":"BlockOf"},
     2, 249, -1, {"name":"ArgList"}],
    [1, 9, 391],
    [1, 258, -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    ["::", 398,
     [5, 660], 394],
    [3, "variable qualifier", e[22], 395],
    [2, 403, 396, {"name":"TemplateArgs"},
     0, 396],
    [1, 9, 397],
    ["::", 398],
    [1, 9, 399],
    [/^\*?/, -1],
    [2, 392, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", "=", -1,
     3, "operator", e[43], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     /^(?:\(\)|\[\])/, -1,
     3, "keyword", e[44], 402,
     3, "keyword", e[39], 402],
    [/^(?:\[\])?/, -1],
    ["<", 404],
    [1, 9, 405],
    [1, 664, 406],
    [1, 9, 407],
    [">", -1],
    [3, "tag", /^\@f[\$\[\]]/, 417,
     3, "tag", /^\@param(?:\[(?:in|out|in\,out)\])?(?![a-zA-Z0-9¡-￿_])/, 409,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 410,
     3, "tag", e[47], 417,
     "{", 411],
    [e[45], 409,
     3, "def", e[46], 417,
     "<", 412,
     0, 417],
    [e[45], 410,
     3, "type", e[46], 417,
     0, 417],
    [3, "tag", e[47], 413],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 414],
    [/^[\t ]*/, 415],
    [">", 417],
    [1, 704, 416],
    ["}", 417],
    [e[48], 418,
     0, -1],
    [0, 417,
     0, 417],
    ["[", 420],
    [1, 9, 421],
    [" ", 422,
     "[", -1],
    [1, 9, 421],
    [1, 708, 424,
     3, "meta", e[22], 425,
     0, -1],
    [1, 9, 423],
    [1, 9, 426],
    ["(", 427,
     0, 428],
    [1, 9, 429],
    [1, 9, 430],
    [1, 715, 431,
     ")", 428],
    [e[49], 432],
    [1, 9, 429],
    [1, 9, 433],
    [",", 434,
     0, -1],
    [1, 9, 435],
    [1, 708, 436,
     3, "meta", e[22], 437],
    [1, 9, 435],
    [1, 9, 438],
    ["(", 439,
     0, 440],
    [1, 9, 441],
    [1, 9, 442],
    [1, 715, 443,
     ")", 440],
    [e[49], 444],
    [1, 9, 441],
    [1, 9, 433],
    ["::", 450,
     [5, 725], 446],
    [3, "type qualifier", e[22], 447],
    [2, 403, 448, {"name":"TemplateArgs"},
     0, 448],
    [1, 9, 449],
    ["::", 450],
    [1, 9, 451],
    [/^\*?/, -1],
    [3, "keyword", e[50], 453,
     0, 453,
     0, -1],
    [1, 9, 454],
    [3, "keyword", e[51], 455,
     0, 455],
    [1, 9, 456],
    [1, 470, 457],
    [1, 9, 458],
    [",", 459,
     0, -1],
    [1, 9, 460],
    [3, "keyword", e[50], 461,
     0, 461],
    [1, 9, 462],
    [3, "keyword", e[51], 463,
     0, 463],
    [1, 9, 464],
    [1, 470, 465],
    [1, 9, 458],
    ["{", 467],
    [1, 9, 468],
    [2, 729, 469, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 468],
    [3, "keyword", e[18], 471,
     1, 159, -1,
     0, 473],
    [1, 9, 472],
    [1, 470, -1],
    [3, "keyword", e[30], 474,
     3, "keyword", e[31], 474,
     3, "keyword", e[32], 474,
     3, "keyword", e[13], 475,
     0, 475],
    [1, 9, 473],
    [1, 9, 476],
    [3, "keyword", e[29], 477,
     0, 478,
     1, 527, 479],
    [1, 9, 480],
    [3, "type", e[33], 481],
    [1, 9, 482],
    [/^\&?/, -1],
    [0, 478,
     1, 9, 483,
     0, 479],
    [1, 532, 484,
     0, -1],
    [3, "type", e[34], 479],
    [1, 9, 482],
    ["<", 486],
    [1, 9, 487],
    [1, 746, 488],
    [1, 9, 489],
    [">", -1],
    ["{", 491],
    [1, 9, 492],
    [3, "keyword", e[16], 493,
     3, "def property", e[22], 494,
     0, 508],
    [1, 401, 494],
    [1, 9, 495],
    [3, "operator", "=", 496,
     0, 497],
    [1, 9, 498],
    [1, 9, 499],
    [1, 258, 497],
    [",", 500,
     0, 508],
    [1, 9, 501],
    [3, "keyword", e[16], 502,
     3, "def property", e[22], 503,
     0, 504],
    [1, 401, 503],
    [1, 9, 505],
    [1, 9, 499],
    [3, "operator", "=", 506,
     0, 504],
    [1, 9, 507],
    [1, 258, 504],
    [1, 9, 509],
    ["}", -1],
    ["(", 511],
    [1, 9, 512],
    [1, 772, 513,
     ")", -1],
    [1, 9, 512],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 515],
    [1, 527, 516],
    [1, 9, 517],
    [1, 532, 518,
     /^[a-zA-Z¡-￿_]/, -1,
     "(", 519],
    [1, 9, 517],
    [1, 9, 520],
    ["*", 521],
    [1, 9, 522],
    [e[22], 523],
    [1, 9, 524],
    [")", 525],
    [1, 9, 526],
    ["(", -1],
    [3, "keyword", e[18], 528,
     0, 529],
    [1, 9, 529],
    [0, 530,
     3, "type", e[22], -1],
    [1, 445, 531],
    [0, 530,
     3, "type qualified", e[22], -1],
    [2, 403, -1, {"name":"TemplateArgs"},
     "::", 533,
     1, 142, -1,
     "[", 537,
     /^[\*\&]/, -1,
     3, "keyword", e[32], -1],
    [1, 9, 534],
    [3, "keyword", e[16], 535,
     3, "type qualified", e[22], -1],
    [1, 9, 536],
    [1, 401, -1],
    [1, 9, 538],
    [1, 258, 539,
     0, 539],
    [1, 9, 540],
    ["]", -1],
    ["::", 546,
     [5, 777], 542],
    [3, "qualifier def", e[22], 543],
    [2, 403, 544, {"name":"TemplateArgs"},
     0, 544],
    [1, 9, 545],
    ["::", 546],
    [1, 9, 547],
    [/^\*?/, -1],
    [1, 258, 549,
     0, -1],
    [1, 9, 550],
    [e[49], 551],
    [1, 9, 552],
    [",", 553,
     0, -1],
    [1, 9, 554],
    [1, 258, 555],
    [1, 9, 556],
    [e[49], 557],
    [1, 9, 552],
    [3, "keyword", e[39], 559,
     3, "keyword", e[44], 563,
     2, 136, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 560],
    ["[", 561,
     0, -1],
    [1, 9, 562],
    ["]", -1],
    [1, 9, 564],
    ["[", 565,
     0, 566],
    [1, 9, 567],
    [1, 9, 568],
    ["]", 566],
    ["(", 569,
     0, 570],
    [1, 9, 571],
    [1, 9, 572],
    [1, 258, 573],
    [1, 142, -1,
     0, -1],
    [1, 9, 574],
    [")", 570],
    [3, "keyword", e[52], -1,
     2, 781, -1, {"name":"Lambda"},
     3, "keyword", e[53], 576,
     2, 627, -1, {"name":"BlockOf"},
     2, 789, 588, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     2, 650, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 591,
     1, 212, -1,
     1, 123, -1],
    [1, 9, 577],
    ["<", 578],
    [1, 9, 579],
    [1, 470, 580],
    [1, 9, 581],
    [">", 582],
    [1, 9, 583],
    ["(", 584],
    [1, 9, 585],
    [1, 258, 586],
    [1, 9, 587],
    [")", -1],
    [1, 9, 589],
    [/^(?![\[\(\-\+])/, 590,
     0, -1],
    [1, 258, -1],
    [1, 9, 592],
    ["(", 593,
     e[49], 594],
    [1, 9, 595],
    [1, 9, 596],
    [1, 470, 597],
    [1, 258, -1],
    [1, 9, 598],
    [")", -1],
    ["(", 600],
    [1, 9, 601],
    [1, 794, 602],
    [1, 9, 603],
    [")", -1],
    [1, 470, 605,
     0, -1],
    [1, 9, 606],
    [",", 607,
     0, -1],
    [1, 9, 608],
    [1, 470, 609],
    [1, 9, 606],
    [":", 611],
    [1, 9, 612],
    [1, 820, -1],
    [e[22], 614],
    [1, 9, 615],
    ["&&", -1],
    [1, 470, 617],
    [1, 9, 618],
    [2, 649, 619, {"name":"fieldName","token":"property"},
     0, 619],
    [1, 9, 620],
    [":", 621,
     "[", 622,
     0, -1],
    [1, 9, 623],
    [1, 9, 624],
    [3, "number", e[20], -1],
    [1, 258, 625,
     0, 625],
    [1, 9, 626],
    ["]", -1],
    ["{", 628],
    [1, 9, 629],
    [".", 630,
     0, 631,
     0, 647],
    [1, 9, 632],
    [1, 9, 633],
    [2, 649, 634, {"name":"fieldName","token":"property"}],
    [1, 258, 635],
    [1, 9, 636],
    [1, 9, 637],
    [3, "operator", "=", 631],
    [",", 638,
     0, 647],
    [1, 9, 639],
    [".", 640,
     0, 641,
     0, 642],
    [1, 9, 643],
    [1, 9, 644],
    [1, 9, 637],
    [2, 649, 645, {"name":"fieldName","token":"property"}],
    [1, 258, 642],
    [1, 9, 646],
    [3, "operator", "=", 641],
    [1, 9, 648],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    ["{", 651],
    [1, 9, 652],
    [1, 258, 653,
     0, 658],
    [1, 9, 654],
    [",", 655,
     0, 658],
    [1, 9, 656],
    [1, 258, 657,
     0, 657],
    [1, 9, 654],
    [1, 9, 659],
    ["}", -1],
    [3, "variable qualifier", e[22], 661],
    [1, 826, 662,
     0, 662],
    [1, 9, 663],
    ["::", -1],
    [3, "keyword", e[26], 665,
     0, 666,
     0, 667,
     0, -1],
    [1, 9, 668],
    [1, 9, 669],
    [3, "keyword", e[30], 670,
     3, "keyword", e[31], 670,
     [5, 831], 671,
     1, 470, 672],
    [2, 403, 666, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 673,
     3, "keyword", e[18], 673],
    [1, 9, 667],
    [1, 832, 674],
    [1, 9, 675],
    [1, 9, 676],
    [1, 9, 677],
    [2, 599, 674, {"name":"ParamList"},
     1, 389, 674,
     0, 678,
     0, 674],
    [1, 470, 679],
    [e[49], 679],
    [e[57], 680],
    [1, 9, 681],
    [1, 343, 682],
    [",", 683,
     0, -1],
    [1, 9, 684],
    [1, 9, 685],
    [0, 678,
     0, 674],
    [3, "keyword", e[26], 686,
     0, 687,
     0, 688],
    [1, 9, 689],
    [1, 9, 690],
    [3, "keyword", e[30], 691,
     3, "keyword", e[31], 691,
     [5, 838], 692,
     1, 470, 693],
    [2, 403, 687, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 694,
     3, "keyword", e[18], 694],
    [1, 9, 688],
    [1, 832, 695],
    [1, 9, 696],
    [1, 9, 697],
    [1, 9, 698],
    [2, 599, 695, {"name":"ParamList"},
     1, 389, 695,
     0, 699,
     0, 695],
    [1, 470, 700],
    [e[49], 700],
    [e[57], 701],
    [1, 9, 681],
    [1, 343, 702],
    [1, 9, 703],
    [0, 699,
     0, 695],
    [3, "attribute", "{", 705,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 704,
     "\n", 706,
     0, -1],
    [1, 704, 707],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 704],
    [/^(?=\*\/)/, 704,
     3, "attribute", "}", 704],
    ["::", 713,
     [5, 839], 709],
    [3, "meta", e[22], 710],
    [2, 403, 711, {"name":"TemplateArgs"},
     0, 711],
    [1, 9, 712],
    ["::", 713],
    [1, 9, 714],
    [/^\*?/, -1],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     e[22], -1,
     3, "operator", e[43], -1,
     ",", -1,
     "(", 716,
     "[", 719,
     "{", 722],
    [1, 9, 717],
    [1, 715, 718,
     ")", -1],
    [1, 9, 717],
    [1, 9, 720],
    [1, 715, 721,
     "]", -1],
    [1, 9, 720],
    [1, 9, 723],
    [1, 715, 724,
     "}", -1],
    [1, 9, 723],
    [3, "type qualifier", e[22], 726],
    [1, 826, 727,
     0, 727],
    [1, 9, 728],
    ["::", -1],
    [3, "keyword", e[51], 730,
     2, 189, -1, {"name":"Template"},
     1, 174, -1,
     3, "keyword", e[0], 732,
     1, 212, 736,
     0, 738],
    [1, 9, 731],
    [":", -1],
    [1, 9, 733],
    [2, 249, 734, {"name":"ArgList"}],
    [1, 9, 735],
    [";", -1],
    [1, 9, 737],
    [/^\;?/, -1],
    [3, "keyword", e[30], 739,
     3, "keyword", e[31], 739,
     1, 198, 740,
     1, 159, 741,
     2, 843, -1, {"name":"ObjectMember"}],
    [1, 9, 738],
    [1, 9, 742],
    [1, 9, 743],
    [/^\;?/, -1],
    [1, 245, 744,
     0, 744],
    [1, 9, 745],
    [/^\;?/, -1],
    [1, 864, 747,
     1, 470, 748,
     0, -1],
    [1, 9, 749],
    [1, 9, 750],
    [",", 751,
     0, -1],
    ["...", 752,
     1, 366, 753],
    [1, 9, 754],
    [1, 9, 750],
    [1, 9, 755],
    [1, 864, 756,
     1, 470, 757],
    [2, 599, 758, {"name":"ParamList"},
     0, 758],
    [1, 9, 749],
    [1, 9, 759],
    [1, 9, 760],
    ["...", 761,
     1, 366, 762],
    [3, "keyword", e[30], 763,
     3, "keyword", e[31], 763,
     3, "keyword", e[32], 763,
     3, "operator", "=", 764,
     0, 747],
    [1, 9, 759],
    [1, 9, 765],
    [1, 9, 760],
    [1, 9, 766],
    [2, 599, 767, {"name":"ParamList"},
     0, 767],
    [1, 832, 747],
    [1, 9, 768],
    [3, "keyword", e[30], 769,
     3, "keyword", e[31], 769,
     3, "keyword", e[32], 769,
     3, "operator", "=", 770,
     0, 756],
    [1, 9, 768],
    [1, 9, 771],
    [1, 832, 756],
    [2, 510, -1, {"name":"ParenTokens"},
     2, 877, -1, {"name":"BracketTokens"},
     2, 881, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     3, "operator", e[43], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     0, 773,
     2, 392, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 774,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 775],
    [0, 773,
     2, 400, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[22], 776],
    ["::", 774],
    [3, "qualifier def", e[22], 778],
    [1, 826, 779,
     0, 779],
    [1, 9, 780],
    ["::", -1],
    ["[", 782],
    [1, 9, 783],
    [/^(?!\[)/, 784],
    [1, 885, 785],
    [1, 9, 786],
    ["]", 787],
    [1, 9, 788],
    [2, 275, -1, {"name":"FunctionDef"},
     2, 207, -1, {"name":"Block"}],
    ["(", 790],
    [1, 9, 791],
    [1, 239, 792,
     0, 792],
    [1, 9, 793],
    [")", -1],
    [1, 470, 795,
     "...", 796,
     0, -1],
    [1, 9, 797],
    [1, 9, 798],
    [1, 366, 799,
     0, 800],
    [",", 801,
     0, -1],
    [1, 9, 802],
    [1, 9, 803],
    [1, 9, 804],
    [2, 599, 805, {"name":"ParamList"},
     0, 805],
    [e[49], 796],
    [1, 470, 806,
     "...", 807],
    [1, 9, 808],
    [1, 9, 809],
    [1, 9, 798],
    [3, "operator", "=", 810,
     0, 800],
    [1, 366, 811,
     0, 812],
    [1, 9, 813],
    [1, 9, 814],
    [1, 9, 815],
    [1, 258, 800],
    [2, 599, 816, {"name":"ParamList"},
     0, 816],
    [e[49], 807],
    [1, 9, 817],
    [3, "operator", "=", 818,
     0, 812],
    [1, 9, 819],
    [1, 258, 812],
    [1, 895, 821,
     0, -1],
    [1, 9, 822],
    [",", 823,
     0, -1],
    [1, 9, 824],
    [1, 895, 825],
    [1, 9, 822],
    ["<", 827],
    [1, 9, 828],
    [e[57], 829,
     ">", -1],
    [1, 826, 830,
     2, 131, 830, {"name":"string","token":"string"},
     /^[^]/, 830],
    [1, 9, 828],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [1, 558, 833,
     1, 575, 834],
    [1, 9, 832],
    [1, 9, 835],
    [e[57], 836,
     0, -1],
    [1, 343, 837],
    [1, 9, 835],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [3, "meta", e[22], 840],
    [1, 826, 841,
     0, 841],
    [1, 9, 842],
    ["::", -1],
    [3, "keyword", e[30], 844,
     3, "keyword", e[31], 844,
     3, "keyword", e[32], 844,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 852,
     1, 470, 845],
    [1, 9, 843],
    [1, 9, 846],
    [1, 909, 847],
    [1, 9, 848],
    [",", 849,
     0, 852],
    [1, 9, 850],
    [1, 909, 851],
    [1, 9, 848],
    [1, 9, 853],
    [2, 275, -1, {"name":"FunctionDef"},
     1, 389, 854,
     ":", 855,
     "[", 856,
     0, 854,
     1, 212, 857],
    [1, 9, 858],
    [1, 9, 859],
    [1, 9, 860],
    [1, 9, 861],
    [";", -1],
    [3, "number", e[20], 854],
    [1, 258, 862,
     0, 862],
    [/^\;?/, -1],
    [1, 9, 863],
    ["]", 854],
    [3, "keyword", e[26], 865,
     0, 867],
    [1, 9, 866],
    [2, 485, 867, {"name":"TemplateParams"}],
    [1, 9, 868],
    [3, "keyword", e[21], 869,
     3, "keyword", e[18], 869],
    [1, 9, 870],
    [e[49], 871],
    [1, 9, 872],
    [3, "type def", e[22], 873,
     0, 873],
    [1, 9, 874],
    [3, "operator", "=", 875,
     0, -1],
    [1, 9, 876],
    [1, 123, -1,
     3, "number", e[20], -1],
    ["[", 878],
    [1, 9, 879],
    [1, 772, 880,
     "]", -1],
    [1, 9, 879],
    ["{", 882],
    [1, 9, 883],
    [1, 772, 884,
     "}", -1],
    [1, 9, 883],
    [/^\&?/, 886,
     "=", 887,
     3, "keyword", e[52], 887,
     0, -1],
    [1, 9, 888],
    [1, 9, 889],
    [1, 123, 887,
     0, 887],
    [",", 890,
     0, -1],
    [1, 9, 891],
    [/^\&?/, 892,
     "=", 893,
     3, "keyword", e[52], 893],
    [1, 9, 894],
    [1, 9, 889],
    [1, 123, 893,
     0, 893],
    [1, 393, 896,
     2, 649, 897, {"name":"fieldName","token":"property"}],
    [1, 9, 895],
    [1, 9, 898],
    [2, 403, 899, {"name":"TemplateArgs"},
     0, 899],
    [1, 9, 900],
    ["(", 901,
     "{", 902],
    [1, 9, 903],
    [1, 9, 904],
    [1, 922, 905],
    [1, 922, 906],
    [1, 9, 907],
    [1, 9, 908],
    [")", -1],
    ["}", -1],
    [0, 910,
     "(", 918],
    [e[58], 911,
     3, "keyword", e[16], 912,
     3, "def property", e[22], 913],
    [1, 9, 910],
    [1, 401, 913],
    [1, 9, 914],
    ["[", 915,
     0, -1],
    [1, 9, 916],
    ["]", 917],
    [1, 9, 914],
    [1, 9, 919],
    [1, 909, 920],
    [1, 9, 921],
    [")", -1],
    [1, 258, 923,
     0, -1],
    [1, 9, 924],
    [",", 925,
     0, -1],
    [1, 9, 926],
    [1, 258, 927],
    [1, 9, 924]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var open = rawStringOpen.exec(cx.startLine);
    if (!open) { return false }
    var closing = ")" + open[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
