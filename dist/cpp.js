(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[26], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[27], -1,
     1, 117, -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 130, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[22], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 130, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 130, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 135, -1,
     1, 152, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 167, -1,
     2, 180, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     1, 189, -1,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 43,
     3, "keyword", e[7], 44,
     3, "keyword", e[8], 68,
     3, "keyword", e[9], 73,
     2, 198, -1, {"name":"Block"},
     3, "keyword", e[10], 77,
     3, "keyword", e[11], 79,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 93,
     3, "keyword", e[15], 94,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 202]], 93,
     1, 203, 97,
     2, 206, 101, {"name":"DeclType"},
     ";", -1,
     1, 223, 115],
    [1, 9, 14],
    [2, 228, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 233, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 238, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 117, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 223, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 198, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 242, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 124, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 233, 40],
    [1, 9, 41],
    [2, 254, -1, {"name":"FunctionDef"}],
    [1, 9, 45],
    [1, 9, 46],
    [1, 9, 47],
    ["(", 48],
    [2, 287, 49, {"name":"CondExpr"}],
    [2, 12, 50, {"name":"Statement"}],
    [1, 9, 51],
    [1, 9, 52],
    [1, 9, 53],
    [2, 12, 54, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 55],
    [1, 9, 56],
    [1, 9, 57],
    [1, 223, 58,
     0, 58],
    [2, 287, 59, {"name":"CondExpr"}],
    [1, 9, 60],
    [1, 9, 61],
    [";", 62],
    [";", -1],
    [1, 9, 63],
    [1, 223, 64,
     0, 64],
    [1, 9, 65],
    [")", 66],
    [1, 9, 67],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 69],
    [2, 287, 70, {"name":"CondExpr"}],
    [1, 9, 71],
    [2, 12, 72, {"name":"Statement"}],
    [2, 308, -1, {"name":"Alternative"}],
    [1, 9, 74],
    [2, 287, 75, {"name":"CondExpr"}],
    [1, 9, 76],
    [2, 198, -1, {"name":"Block"}],
    [1, 9, 78],
    [";", -1],
    [1, 9, 80],
    [e[21], 81],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [1, 223, 85,
     0, 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 233, 89,
     0, 89],
    [1, 9, 90],
    [2, 312, 91, {"name":"BlockOf"},
     0, 91],
    [1, 9, 92],
    [";", -1],
    [1, 9, 95],
    [1, 9, 96],
    [":", -1],
    [1, 223, 93],
    [1, 9, 98],
    [2, 198, -1, {"name":"Block"},
     0, 99],
    [1, 322, 100,
     0, -1],
    [1, 9, 99],
    [1, 9, 102],
    [1, 345, 103],
    [1, 9, 104],
    [1, 203, 105,
     0, 105],
    [1, 9, 106],
    [[5, 357], 107,
     1, 361, 108,
     0, 108],
    [2, 254, -1, {"name":"FunctionDef"}],
    [1, 9, 109],
    [",", 110,
     ";", -1],
    [1, 9, 111],
    [1, 233, 112],
    [1, 9, 113],
    [1, 361, 114,
     0, 114],
    [1, 9, 109],
    [1, 9, 116],
    [";", -1],
    [0, 118,
     3, "type", e[16], -1,
     2, 364, 123, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 365, 119],
    [0, 118,
     3, "type qualified", e[16], 120,
     2, 372, 120, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 373, 121, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 122,
     0, -1],
    [1, 117, -1],
    [2, 373, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 125,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 126],
    [[0, [7, "rawStringContinues"], /^[^]/], 125,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 127],
    ["\\", 128,
     [0, /^(?!\")/, /^[^]/], 127,
     "\"", -1],
    [/^[^]/, 127],
    [3, "keyword", e[17], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 131,
     "/*", 134,
     /^\/\/.*/, -1],
    [e[48], 132,
     0, 133],
    [0, 131,
     0, 131],
    [2, 378, 133, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 134,
     "*/", -1],
    [3, "keyword", e[18], 137,
     [0, [5, 389], "["], 138],
    [0, 135,
     0, -1],
    [1, 9, 139],
    [1, 9, 140],
    ["(", 141],
    ["[", 142],
    [1, 9, 143],
    [1, 9, 144],
    [3, "number", e[19], 145],
    [1, 393, 146],
    [1, 9, 147],
    [1, 9, 148],
    [")", 149],
    ["]", 150],
    [1, 9, 136],
    [1, 9, 151],
    ["]", 149],
    [3, "keyword", e[20], 153,
     3, "keyword", e[13], 153],
    [1, 9, 154],
    [1, 135, 155,
     0, 155],
    [1, 9, 156],
    [0, 157,
     3, "type def", e[21], 160],
    [1, 415, 158],
    [1, 9, 159],
    [0, 157,
     3, "type qualified", e[21], 160],
    [1, 9, 161],
    [3, "keyword", e[22], 162,
     ":", 163,
     0, 165],
    [1, 9, 161],
    [1, 9, 164],
    [1, 422, 165],
    [1, 9, 166],
    [";", -1,
     2, 436, -1, {"name":"ClassBody"}],
    [3, "keyword", e[23], 168],
    [1, 9, 169],
    [3, "keyword", e[17], 170,
     3, "keyword", e[1], 171,
     0, 171],
    [1, 9, 172],
    [1, 9, 173],
    [1, 440, 174],
    [1, 117, 174],
    [1, 9, 175],
    [3, "operator", "=", 176,
     0, 178],
    [1, 9, 177],
    [1, 440, 178],
    [1, 9, 179],
    [";", -1],
    [3, "keyword", e[24], 181,
     0, 181],
    [1, 9, 182],
    [3, "keyword", e[25], 183],
    [1, 9, 184],
    [2, 453, 185, {"name":"TemplateParams"},
     0, 185],
    [1, 9, 186],
    [1, 9, 187],
    [1, 9, 188],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[26], 190],
    [1, 9, 191],
    [3, "keyword", e[20], 192,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 192,
     0, 192],
    [1, 9, 193],
    [1, 135, 194,
     0, 194],
    [1, 9, 195],
    [3, "type def", e[21], 196,
     0, 196],
    [1, 9, 197],
    [2, 458, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 199],
    [1, 9, 200],
    [2, 12, 201, {"name":"Statement"},
     "}", -1],
    [1, 9, 200],
    [e[45], 202,
     /^\:(?!\:)/, -1],
    [3, "meta", e[27], 204],
    [1, 9, 205],
    [2, 476, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 207,
     0, 208,
     3, "keyword", e[28], 219,
     [5, 480], 220],
    [3, "keyword", e[29], 209,
     3, "keyword", e[30], 209,
     3, "keyword", e[31], 209],
    [3, "type", e[32], 210],
    [1, 9, 211],
    [1, 9, 212],
    [0, 207,
     3, "keyword", e[28], 213,
     0, 214,
     1, 485, 213],
    [0, 208,
     3, "type", e[33], 213,
     0, 213],
    [1, 9, 215],
    [3, "type", e[32], 216],
    [1, 490, 217,
     0, -1],
    [0, 214,
     1, 9, 218,
     0, 213],
    [1, 9, 215],
    [3, "type", e[33], 213],
    [1, 9, 221],
    [1, 485, 219],
    [1, 490, 222,
     0, -1],
    [1, 9, 221],
    [1, 497, 224,
     1, 514, 225],
    [1, 9, 223],
    [1, 9, 226],
    [1, 322, 227,
     0, -1],
    [1, 9, 226],
    ["(", 229],
    [1, 9, 230],
    [1, 538, 231],
    [1, 9, 232],
    [")", -1],
    [3, "keyword", e[34], 234,
     0, 236,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 235,
     3, "keyword", e[37], 235],
    [e[58], -1],
    [1, 548, 237],
    [0, 236,
     3, "qualified def", e[38], -1],
    ["{", 239],
    [1, 9, 240],
    [2, 12, 241, {"name":"Statement"},
     "}", -1],
    [1, 9, 240],
    [3, "keyword", e[39], 243,
     0, -1],
    [1, 9, 244],
    ["(", 245],
    [1, 9, 246],
    [1, 440, 247],
    [1, 9, 248],
    [1, 345, 249,
     0, 249],
    [1, 9, 250],
    [")", 251],
    [1, 9, 252],
    [2, 198, 253, {"name":"Block"}],
    [1, 9, 242],
    [2, 555, 255, {"name":"ParamList"}],
    [1, 9, 256],
    [3, "keyword", e[31], 257,
     /^(?:\&\&|\&)?/, 258],
    [1, 9, 256],
    [1, 9, 259],
    [3, "keyword", e[40], 260,
     3, "keyword", e[2], 261,
     0, 272],
    [1, 9, 262],
    [1, 9, 263],
    ["(", 264,
     0, 272],
    ["(", 265],
    [1, 9, 266],
    [1, 9, 267],
    [1, 223, 268],
    [1, 560, 269],
    [1, 9, 270],
    [1, 9, 271],
    [")", 272],
    [")", 272],
    [1, 9, 273],
    [1, 135, 274,
     0, 274],
    [1, 9, 275],
    ["->", 276,
     0, 278],
    [1, 9, 277],
    [1, 440, 278],
    [1, 9, 279],
    [3, "keyword", e[41], 280,
     2, 566, 281, {"name":"InitializerList"},
     0, 281],
    [1, 9, 279],
    [1, 9, 282],
    [";", -1,
     2, 198, -1, {"name":"Block"},
     3, "operator", "=", 283],
    [1, 9, 284],
    [3, "keyword", e[14], 285,
     3, "keyword", e[37], 285],
    [1, 9, 286],
    [";", -1],
    ["(", 288],
    [1, 9, 289],
    [[6, 569], 290,
     1, 223, 306,
     0, 306],
    [2, 206, 291, {"name":"DeclType"}],
    [1, 9, 292],
    [1, 345, 293],
    [1, 9, 294],
    [1, 203, 295,
     0, 295],
    [1, 9, 296],
    [1, 361, 297,
     0, 297],
    [1, 9, 298],
    [",", 299,
     ";", 300,
     0, 306],
    [1, 9, 301],
    [1, 9, 302],
    [1, 233, 303],
    [1, 223, 306,
     0, 306],
    [1, 9, 304],
    [1, 361, 305,
     0, 305],
    [1, 9, 298],
    [1, 9, 307],
    [")", -1],
    [1, 9, 309],
    [3, "keyword", e[42], 310,
     0, -1],
    [1, 9, 311],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 313],
    [1, 9, 314],
    [1, 572, 315,
     0, 320],
    [1, 9, 316],
    [";", 317,
     0, 320],
    [1, 9, 318],
    [1, 572, 319,
     0, 319],
    [1, 9, 316],
    [1, 9, 321],
    ["}", -1],
    [2, 583, -1, {"name":"BlockOf"},
     2, 228, 323, {"name":"ArgList"},
     e[44], 325,
     2, 228, -1, {"name":"ArgList"},
     "[", 331,
     3, "operator", e[43], -1,
     e[44], 335,
     3, "operator", e[35], 337,
     "?", 339],
    [1, 9, 324],
    [2, 198, -1, {"name":"Block"},
     0, -1],
    [1, 9, 326],
    [/^\*?/, 327],
    [1, 9, 328],
    [2, 593, 329, {"name":"fieldName","token":"property"}],
    [1, 9, 330],
    [2, 373, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 332],
    [1, 223, 333],
    [1, 9, 334],
    ["]", -1],
    [1, 9, 336],
    [2, 593, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 338],
    [1, 223, -1,
     0, -1],
    [1, 9, 340],
    [1, 223, 341],
    [1, 9, 342],
    [":", 343],
    [1, 9, 344],
    [1, 223, -1],
    [0, 346,
     "(", 353],
    [e[61], 347,
     1, 233, 348],
    [1, 9, 346],
    [1, 9, 349],
    ["[", 350,
     0, -1],
    [1, 9, 351],
    ["]", 352],
    [1, 9, 349],
    [1, 9, 354],
    [1, 345, 355],
    [1, 9, 356],
    [")", -1],
    ["(", 358],
    [1, 9, 359],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 480], 360],
    [1, 485, -1],
    [3, "operator", "=", 362,
     2, 583, -1, {"name":"BlockOf"},
     2, 228, -1, {"name":"ArgList"}],
    [1, 9, 363],
    [1, 223, -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    ["::", 370,
     [5, 594], 366],
    [3, "variable qualifier", e[21], 367],
    [2, 373, 368, {"name":"TemplateArgs"},
     0, 368],
    [1, 9, 369],
    ["::", 370],
    [1, 9, 371],
    [/^\*?/, -1],
    [2, 364, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 374],
    [1, 9, 375],
    [1, 598, 376],
    [1, 9, 377],
    [">", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 379,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 380,
     3, "tag", e[47], 387,
     "{", 381],
    [e[45], 379,
     3, "def", e[46], 387,
     "<", 382,
     0, 387],
    [e[45], 380,
     3, "type", e[46], 387,
     0, 387],
    [3, "tag", e[47], 383],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 384],
    [/^[\t ]*/, 385],
    [">", 387],
    [1, 630, 386],
    ["}", 387],
    [e[48], 388,
     0, -1],
    [0, 387,
     0, 387],
    ["[", 390],
    [1, 9, 391],
    [" ", 392,
     "[", -1],
    [1, 9, 391],
    [1, 634, 394,
     3, "meta", e[21], 395,
     0, -1],
    [1, 9, 393],
    [1, 9, 396],
    ["(", 397,
     0, 398],
    [1, 9, 399],
    [1, 9, 400],
    [1, 641, 401,
     ")", 398],
    [e[49], 402],
    [1, 9, 399],
    [1, 9, 403],
    [",", 404,
     0, -1],
    [1, 9, 405],
    [1, 634, 406,
     3, "meta", e[21], 407],
    [1, 9, 405],
    [1, 9, 408],
    ["(", 409,
     0, 410],
    [1, 9, 411],
    [1, 9, 412],
    [1, 641, 413,
     ")", 410],
    [e[49], 414],
    [1, 9, 411],
    [1, 9, 403],
    ["::", 420,
     [5, 651], 416],
    [3, "type qualifier", e[21], 417],
    [2, 373, 418, {"name":"TemplateArgs"},
     0, 418],
    [1, 9, 419],
    ["::", 420],
    [1, 9, 421],
    [/^\*?/, -1],
    [3, "keyword", e[50], 423,
     0, 423,
     0, -1],
    [1, 9, 424],
    [3, "keyword", e[51], 425,
     0, 425],
    [1, 9, 426],
    [1, 440, 427],
    [1, 9, 428],
    [",", 429,
     0, -1],
    [1, 9, 430],
    [3, "keyword", e[50], 431,
     0, 431],
    [1, 9, 432],
    [3, "keyword", e[51], 433,
     0, 433],
    [1, 9, 434],
    [1, 440, 435],
    [1, 9, 428],
    ["{", 437],
    [1, 9, 438],
    [2, 655, 439, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 438],
    [3, "keyword", e[17], 441,
     1, 152, -1,
     0, 443],
    [1, 9, 442],
    [1, 440, -1],
    [3, "keyword", e[29], 444,
     3, "keyword", e[30], 444,
     3, "keyword", e[31], 444,
     3, "keyword", e[13], 445,
     0, 445],
    [1, 9, 443],
    [1, 9, 446],
    [3, "keyword", e[28], 447,
     0, 448,
     1, 485, 447],
    [1, 9, 449],
    [3, "type", e[32], 450],
    [1, 490, 451,
     0, -1],
    [0, 448,
     1, 9, 452,
     0, 447],
    [1, 9, 449],
    [3, "type", e[33], 447],
    ["<", 454],
    [1, 9, 455],
    [1, 670, 456],
    [1, 9, 457],
    [">", -1],
    ["{", 459],
    [1, 9, 460],
    [1, 696, 461,
     0, 474],
    [1, 9, 462],
    [3, "operator", "=", 463,
     0, 464],
    [1, 9, 465],
    [1, 9, 466],
    [1, 223, 464],
    [",", 467,
     0, 474],
    [1, 9, 468],
    [1, 696, 469,
     0, 470],
    [1, 9, 471],
    [1, 9, 466],
    [3, "operator", "=", 472,
     0, 470],
    [1, 9, 473],
    [1, 223, 470],
    [1, 9, 475],
    ["}", -1],
    ["(", 477],
    [1, 9, 478],
    [1, 699, 479,
     ")", -1],
    [1, 9, 478],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 481],
    [1, 485, 482],
    [1, 9, 483],
    [1, 490, 484,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 483],
    [3, "keyword", e[17], 486,
     0, 487],
    [1, 9, 487],
    [0, 488,
     3, "type", e[21], -1],
    [1, 415, 489],
    [0, 488,
     3, "type qualified", e[21], -1],
    [2, 373, -1, {"name":"TemplateArgs"},
     "::", 491,
     1, 135, -1,
     "[", 493,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 492],
    [3, "type qualified", e[21], -1],
    [1, 9, 494],
    [1, 223, 495,
     0, 495],
    [1, 9, 496],
    ["]", -1],
    [3, "keyword", e[37], 498,
     3, "keyword", e[36], 502,
     2, 129, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 499],
    ["[", 500,
     0, -1],
    [1, 9, 501],
    ["]", -1],
    [1, 9, 503],
    ["[", 504,
     0, 505],
    [1, 9, 506],
    [1, 9, 507],
    ["]", 505],
    ["(", 508,
     0, 509],
    [1, 9, 510],
    [1, 9, 511],
    [1, 223, 512],
    [1, 135, -1,
     0, -1],
    [1, 9, 513],
    [")", 509],
    [3, "keyword", e[52], -1,
     2, 704, -1, {"name":"Lambda"},
     3, "keyword", e[53], 515,
     2, 712, -1, {"name":"BlockOf"},
     2, 734, 527, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 583, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 530,
     1, 203, -1,
     1, 117, -1],
    [1, 9, 516],
    ["<", 517],
    [1, 9, 518],
    [1, 440, 519],
    [1, 9, 520],
    [">", 521],
    [1, 9, 522],
    ["(", 523],
    [1, 9, 524],
    [1, 223, 525],
    [1, 9, 526],
    [")", -1],
    [1, 9, 528],
    [/^(?![\[\(\-\+])/, 529,
     0, -1],
    [1, 223, -1],
    [1, 9, 531],
    ["(", 532,
     e[49], 533],
    [1, 9, 534],
    [1, 9, 535],
    [1, 440, 536],
    [1, 223, -1],
    [1, 9, 537],
    [")", -1],
    [1, 223, 539,
     0, -1],
    [1, 9, 540],
    [e[49], 541],
    [1, 9, 542],
    [",", 543,
     0, -1],
    [1, 9, 544],
    [1, 223, 545],
    [1, 9, 546],
    [e[49], 547],
    [1, 9, 542],
    ["::", 553,
     [5, 739], 549],
    [3, "qualifier def", e[21], 550],
    [2, 373, 551, {"name":"TemplateArgs"},
     0, 551],
    [1, 9, 552],
    ["::", 553],
    [1, 9, 554],
    [/^\*?/, -1],
    ["(", 556],
    [1, 9, 557],
    [1, 743, 558],
    [1, 9, 559],
    [")", -1],
    [1, 440, 561,
     0, -1],
    [1, 9, 562],
    [",", 563,
     0, -1],
    [1, 9, 564],
    [1, 440, 565],
    [1, 9, 562],
    [":", 567],
    [1, 9, 568],
    [1, 765, -1],
    [e[21], 570],
    [1, 9, 571],
    ["&&", -1],
    [1, 440, 573],
    [1, 9, 574],
    [2, 593, 575, {"name":"fieldName","token":"property"},
     0, 575],
    [1, 9, 576],
    [":", 577,
     "[", 578,
     0, -1],
    [1, 9, 579],
    [1, 9, 580],
    [3, "number", e[19], -1],
    [1, 223, 581,
     0, 581],
    [1, 9, 582],
    ["]", -1],
    ["{", 584],
    [1, 9, 585],
    [1, 223, 586,
     0, 591],
    [1, 9, 587],
    [",", 588,
     0, 591],
    [1, 9, 589],
    [1, 223, 590,
     0, 590],
    [1, 9, 587],
    [1, 9, 592],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    [3, "variable qualifier", e[21], 595],
    [1, 771, 596,
     0, 596],
    [1, 9, 597],
    ["::", -1],
    [3, "keyword", e[25], 599,
     0, 600,
     0, 601,
     0, -1],
    [1, 9, 602],
    [1, 9, 603],
    [3, "keyword", e[29], 604,
     3, "keyword", e[30], 604,
     [5, 776], 605,
     1, 779, 606],
    [2, 373, 600, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 607,
     3, "keyword", e[17], 607],
    [1, 9, 601],
    [1, 440, 608],
    [1, 9, 609],
    [1, 9, 610],
    [1, 9, 611],
    [e[49], 612],
    [1, 440, 612],
    [2, 555, 606, {"name":"ParamList"},
     1, 361, 606,
     0, 606],
    [1, 9, 613],
    [",", 614,
     0, -1],
    [1, 9, 615],
    [3, "keyword", e[25], 616,
     0, 617,
     0, 618],
    [1, 9, 619],
    [1, 9, 620],
    [3, "keyword", e[29], 621,
     3, "keyword", e[30], 621,
     [5, 785], 622,
     1, 779, 623],
    [2, 373, 617, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 624,
     3, "keyword", e[17], 624],
    [1, 9, 618],
    [1, 440, 625],
    [1, 9, 626],
    [1, 9, 627],
    [1, 9, 628],
    [e[49], 629],
    [1, 440, 629],
    [2, 555, 623, {"name":"ParamList"},
     1, 361, 623,
     0, 623],
    [1, 9, 613],
    [3, "attribute", "{", 631,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 630,
     "\n", 632,
     0, -1],
    [1, 630, 633],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 630],
    [/^(?=\*\/)/, 630,
     3, "attribute", "}", 630],
    ["::", 639,
     [5, 788], 635],
    [3, "meta", e[21], 636],
    [2, 373, 637, {"name":"TemplateArgs"},
     0, 637],
    [1, 9, 638],
    ["::", 639],
    [1, 9, 640],
    [/^\*?/, -1],
    [3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     e[21], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 642,
     "[", 645,
     "{", 648],
    [1, 9, 643],
    [1, 641, 644,
     ")", -1],
    [1, 9, 643],
    [1, 9, 646],
    [1, 641, 647,
     "]", -1],
    [1, 9, 646],
    [1, 9, 649],
    [1, 641, 650,
     "}", -1],
    [1, 9, 649],
    [3, "type qualifier", e[21], 652],
    [1, 771, 653,
     0, 653],
    [1, 9, 654],
    ["::", -1],
    [3, "keyword", e[51], 656,
     2, 180, -1, {"name":"Template"},
     1, 167, -1,
     3, "keyword", e[0], 658,
     1, 203, 662,
     0, 664],
    [1, 9, 657],
    [":", -1],
    [1, 9, 659],
    [2, 228, 660, {"name":"ArgList"}],
    [1, 9, 661],
    [";", -1],
    [1, 9, 663],
    [/^\;?/, -1],
    [3, "keyword", e[29], 665,
     3, "keyword", e[30], 665,
     1, 189, 666,
     1, 152, 667,
     2, 792, -1, {"name":"ObjectMember"}],
    [1, 9, 664],
    [1, 9, 668],
    [1, 9, 669],
    [/^\;?/, -1],
    [/^\;?/, -1],
    [1, 813, 671,
     1, 440, 672,
     0, -1],
    [1, 9, 673],
    [1, 9, 674],
    [",", 675,
     0, -1],
    ["...", 676,
     1, 345, 677],
    [1, 9, 678],
    [1, 9, 674],
    [1, 9, 679],
    [1, 813, 680,
     1, 440, 681],
    [2, 555, 682, {"name":"ParamList"},
     0, 682],
    [1, 9, 673],
    [1, 9, 683],
    [1, 9, 684],
    ["...", 685,
     1, 345, 686],
    [3, "keyword", e[29], 687,
     3, "keyword", e[30], 687,
     3, "keyword", e[31], 687,
     3, "operator", "=", 688,
     0, 671],
    [1, 9, 683],
    [1, 9, 689],
    [1, 9, 684],
    [1, 9, 690],
    [2, 555, 691, {"name":"ParamList"},
     0, 691],
    [1, 779, 671],
    [1, 9, 692],
    [3, "keyword", e[29], 693,
     3, "keyword", e[30], 693,
     3, "keyword", e[31], 693,
     3, "operator", "=", 694,
     0, 680],
    [1, 9, 692],
    [1, 9, 695],
    [1, 779, 680],
    [3, "keyword", e[34], 697,
     3, "def property", e[21], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 698,
     3, "keyword", e[37], 698],
    [e[58], -1],
    [2, 476, -1, {"name":"ParenTokens"},
     2, 824, -1, {"name":"BracketTokens"},
     2, 828, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     0, 700,
     2, 364, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 701,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 702],
    [0, 700,
     2, 372, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[21], 703],
    ["::", 701],
    ["[", 705],
    [1, 9, 706],
    [/^(?!\[)/, 707],
    [1, 832, 708],
    [1, 9, 709],
    ["]", 710],
    [1, 9, 711],
    [2, 254, -1, {"name":"FunctionDef"},
     2, 198, -1, {"name":"Block"}],
    ["{", 713],
    [1, 9, 714],
    [".", 715,
     0, 716,
     0, 732],
    [1, 9, 717],
    [1, 9, 718],
    [2, 593, 719, {"name":"fieldName","token":"property"}],
    [1, 223, 720],
    [1, 9, 721],
    [1, 9, 722],
    [3, "operator", "=", 716],
    [",", 723,
     0, 732],
    [1, 9, 724],
    [".", 725,
     0, 726,
     0, 727],
    [1, 9, 728],
    [1, 9, 729],
    [1, 9, 722],
    [2, 593, 730, {"name":"fieldName","token":"property"}],
    [1, 223, 727],
    [1, 9, 731],
    [3, "operator", "=", 726],
    [1, 9, 733],
    ["}", -1],
    ["(", 735],
    [1, 9, 736],
    [1, 223, 737,
     0, 737],
    [1, 9, 738],
    [")", -1],
    [3, "qualifier def", e[21], 740],
    [1, 771, 741,
     0, 741],
    [1, 9, 742],
    ["::", -1],
    [1, 440, 744,
     0, -1],
    [1, 9, 745],
    [1, 345, 746,
     0, 747],
    [1, 9, 748],
    [1, 9, 749],
    [2, 555, 750, {"name":"ParamList"},
     0, 750],
    [",", 751,
     0, -1],
    [1, 9, 752],
    [1, 9, 753],
    [3, "operator", "=", 754,
     0, 747],
    [1, 440, 755],
    [1, 9, 756],
    [1, 9, 757],
    [1, 223, 747],
    [1, 345, 758,
     0, 759],
    [1, 9, 760],
    [1, 9, 749],
    [2, 555, 761, {"name":"ParamList"},
     0, 761],
    [1, 9, 762],
    [3, "operator", "=", 763,
     0, 759],
    [1, 9, 764],
    [1, 223, 759],
    [1, 842, 766,
     0, -1],
    [1, 9, 767],
    [",", 768,
     0, -1],
    [1, 9, 769],
    [1, 842, 770],
    [1, 9, 767],
    ["<", 772],
    [1, 9, 773],
    [e[59], 774,
     ">", -1],
    [1, 771, 775,
     2, 124, 775, {"name":"string","token":"string"},
     /^[^]/, 775],
    [1, 9, 773],
    [1, 440, 777],
    [1, 9, 778],
    [e[60], -1],
    [1, 497, 780,
     1, 514, 781],
    [1, 9, 779],
    [1, 9, 782],
    [e[59], 783,
     0, -1],
    [1, 322, 784],
    [1, 9, 782],
    [1, 440, 786],
    [1, 9, 787],
    [e[60], -1],
    [3, "meta", e[21], 789],
    [1, 771, 790,
     0, 790],
    [1, 9, 791],
    ["::", -1],
    [3, "keyword", e[29], 793,
     3, "keyword", e[30], 793,
     3, "keyword", e[31], 793,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 801,
     1, 440, 794],
    [1, 9, 792],
    [1, 9, 795],
    [1, 856, 796],
    [1, 9, 797],
    [",", 798,
     0, 801],
    [1, 9, 799],
    [1, 856, 800],
    [1, 9, 797],
    [1, 9, 802],
    [2, 254, -1, {"name":"FunctionDef"},
     1, 361, 803,
     ":", 804,
     "[", 805,
     0, 803,
     1, 203, 806],
    [1, 9, 807],
    [1, 9, 808],
    [1, 9, 809],
    [1, 9, 810],
    [";", -1],
    [3, "number", e[19], 803],
    [1, 223, 811,
     0, 811],
    [/^\;?/, -1],
    [1, 9, 812],
    ["]", 803],
    [3, "keyword", e[25], 814,
     0, 816],
    [1, 9, 815],
    [2, 373, 816, {"name":"TemplateArgs"}],
    [1, 9, 817],
    [3, "keyword", e[20], 818,
     3, "keyword", e[17], 818],
    [1, 9, 819],
    [3, "type def", e[21], 820],
    [1, 9, 821],
    [3, "operator", "=", 822,
     0, -1],
    [1, 9, 823],
    [1, 117, -1,
     3, "number", e[19], -1],
    ["[", 825],
    [1, 9, 826],
    [1, 699, 827,
     "]", -1],
    [1, 9, 826],
    ["{", 829],
    [1, 9, 830],
    [1, 699, 831,
     "}", -1],
    [1, 9, 830],
    [/^\&?/, 833,
     "=", 834,
     3, "keyword", e[52], 834,
     0, -1],
    [1, 9, 835],
    [1, 9, 836],
    [1, 117, 834,
     0, 834],
    [",", 837,
     0, -1],
    [1, 9, 838],
    [/^\&?/, 839,
     "=", 840,
     3, "keyword", e[52], 840],
    [1, 9, 841],
    [1, 9, 836],
    [1, 117, 840,
     0, 840],
    [1, 365, 843,
     2, 593, 844, {"name":"fieldName","token":"property"}],
    [1, 9, 842],
    [1, 9, 845],
    [2, 373, 846, {"name":"TemplateArgs"},
     0, 846],
    [1, 9, 847],
    ["(", 848,
     "{", 849],
    [1, 9, 850],
    [1, 9, 851],
    [1, 868, 852],
    [1, 868, 853],
    [1, 9, 854],
    [1, 9, 855],
    [")", -1],
    ["}", -1],
    [0, 857,
     "(", 864],
    [e[61], 858,
     1, 696, 859],
    [1, 9, 857],
    [1, 9, 860],
    ["[", 861,
     0, -1],
    [1, 9, 862],
    ["]", 863],
    [1, 9, 860],
    [1, 9, 865],
    [1, 856, 866],
    [1, 9, 867],
    [")", -1],
    [1, 223, 869,
     0, -1],
    [1, 9, 870],
    [",", 871,
     0, -1],
    [1, 9, 872],
    [1, 223, 873],
    [1, 9, 870]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var closing = ")" + rawStringOpen.exec(cx.startLine)[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
