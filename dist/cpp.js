(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?:\(\)|\[\])/, /^(?:\[\])?/, /^(?!\>)/, /^(?:\.\.\.|\(|\=|\>|\,)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[26], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "type", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[31], -1,
     3, "atom", e[54], -1,
     3, "meta", e[27], -1,
     1, 117, -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[43], -1,
     3, "operator", e[35], -1,
     2, 130, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[22], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 130, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 130, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 135, -1,
     1, 152, -1,
     3, "keyword", e[0], 13,
     3, "keyword", e[1], 17,
     3, "keyword", e[2], 25,
     3, "keyword", e[3], 29,
     3, "keyword", e[4], 33,
     1, 167, -1,
     2, 182, -1, {"name":"Template"},
     [7, "constructorAhead"], 39,
     1, 191, -1,
     3, "keyword", e[5], 42,
     3, "keyword", e[6], 43,
     3, "keyword", e[7], 44,
     3, "keyword", e[8], 68,
     3, "keyword", e[9], 73,
     2, 200, -1, {"name":"Block"},
     3, "keyword", e[10], 77,
     3, "keyword", e[11], 79,
     3, "keyword", e[12], 83,
     3, "keyword", e[13], 87,
     3, "keyword", e[14], 93,
     3, "keyword", e[15], 94,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 204]], 93,
     1, 205, 97,
     2, 208, 101, {"name":"DeclType"},
     ";", -1,
     1, 225, 115],
    [1, 9, 14],
    [2, 230, 15, {"name":"ArgList"}],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [1, 235, 19,
     0, 19],
    [1, 9, 20],
    [3, "operator", "=", 21,
     2, 240, -1, {"name":"NamespaceBlock"}],
    [1, 9, 22],
    [1, 117, 23],
    [1, 9, 24],
    [";", -1],
    [1, 9, 26],
    [1, 225, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [2, 200, 31, {"name":"Block"}],
    [1, 9, 32],
    [2, 244, -1, {"name":"Catch"}],
    [1, 9, 34],
    ["{", 35],
    [1, 9, 36],
    [2, 124, 37, {"name":"string","token":"string"}],
    [1, 9, 38],
    ["}", -1],
    [1, 235, 40],
    [1, 9, 41],
    [2, 256, -1, {"name":"FunctionDef"}],
    [1, 9, 45],
    [1, 9, 46],
    [1, 9, 47],
    ["(", 48],
    [2, 289, 49, {"name":"CondExpr"}],
    [2, 12, 50, {"name":"Statement"}],
    [1, 9, 51],
    [1, 9, 52],
    [1, 9, 53],
    [2, 12, 54, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 55],
    [1, 9, 56],
    [1, 9, 57],
    [1, 225, 58,
     0, 58],
    [2, 289, 59, {"name":"CondExpr"}],
    [1, 9, 60],
    [1, 9, 61],
    [";", 62],
    [";", -1],
    [1, 9, 63],
    [1, 225, 64,
     0, 64],
    [1, 9, 65],
    [")", 66],
    [1, 9, 67],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 69],
    [2, 289, 70, {"name":"CondExpr"}],
    [1, 9, 71],
    [2, 12, 72, {"name":"Statement"}],
    [2, 310, -1, {"name":"Alternative"}],
    [1, 9, 74],
    [2, 289, 75, {"name":"CondExpr"}],
    [1, 9, 76],
    [2, 200, -1, {"name":"Block"}],
    [1, 9, 78],
    [";", -1],
    [1, 9, 80],
    [e[21], 81],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [1, 225, 85,
     0, 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 235, 89,
     0, 89],
    [1, 9, 90],
    [2, 314, 91, {"name":"BlockOf"},
     0, 91],
    [1, 9, 92],
    [";", -1],
    [1, 9, 95],
    [1, 9, 96],
    [":", -1],
    [1, 225, 93],
    [1, 9, 98],
    [2, 200, -1, {"name":"Block"},
     0, 99],
    [1, 324, 100,
     0, -1],
    [1, 9, 99],
    [1, 9, 102],
    [1, 347, 103],
    [1, 9, 104],
    [1, 205, 105,
     0, 105],
    [1, 9, 106],
    [[5, 359], 107,
     1, 363, 108,
     0, 108],
    [2, 256, -1, {"name":"FunctionDef"}],
    [1, 9, 109],
    [",", 110,
     ";", -1],
    [1, 9, 111],
    [1, 235, 112],
    [1, 9, 113],
    [1, 363, 114,
     0, 114],
    [1, 9, 109],
    [1, 9, 116],
    [";", -1],
    [0, 118,
     3, "type", e[16], -1,
     2, 366, 123, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 367, 119],
    [0, 118,
     3, "type qualified", e[16], 120,
     2, 374, 120, {"name":"qualifiedVariableName","token":"qualified"}],
    [2, 375, 121, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 122,
     0, -1],
    [1, 117, -1],
    [2, 375, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 125,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 126],
    [[0, [7, "rawStringContinues"], /^[^]/], 125,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 127],
    ["\\", 128,
     [0, /^(?!\")/, /^[^]/], 127,
     "\"", -1],
    [/^[^]/, 127],
    [3, "keyword", e[17], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 131,
     "/*", 134,
     /^\/\/.*/, -1],
    [e[48], 132,
     0, 133],
    [0, 131,
     0, 131],
    [2, 380, 133, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 134,
     "*/", -1],
    [3, "keyword", e[18], 137,
     [0, [5, 391], "["], 138],
    [0, 135,
     0, -1],
    [1, 9, 139],
    [1, 9, 140],
    ["(", 141],
    ["[", 142],
    [1, 9, 143],
    [1, 9, 144],
    [3, "number", e[19], 145],
    [1, 395, 146],
    [1, 9, 147],
    [1, 9, 148],
    [")", 149],
    ["]", 150],
    [1, 9, 136],
    [1, 9, 151],
    ["]", 149],
    [3, "keyword", e[20], 153,
     3, "keyword", e[13], 153],
    [1, 9, 154],
    [1, 135, 155,
     0, 155],
    [1, 9, 156],
    [0, 157,
     3, "type def", e[21], 160],
    [1, 417, 158],
    [1, 9, 159],
    [0, 157,
     3, "type qualified", e[21], 160],
    [1, 9, 161],
    [3, "keyword", e[22], 162,
     ":", 163,
     0, 165],
    [1, 9, 161],
    [1, 9, 164],
    [1, 424, 165],
    [1, 9, 166],
    [";", -1,
     2, 438, -1, {"name":"ClassBody"}],
    [3, "keyword", e[23], 168],
    [1, 9, 169],
    [3, "keyword", e[17], 170,
     3, "keyword", e[1], 171,
     0, 171],
    [1, 9, 172],
    [1, 9, 173],
    [1, 442, 174],
    [1, 117, 174],
    [1, 9, 175],
    [3, "operator", "=", 176,
     0, 180],
    [1, 9, 177],
    [1, 442, 178],
    [1, 9, 179],
    [1, 347, 180,
     0, 180],
    [1, 9, 181],
    [";", -1],
    [3, "keyword", e[24], 183,
     0, 183],
    [1, 9, 184],
    [3, "keyword", e[25], 185],
    [1, 9, 186],
    [2, 455, 187, {"name":"TemplateParams"},
     0, 187],
    [1, 9, 188],
    [1, 9, 189],
    [1, 9, 190],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[26], 192],
    [1, 9, 193],
    [3, "keyword", e[20], 194,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 194,
     0, 194],
    [1, 9, 195],
    [1, 135, 196,
     0, 196],
    [1, 9, 197],
    [3, "type def", e[21], 198,
     0, 198],
    [1, 9, 199],
    [2, 460, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 201],
    [1, 9, 202],
    [2, 12, 203, {"name":"Statement"},
     "}", -1],
    [1, 9, 202],
    [e[45], 204,
     /^\:(?!\:)/, -1],
    [3, "meta", e[27], 206],
    [1, 9, 207],
    [2, 478, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 209,
     0, 210,
     3, "keyword", e[28], 221,
     [5, 482], 222],
    [3, "keyword", e[29], 211,
     3, "keyword", e[30], 211,
     3, "keyword", e[31], 211],
    [3, "type", e[32], 212],
    [1, 9, 213],
    [1, 9, 214],
    [0, 209,
     3, "keyword", e[28], 215,
     0, 216,
     1, 487, 215],
    [0, 210,
     3, "type", e[33], 215,
     0, 215],
    [1, 9, 217],
    [3, "type", e[32], 218],
    [1, 492, 219,
     0, -1],
    [0, 216,
     1, 9, 220,
     0, 215],
    [1, 9, 217],
    [3, "type", e[33], 215],
    [1, 9, 223],
    [1, 487, 221],
    [1, 492, 224,
     0, -1],
    [1, 9, 223],
    [1, 499, 226,
     1, 516, 227],
    [1, 9, 225],
    [1, 9, 228],
    [1, 324, 229,
     0, -1],
    [1, 9, 228],
    ["(", 231],
    [1, 9, 232],
    [1, 540, 233],
    [1, 9, 234],
    [")", -1],
    [3, "keyword", e[34], 236,
     0, 238,
     3, "def", e[38], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 237,
     3, "keyword", e[37], 237],
    [e[58], -1],
    [1, 550, 239],
    [0, 238,
     3, "qualified def", e[38], -1],
    ["{", 241],
    [1, 9, 242],
    [2, 12, 243, {"name":"Statement"},
     "}", -1],
    [1, 9, 242],
    [3, "keyword", e[39], 245,
     0, -1],
    [1, 9, 246],
    ["(", 247],
    [1, 9, 248],
    [1, 442, 249],
    [1, 9, 250],
    [1, 347, 251,
     0, 251],
    [1, 9, 252],
    [")", 253],
    [1, 9, 254],
    [2, 200, 255, {"name":"Block"}],
    [1, 9, 244],
    [2, 557, 257, {"name":"ParamList"}],
    [1, 9, 258],
    [3, "keyword", e[31], 259,
     /^(?:\&\&|\&)?/, 260],
    [1, 9, 258],
    [1, 9, 261],
    [3, "keyword", e[40], 262,
     3, "keyword", e[2], 263,
     0, 274],
    [1, 9, 264],
    [1, 9, 265],
    ["(", 266,
     0, 274],
    ["(", 267],
    [1, 9, 268],
    [1, 9, 269],
    [1, 225, 270],
    [1, 562, 271],
    [1, 9, 272],
    [1, 9, 273],
    [")", 274],
    [")", 274],
    [1, 9, 275],
    [1, 135, 276,
     0, 276],
    [1, 9, 277],
    ["->", 278,
     0, 280],
    [1, 9, 279],
    [1, 442, 280],
    [1, 9, 281],
    [3, "keyword", e[41], 282,
     2, 568, 283, {"name":"InitializerList"},
     0, 283],
    [1, 9, 281],
    [1, 9, 284],
    [";", -1,
     2, 200, -1, {"name":"Block"},
     3, "operator", "=", 285],
    [1, 9, 286],
    [3, "keyword", e[14], 287,
     3, "keyword", e[37], 287],
    [1, 9, 288],
    [";", -1],
    ["(", 290],
    [1, 9, 291],
    [[6, 571], 292,
     1, 225, 308,
     0, 308],
    [2, 208, 293, {"name":"DeclType"}],
    [1, 9, 294],
    [1, 347, 295],
    [1, 9, 296],
    [1, 205, 297,
     0, 297],
    [1, 9, 298],
    [1, 363, 299,
     0, 299],
    [1, 9, 300],
    [",", 301,
     ";", 302,
     0, 308],
    [1, 9, 303],
    [1, 9, 304],
    [1, 235, 305],
    [1, 225, 308,
     0, 308],
    [1, 9, 306],
    [1, 363, 307,
     0, 307],
    [1, 9, 300],
    [1, 9, 309],
    [")", -1],
    [1, 9, 311],
    [3, "keyword", e[42], 312,
     0, -1],
    [1, 9, 313],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 315],
    [1, 9, 316],
    [1, 574, 317,
     0, 322],
    [1, 9, 318],
    [";", 319,
     0, 322],
    [1, 9, 320],
    [1, 574, 321,
     0, 321],
    [1, 9, 318],
    [1, 9, 323],
    ["}", -1],
    [2, 585, -1, {"name":"BlockOf"},
     2, 230, 325, {"name":"ArgList"},
     e[44], 327,
     2, 230, -1, {"name":"ArgList"},
     "[", 333,
     3, "operator", e[43], -1,
     e[44], 337,
     3, "operator", e[35], 339,
     "?", 341],
    [1, 9, 326],
    [2, 200, -1, {"name":"Block"},
     0, -1],
    [1, 9, 328],
    [/^\*?/, 329],
    [1, 9, 330],
    [2, 607, 331, {"name":"fieldName","token":"property"}],
    [1, 9, 332],
    [2, 375, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 334],
    [1, 225, 335],
    [1, 9, 336],
    ["]", -1],
    [1, 9, 338],
    [2, 607, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 340],
    [1, 225, -1,
     0, -1],
    [1, 9, 342],
    [1, 225, 343],
    [1, 9, 344],
    [":", 345],
    [1, 9, 346],
    [1, 225, -1],
    [0, 348,
     "(", 355],
    [e[61], 349,
     1, 235, 350],
    [1, 9, 348],
    [1, 9, 351],
    ["[", 352,
     0, -1],
    [1, 9, 353],
    ["]", 354],
    [1, 9, 351],
    [1, 9, 356],
    [1, 347, 357],
    [1, 9, 358],
    [")", -1],
    ["(", 360],
    [1, 9, 361],
    [")", -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[32], -1,
     3, "keyword", e[28], -1,
     [5, 482], 362],
    [1, 487, -1],
    [3, "operator", "=", 364,
     2, 608, -1, {"name":"BlockOf"},
     2, 230, -1, {"name":"ArgList"}],
    [1, 9, 365],
    [1, 225, -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    ["::", 372,
     [5, 618], 368],
    [3, "variable qualifier", e[21], 369],
    [2, 375, 370, {"name":"TemplateArgs"},
     0, 370],
    [1, 9, 371],
    ["::", 372],
    [1, 9, 373],
    [/^\*?/, -1],
    [2, 366, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    ["<", 376],
    [1, 9, 377],
    [1, 622, 378],
    [1, 9, 379],
    [">", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 381,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 382,
     3, "tag", e[47], 389,
     "{", 383],
    [e[45], 381,
     3, "def", e[46], 389,
     "<", 384,
     0, 389],
    [e[45], 382,
     3, "type", e[46], 389,
     0, 389],
    [3, "tag", e[47], 385],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 386],
    [/^[\t ]*/, 387],
    [">", 389],
    [1, 654, 388],
    ["}", 389],
    [e[48], 390,
     0, -1],
    [0, 389,
     0, 389],
    ["[", 392],
    [1, 9, 393],
    [" ", 394,
     "[", -1],
    [1, 9, 393],
    [1, 658, 396,
     3, "meta", e[21], 397,
     0, -1],
    [1, 9, 395],
    [1, 9, 398],
    ["(", 399,
     0, 400],
    [1, 9, 401],
    [1, 9, 402],
    [1, 665, 403,
     ")", 400],
    [e[49], 404],
    [1, 9, 401],
    [1, 9, 405],
    [",", 406,
     0, -1],
    [1, 9, 407],
    [1, 658, 408,
     3, "meta", e[21], 409],
    [1, 9, 407],
    [1, 9, 410],
    ["(", 411,
     0, 412],
    [1, 9, 413],
    [1, 9, 414],
    [1, 665, 415,
     ")", 412],
    [e[49], 416],
    [1, 9, 413],
    [1, 9, 405],
    ["::", 422,
     [5, 675], 418],
    [3, "type qualifier", e[21], 419],
    [2, 375, 420, {"name":"TemplateArgs"},
     0, 420],
    [1, 9, 421],
    ["::", 422],
    [1, 9, 423],
    [/^\*?/, -1],
    [3, "keyword", e[50], 425,
     0, 425,
     0, -1],
    [1, 9, 426],
    [3, "keyword", e[51], 427,
     0, 427],
    [1, 9, 428],
    [1, 442, 429],
    [1, 9, 430],
    [",", 431,
     0, -1],
    [1, 9, 432],
    [3, "keyword", e[50], 433,
     0, 433],
    [1, 9, 434],
    [3, "keyword", e[51], 435,
     0, 435],
    [1, 9, 436],
    [1, 442, 437],
    [1, 9, 430],
    ["{", 439],
    [1, 9, 440],
    [2, 679, 441, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 440],
    [3, "keyword", e[17], 443,
     1, 152, -1,
     0, 445],
    [1, 9, 444],
    [1, 442, -1],
    [3, "keyword", e[29], 446,
     3, "keyword", e[30], 446,
     3, "keyword", e[31], 446,
     3, "keyword", e[13], 447,
     0, 447],
    [1, 9, 445],
    [1, 9, 448],
    [3, "keyword", e[28], 449,
     0, 450,
     1, 487, 449],
    [1, 9, 451],
    [3, "type", e[32], 452],
    [1, 492, 453,
     0, -1],
    [0, 450,
     1, 9, 454,
     0, 449],
    [1, 9, 451],
    [3, "type", e[33], 449],
    ["<", 456],
    [1, 9, 457],
    [1, 694, 458],
    [1, 9, 459],
    [">", -1],
    ["{", 461],
    [1, 9, 462],
    [1, 720, 463,
     0, 476],
    [1, 9, 464],
    [3, "operator", "=", 465,
     0, 466],
    [1, 9, 467],
    [1, 9, 468],
    [1, 225, 466],
    [",", 469,
     0, 476],
    [1, 9, 470],
    [1, 720, 471,
     0, 472],
    [1, 9, 473],
    [1, 9, 468],
    [3, "operator", "=", 474,
     0, 472],
    [1, 9, 475],
    [1, 225, 472],
    [1, 9, 477],
    ["}", -1],
    ["(", 479],
    [1, 9, 480],
    [1, 723, 481,
     ")", -1],
    [1, 9, 480],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 483],
    [1, 487, 484],
    [1, 9, 485],
    [1, 492, 486,
     /^[a-zA-Z¡-￿_]/, -1],
    [1, 9, 485],
    [3, "keyword", e[17], 488,
     0, 489],
    [1, 9, 489],
    [0, 490,
     3, "type", e[21], -1],
    [1, 417, 491],
    [0, 490,
     3, "type qualified", e[21], -1],
    [2, 375, -1, {"name":"TemplateArgs"},
     "::", 493,
     1, 135, -1,
     "[", 495,
     /^[\*\&]/, -1,
     3, "keyword", e[31], -1],
    [1, 9, 494],
    [3, "type qualified", e[21], -1],
    [1, 9, 496],
    [1, 225, 497,
     0, 497],
    [1, 9, 498],
    ["]", -1],
    [3, "keyword", e[37], 500,
     3, "keyword", e[36], 504,
     2, 129, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 501],
    ["[", 502,
     0, -1],
    [1, 9, 503],
    ["]", -1],
    [1, 9, 505],
    ["[", 506,
     0, 507],
    [1, 9, 508],
    [1, 9, 509],
    ["]", 507],
    ["(", 510,
     0, 511],
    [1, 9, 512],
    [1, 9, 513],
    [1, 225, 514],
    [1, 135, -1,
     0, -1],
    [1, 9, 515],
    [")", 511],
    [3, "keyword", e[52], -1,
     2, 728, -1, {"name":"Lambda"},
     3, "keyword", e[53], 517,
     2, 585, -1, {"name":"BlockOf"},
     2, 736, 529, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     2, 608, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 532,
     1, 205, -1,
     1, 117, -1],
    [1, 9, 518],
    ["<", 519],
    [1, 9, 520],
    [1, 442, 521],
    [1, 9, 522],
    [">", 523],
    [1, 9, 524],
    ["(", 525],
    [1, 9, 526],
    [1, 225, 527],
    [1, 9, 528],
    [")", -1],
    [1, 9, 530],
    [/^(?![\[\(\-\+])/, 531,
     0, -1],
    [1, 225, -1],
    [1, 9, 533],
    ["(", 534,
     e[49], 535],
    [1, 9, 536],
    [1, 9, 537],
    [1, 442, 538],
    [1, 225, -1],
    [1, 9, 539],
    [")", -1],
    [1, 225, 541,
     0, -1],
    [1, 9, 542],
    [e[49], 543],
    [1, 9, 544],
    [",", 545,
     0, -1],
    [1, 9, 546],
    [1, 225, 547],
    [1, 9, 548],
    [e[49], 549],
    [1, 9, 544],
    ["::", 555,
     [5, 741], 551],
    [3, "qualifier def", e[21], 552],
    [2, 375, 553, {"name":"TemplateArgs"},
     0, 553],
    [1, 9, 554],
    ["::", 555],
    [1, 9, 556],
    [/^\*?/, -1],
    ["(", 558],
    [1, 9, 559],
    [1, 745, 560],
    [1, 9, 561],
    [")", -1],
    [1, 442, 563,
     0, -1],
    [1, 9, 564],
    [",", 565,
     0, -1],
    [1, 9, 566],
    [1, 442, 567],
    [1, 9, 564],
    [":", 569],
    [1, 9, 570],
    [1, 767, -1],
    [e[21], 572],
    [1, 9, 573],
    ["&&", -1],
    [1, 442, 575],
    [1, 9, 576],
    [2, 607, 577, {"name":"fieldName","token":"property"},
     0, 577],
    [1, 9, 578],
    [":", 579,
     "[", 580,
     0, -1],
    [1, 9, 581],
    [1, 9, 582],
    [3, "number", e[19], -1],
    [1, 225, 583,
     0, 583],
    [1, 9, 584],
    ["]", -1],
    ["{", 586],
    [1, 9, 587],
    [".", 588,
     0, 589,
     0, 605],
    [1, 9, 590],
    [1, 9, 591],
    [2, 607, 592, {"name":"fieldName","token":"property"}],
    [1, 225, 593],
    [1, 9, 594],
    [1, 9, 595],
    [3, "operator", "=", 589],
    [",", 596,
     0, 605],
    [1, 9, 597],
    [".", 598,
     0, 599,
     0, 600],
    [1, 9, 601],
    [1, 9, 602],
    [1, 9, 595],
    [2, 607, 603, {"name":"fieldName","token":"property"}],
    [1, 225, 600],
    [1, 9, 604],
    [3, "operator", "=", 599],
    [1, 9, 606],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[21], -1],
    ["{", 609],
    [1, 9, 610],
    [1, 225, 611,
     0, 616],
    [1, 9, 612],
    [",", 613,
     0, 616],
    [1, 9, 614],
    [1, 225, 615,
     0, 615],
    [1, 9, 612],
    [1, 9, 617],
    ["}", -1],
    [3, "variable qualifier", e[21], 619],
    [1, 773, 620,
     0, 620],
    [1, 9, 621],
    ["::", -1],
    [3, "keyword", e[25], 623,
     0, 624,
     0, 625,
     0, -1],
    [1, 9, 626],
    [1, 9, 627],
    [3, "keyword", e[29], 628,
     3, "keyword", e[30], 628,
     [5, 778], 629,
     1, 781, 630],
    [2, 375, 624, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 631,
     3, "keyword", e[17], 631],
    [1, 9, 625],
    [1, 442, 632],
    [1, 9, 633],
    [1, 9, 634],
    [1, 9, 635],
    [e[49], 636],
    [1, 442, 636],
    [2, 557, 630, {"name":"ParamList"},
     1, 363, 630,
     0, 630],
    [1, 9, 637],
    [",", 638,
     0, -1],
    [1, 9, 639],
    [3, "keyword", e[25], 640,
     0, 641,
     0, 642],
    [1, 9, 643],
    [1, 9, 644],
    [3, "keyword", e[29], 645,
     3, "keyword", e[30], 645,
     [5, 787], 646,
     1, 781, 647],
    [2, 375, 641, {"name":"TemplateArgs"}],
    [3, "keyword", e[20], 648,
     3, "keyword", e[17], 648],
    [1, 9, 642],
    [1, 442, 649],
    [1, 9, 650],
    [1, 9, 651],
    [1, 9, 652],
    [e[49], 653],
    [1, 442, 653],
    [2, 557, 647, {"name":"ParamList"},
     1, 363, 647,
     0, 647],
    [1, 9, 637],
    [3, "attribute", "{", 655,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 654,
     "\n", 656,
     0, -1],
    [1, 654, 657],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 654],
    [/^(?=\*\/)/, 654,
     3, "attribute", "}", 654],
    ["::", 663,
     [5, 790], 659],
    [3, "meta", e[21], 660],
    [2, 375, 661, {"name":"TemplateArgs"},
     0, 661],
    [1, 9, 662],
    ["::", 663],
    [1, 9, 664],
    [/^\*?/, -1],
    [3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     e[21], -1,
     3, "operator", e[35], -1,
     ",", -1,
     "(", 666,
     "[", 669,
     "{", 672],
    [1, 9, 667],
    [1, 665, 668,
     ")", -1],
    [1, 9, 667],
    [1, 9, 670],
    [1, 665, 671,
     "]", -1],
    [1, 9, 670],
    [1, 9, 673],
    [1, 665, 674,
     "}", -1],
    [1, 9, 673],
    [3, "type qualifier", e[21], 676],
    [1, 773, 677,
     0, 677],
    [1, 9, 678],
    ["::", -1],
    [3, "keyword", e[51], 680,
     2, 182, -1, {"name":"Template"},
     1, 167, -1,
     3, "keyword", e[0], 682,
     1, 205, 686,
     0, 688],
    [1, 9, 681],
    [":", -1],
    [1, 9, 683],
    [2, 230, 684, {"name":"ArgList"}],
    [1, 9, 685],
    [";", -1],
    [1, 9, 687],
    [/^\;?/, -1],
    [3, "keyword", e[29], 689,
     3, "keyword", e[30], 689,
     1, 191, 690,
     1, 152, 691,
     2, 794, -1, {"name":"ObjectMember"}],
    [1, 9, 688],
    [1, 9, 692],
    [1, 9, 693],
    [/^\;?/, -1],
    [/^\;?/, -1],
    [1, 815, 695,
     1, 442, 696,
     0, -1],
    [1, 9, 697],
    [1, 9, 698],
    [",", 699,
     0, -1],
    ["...", 700,
     1, 347, 701],
    [1, 9, 702],
    [1, 9, 698],
    [1, 9, 703],
    [1, 815, 704,
     1, 442, 705],
    [2, 557, 706, {"name":"ParamList"},
     0, 706],
    [1, 9, 697],
    [1, 9, 707],
    [1, 9, 708],
    ["...", 709,
     1, 347, 710],
    [3, "keyword", e[29], 711,
     3, "keyword", e[30], 711,
     3, "keyword", e[31], 711,
     3, "operator", "=", 712,
     0, 695],
    [1, 9, 707],
    [1, 9, 713],
    [1, 9, 708],
    [1, 9, 714],
    [2, 557, 715, {"name":"ParamList"},
     0, 715],
    [1, 781, 695],
    [1, 9, 716],
    [3, "keyword", e[29], 717,
     3, "keyword", e[30], 717,
     3, "keyword", e[31], 717,
     3, "operator", "=", 718,
     0, 704],
    [1, 9, 716],
    [1, 9, 719],
    [1, 781, 704],
    [3, "keyword", e[34], 721,
     3, "def property", e[21], -1],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     e[57], -1,
     3, "keyword", e[36], 722,
     3, "keyword", e[37], 722],
    [e[58], -1],
    [2, 478, -1, {"name":"ParenTokens"},
     2, 826, -1, {"name":"BracketTokens"},
     2, 830, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[19], -1,
     2, 124, -1, {"name":"string","token":"string"},
     3, "operator", e[35], -1,
     2, 129, -1, {"name":"prefixOp","token":"operator"},
     0, 724,
     2, 366, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 725,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 726],
    [0, 724,
     2, 374, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[21], 727],
    ["::", 725],
    ["[", 729],
    [1, 9, 730],
    [/^(?!\[)/, 731],
    [1, 834, 732],
    [1, 9, 733],
    ["]", 734],
    [1, 9, 735],
    [2, 256, -1, {"name":"FunctionDef"},
     2, 200, -1, {"name":"Block"}],
    ["(", 737],
    [1, 9, 738],
    [1, 225, 739,
     0, 739],
    [1, 9, 740],
    [")", -1],
    [3, "qualifier def", e[21], 742],
    [1, 773, 743,
     0, 743],
    [1, 9, 744],
    ["::", -1],
    [1, 442, 746,
     0, -1],
    [1, 9, 747],
    [1, 347, 748,
     0, 749],
    [1, 9, 750],
    [1, 9, 751],
    [2, 557, 752, {"name":"ParamList"},
     0, 752],
    [",", 753,
     0, -1],
    [1, 9, 754],
    [1, 9, 755],
    [3, "operator", "=", 756,
     0, 749],
    [1, 442, 757],
    [1, 9, 758],
    [1, 9, 759],
    [1, 225, 749],
    [1, 347, 760,
     0, 761],
    [1, 9, 762],
    [1, 9, 751],
    [2, 557, 763, {"name":"ParamList"},
     0, 763],
    [1, 9, 764],
    [3, "operator", "=", 765,
     0, 761],
    [1, 9, 766],
    [1, 225, 761],
    [1, 844, 768,
     0, -1],
    [1, 9, 769],
    [",", 770,
     0, -1],
    [1, 9, 771],
    [1, 844, 772],
    [1, 9, 769],
    ["<", 774],
    [1, 9, 775],
    [e[59], 776,
     ">", -1],
    [1, 773, 777,
     2, 124, 777, {"name":"string","token":"string"},
     /^[^]/, 777],
    [1, 9, 775],
    [1, 442, 779],
    [1, 9, 780],
    [e[60], -1],
    [1, 499, 782,
     1, 516, 783],
    [1, 9, 781],
    [1, 9, 784],
    [e[59], 785,
     0, -1],
    [1, 324, 786],
    [1, 9, 784],
    [1, 442, 788],
    [1, 9, 789],
    [e[60], -1],
    [3, "meta", e[21], 791],
    [1, 773, 792,
     0, 792],
    [1, 9, 793],
    ["::", -1],
    [3, "keyword", e[29], 795,
     3, "keyword", e[30], 795,
     3, "keyword", e[31], 795,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 803,
     1, 442, 796],
    [1, 9, 794],
    [1, 9, 797],
    [1, 858, 798],
    [1, 9, 799],
    [",", 800,
     0, 803],
    [1, 9, 801],
    [1, 858, 802],
    [1, 9, 799],
    [1, 9, 804],
    [2, 256, -1, {"name":"FunctionDef"},
     1, 363, 805,
     ":", 806,
     "[", 807,
     0, 805,
     1, 205, 808],
    [1, 9, 809],
    [1, 9, 810],
    [1, 9, 811],
    [1, 9, 812],
    [";", -1],
    [3, "number", e[19], 805],
    [1, 225, 813,
     0, 813],
    [/^\;?/, -1],
    [1, 9, 814],
    ["]", 805],
    [3, "keyword", e[25], 816,
     0, 818],
    [1, 9, 817],
    [2, 375, 818, {"name":"TemplateArgs"}],
    [1, 9, 819],
    [3, "keyword", e[20], 820,
     3, "keyword", e[17], 820],
    [1, 9, 821],
    [3, "type def", e[21], 822],
    [1, 9, 823],
    [3, "operator", "=", 824,
     0, -1],
    [1, 9, 825],
    [1, 117, -1,
     3, "number", e[19], -1],
    ["[", 827],
    [1, 9, 828],
    [1, 723, 829,
     "]", -1],
    [1, 9, 828],
    ["{", 831],
    [1, 9, 832],
    [1, 723, 833,
     "}", -1],
    [1, 9, 832],
    [/^\&?/, 835,
     "=", 836,
     3, "keyword", e[52], 836,
     0, -1],
    [1, 9, 837],
    [1, 9, 838],
    [1, 117, 836,
     0, 836],
    [",", 839,
     0, -1],
    [1, 9, 840],
    [/^\&?/, 841,
     "=", 842,
     3, "keyword", e[52], 842],
    [1, 9, 843],
    [1, 9, 838],
    [1, 117, 842,
     0, 842],
    [1, 367, 845,
     2, 607, 846, {"name":"fieldName","token":"property"}],
    [1, 9, 844],
    [1, 9, 847],
    [2, 375, 848, {"name":"TemplateArgs"},
     0, 848],
    [1, 9, 849],
    ["(", 850,
     "{", 851],
    [1, 9, 852],
    [1, 9, 853],
    [1, 870, 854],
    [1, 870, 855],
    [1, 9, 856],
    [1, 9, 857],
    [")", -1],
    ["}", -1],
    [0, 859,
     "(", 866],
    [e[61], 860,
     1, 720, 861],
    [1, 9, 859],
    [1, 9, 862],
    ["[", 863,
     0, -1],
    [1, 9, 864],
    ["]", 865],
    [1, 9, 862],
    [1, 9, 867],
    [1, 858, 868],
    [1, 9, 869],
    [")", -1],
    [1, 225, 871,
     0, -1],
    [1, 9, 872],
    [",", 873,
     0, -1],
    [1, 9, 874],
    [1, 225, 875],
    [1, 9, 872]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos) {
    var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
    return match && match[1] == match[2]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var open = rawStringOpen.exec(cx.startLine);
    if (!open) { return false }
    var closing = ")" + open[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
