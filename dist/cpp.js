(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile|restrict)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[27], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[55], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[33], -1,
     3, "type", e[34], -1,
     3, "keyword", e[32], -1,
     3, "atom", e[54], -1,
     3, "meta", e[28], -1,
     1, 123, -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[41], -1,
     3, "operator", e[43], -1,
     2, 137, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[50], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[23], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 137, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 137, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 142, -1,
     1, 159, 13,
     3, "keyword", e[0], 17,
     3, "keyword", e[1], 21,
     3, "keyword", e[2], 29,
     3, "keyword", e[3], 33,
     3, "keyword", e[4], 37,
     1, 174, -1,
     2, 189, -1, {"name":"Template"},
     [7, "constructorAhead"], 43,
     1, 198, -1,
     3, "keyword", e[5], 46,
     3, "keyword", e[6], 47,
     3, "keyword", e[7], 48,
     3, "keyword", e[8], 72,
     3, "keyword", e[9], 77,
     2, 211, -1, {"name":"Block"},
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 83,
     3, "keyword", e[12], 87,
     3, "keyword", e[13], 91,
     3, "keyword", e[14], 99,
     3, "keyword", e[15], 100,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 215]], 99,
     1, 216, 103,
     2, 219, 107, {"name":"DeclType"},
     ";", -1,
     1, 243, 121],
    [1, 9, 14],
    [1, 249, 15,
     0, 15],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [2, 253, 19, {"name":"ArgList"}],
    [1, 9, 20],
    [";", -1],
    [1, 9, 22],
    [1, 249, 23,
     0, 23],
    [1, 9, 24],
    [3, "operator", "=", 25,
     2, 258, -1, {"name":"NamespaceBlock"}],
    [1, 9, 26],
    [1, 123, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [1, 262, 31],
    [1, 9, 32],
    [";", -1],
    [1, 9, 34],
    [2, 211, 35, {"name":"Block"}],
    [1, 9, 36],
    [2, 267, -1, {"name":"Catch"}],
    [1, 9, 38],
    ["{", 39],
    [1, 9, 40],
    [2, 131, 41, {"name":"string","token":"string"}],
    [1, 9, 42],
    ["}", -1],
    [1, 249, 44],
    [1, 9, 45],
    [2, 279, -1, {"name":"FunctionDef"}],
    [1, 9, 49],
    [1, 9, 50],
    [1, 9, 51],
    ["(", 52],
    [2, 312, 53, {"name":"CondExpr"}],
    [2, 12, 54, {"name":"Statement"}],
    [1, 9, 55],
    [1, 9, 56],
    [1, 9, 57],
    [2, 12, 58, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 59],
    [1, 9, 60],
    [1, 9, 61],
    [1, 243, 62,
     0, 62],
    [2, 312, 63, {"name":"CondExpr"}],
    [1, 9, 64],
    [1, 9, 65],
    [";", 66],
    [";", -1],
    [1, 9, 67],
    [1, 243, 68,
     0, 68],
    [1, 9, 69],
    [")", 70],
    [1, 9, 71],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 73],
    [2, 312, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [2, 12, 76, {"name":"Statement"}],
    [2, 333, -1, {"name":"Alternative"}],
    [1, 9, 78],
    [2, 312, 79, {"name":"CondExpr"}],
    [1, 9, 80],
    [2, 211, -1, {"name":"Block"}],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [e[22], 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 243, 89,
     0, 89],
    [1, 9, 90],
    [";", -1],
    [1, 9, 92],
    [1, 249, 93,
     0, 93],
    [1, 9, 94],
    [2, 337, 95, {"name":"BlockOf"},
     0, 95],
    [1, 9, 96],
    [1, 249, 97,
     0, 97],
    [1, 9, 98],
    [";", -1],
    [1, 9, 101],
    [1, 9, 102],
    [":", -1],
    [1, 262, 99],
    [1, 9, 104],
    [2, 211, -1, {"name":"Block"},
     0, 105],
    [1, 347, 106,
     0, -1],
    [1, 9, 105],
    [1, 9, 108],
    [1, 370, 109],
    [1, 9, 110],
    [1, 216, 111,
     0, 111],
    [1, 9, 112],
    [[5, 389], 113,
     1, 393, 114,
     0, 114],
    [2, 279, -1, {"name":"FunctionDef"}],
    [1, 9, 115],
    [",", 116,
     ";", -1],
    [1, 9, 117],
    [1, 249, 118],
    [1, 9, 119],
    [1, 393, 120,
     0, 120],
    [1, 9, 115],
    [1, 9, 122],
    [";", -1],
    [0, 124,
     3, "type", e[17], -1,
     2, 396, 130, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 397, 125],
    [0, 124,
     3, "keyword", e[16], 126,
     3, "type qualified", e[17], 127,
     2, 404, 127, {"name":"qualifiedVariableName","token":"qualified"}],
    [1, 405, 127],
    [2, 407, 128, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 129,
     0, -1],
    [1, 123, -1],
    [2, 407, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 132,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 133],
    [[0, [7, "rawStringContinues"], /^[^]/], 132,
     "\"", -1],
    [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
     "\"", 134],
    ["\\", 135,
     [0, /^(?!\")/, /^[^]/], 134,
     "\"", -1],
    [/^[^]/, 134],
    [3, "keyword", e[18], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 138,
     "/*", 141,
     /^\/\/.*/, -1],
    [e[48], 139,
     0, 140],
    [0, 138,
     0, 138],
    [2, 412, 140, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 141,
     "*/", -1],
    [3, "keyword", e[19], 144,
     [0, [5, 423], "["], 145],
    [0, 142,
     0, -1],
    [1, 9, 146],
    [1, 9, 147],
    ["(", 148],
    ["[", 149],
    [1, 9, 150],
    [1, 9, 151],
    [3, "number", e[20], 152],
    [1, 427, 153],
    [1, 9, 154],
    [1, 9, 155],
    [")", 156],
    ["]", 157],
    [1, 9, 143],
    [1, 9, 158],
    ["]", 156],
    [3, "keyword", e[21], 160,
     3, "keyword", e[13], 160],
    [1, 9, 161],
    [1, 142, 162,
     0, 162],
    [1, 9, 163],
    [0, 164,
     3, "type def", e[22], 167],
    [1, 449, 165],
    [1, 9, 166],
    [0, 164,
     3, "type qualified", e[22], 167],
    [1, 9, 168],
    [3, "keyword", e[23], 169,
     ":", 170,
     0, 172],
    [1, 9, 168],
    [1, 9, 171],
    [1, 456, 172],
    [1, 9, 173],
    [2, 470, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 175],
    [1, 9, 176],
    [3, "keyword", e[18], 177,
     3, "keyword", e[1], 178,
     0, 178],
    [1, 9, 179],
    [1, 9, 180],
    [1, 474, 181],
    [1, 123, 181],
    [1, 9, 182],
    [3, "operator", "=", 183,
     0, 187],
    [1, 9, 184],
    [1, 474, 185],
    [1, 9, 186],
    [1, 370, 187,
     0, 187],
    [1, 9, 188],
    [";", -1],
    [3, "keyword", e[25], 190,
     0, 190],
    [1, 9, 191],
    [3, "keyword", e[26], 192],
    [1, 9, 193],
    [2, 489, 194, {"name":"TemplateParams"},
     0, 194],
    [1, 9, 195],
    [1, 9, 196],
    [1, 9, 197],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[27], 199],
    [1, 9, 200],
    [3, "keyword", e[21], 201,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 201,
     0, 201],
    [1, 9, 202],
    [1, 142, 203,
     0, 203],
    [1, 9, 204],
    [3, "type def", e[22], 205,
     0, 205],
    [1, 9, 206],
    [":", 207,
     0, 209],
    [1, 9, 208],
    [1, 474, 209],
    [1, 9, 210],
    [2, 494, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 212],
    [1, 9, 213],
    [2, 12, 214, {"name":"Statement"},
     "}", -1],
    [1, 9, 213],
    [e[45], 215,
     /^\:(?!\:)/, -1],
    [3, "meta", e[28], 217],
    [1, 9, 218],
    [2, 514, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 220,
     0, 231,
     3, "keyword", e[29], 237,
     [5, 518], 238],
    [3, "keyword", e[30], 221,
     3, "keyword", e[31], 221,
     3, "keyword", e[32], 221],
    [1, 9, 222],
    [0, 220,
     3, "keyword", e[29], 223,
     0, 224,
     1, 531, 225],
    [1, 9, 226],
    [3, "type", e[33], 227],
    [1, 9, 228],
    [/^\&?/, -1],
    [0, 224,
     1, 9, 229,
     0, 225],
    [1, 536, 230,
     0, -1],
    [3, "type", e[34], 225],
    [1, 9, 228],
    [3, "type", e[33], 232],
    [1, 9, 233],
    [0, 231,
     3, "type", e[34], 234,
     0, 234],
    [1, 9, 235],
    [1, 536, 236,
     0, -1],
    [1, 9, 235],
    [1, 9, 239],
    [1, 531, 240],
    [/^\&?/, -1],
    [1, 9, 241],
    [1, 536, 242,
     0, -1],
    [1, 9, 241],
    [1, 262, 244],
    [1, 9, 245],
    [",", 246,
     0, -1],
    [1, 9, 247],
    [1, 262, 248],
    [1, 9, 245],
    [3, "keyword", e[16], 250,
     0, 251,
     3, "def", e[35], -1],
    [1, 405, -1],
    [1, 545, 252],
    [0, 251,
     3, "qualified def", e[35], -1],
    ["(", 254],
    [1, 9, 255],
    [1, 552, 256],
    [1, 9, 257],
    [")", -1],
    ["{", 259],
    [1, 9, 260],
    [2, 12, 261, {"name":"Statement"},
     "}", -1],
    [1, 9, 260],
    [1, 562, 263,
     1, 579, 264],
    [1, 9, 262],
    [1, 9, 265],
    [1, 347, 266,
     0, -1],
    [1, 9, 265],
    [3, "keyword", e[36], 268,
     0, -1],
    [1, 9, 269],
    ["(", 270],
    [1, 9, 271],
    [1, 474, 272],
    [1, 9, 273],
    [1, 370, 274,
     0, 274],
    [1, 9, 275],
    [")", 276],
    [1, 9, 277],
    [2, 211, 278, {"name":"Block"}],
    [1, 9, 267],
    [2, 606, 280, {"name":"ParamList"}],
    [1, 9, 281],
    [3, "keyword", e[32], 282,
     /^(?:\&\&|\&)?/, 283],
    [1, 9, 281],
    [1, 9, 284],
    [3, "keyword", e[37], 285,
     3, "keyword", e[2], 286,
     0, 297],
    [1, 9, 287],
    [1, 9, 288],
    ["(", 289,
     0, 297],
    ["(", 290],
    [1, 9, 291],
    [1, 9, 292],
    [1, 262, 293],
    [1, 611, 294],
    [1, 9, 295],
    [1, 9, 296],
    [")", 297],
    [")", 297],
    [1, 9, 298],
    [1, 142, 299,
     0, 299],
    [1, 9, 300],
    ["->", 301,
     0, 303],
    [1, 9, 302],
    [1, 474, 303],
    [1, 9, 304],
    [3, "keyword", e[38], 305,
     2, 617, 306, {"name":"InitializerList"},
     0, 306],
    [1, 9, 304],
    [1, 9, 307],
    [";", -1,
     2, 211, -1, {"name":"Block"},
     3, "operator", "=", 308],
    [1, 9, 309],
    [3, "keyword", e[14], 310,
     3, "keyword", e[39], 310],
    [1, 9, 311],
    [";", -1],
    ["(", 313],
    [1, 9, 314],
    [[6, 620], 315,
     1, 243, 331,
     0, 331],
    [2, 219, 316, {"name":"DeclType"}],
    [1, 9, 317],
    [1, 370, 318],
    [1, 9, 319],
    [1, 216, 320,
     0, 320],
    [1, 9, 321],
    [1, 393, 322,
     0, 322],
    [1, 9, 323],
    [",", 324,
     ";", 325,
     0, 331],
    [1, 9, 326],
    [1, 9, 327],
    [1, 249, 328],
    [1, 262, 331,
     0, 331],
    [1, 9, 329],
    [1, 393, 330,
     0, 330],
    [1, 9, 323],
    [1, 9, 332],
    [")", -1],
    [1, 9, 334],
    [3, "keyword", e[40], 335,
     0, -1],
    [1, 9, 336],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 338],
    [1, 9, 339],
    [1, 623, 340,
     0, 345],
    [1, 9, 341],
    [";", 342,
     0, 345],
    [1, 9, 343],
    [1, 623, 344,
     0, 344],
    [1, 9, 341],
    [1, 9, 346],
    ["}", -1],
    [2, 634, -1, {"name":"BlockOf"},
     2, 253, 348, {"name":"ArgList"},
     e[42], 350,
     2, 253, -1, {"name":"ArgList"},
     "[", 356,
     3, "operator", e[41], -1,
     e[42], 360,
     3, "operator", e[43], 362,
     "?", 364],
    [1, 9, 349],
    [2, 211, -1, {"name":"Block"},
     0, -1],
    [1, 9, 351],
    [/^\*?/, 352],
    [1, 9, 353],
    [2, 656, 354, {"name":"fieldName","token":"property"}],
    [1, 9, 355],
    [2, 407, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 357],
    [1, 262, 358],
    [1, 9, 359],
    ["]", -1],
    [1, 9, 361],
    [2, 656, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 363],
    [1, 262, -1,
     0, -1],
    [1, 9, 365],
    [1, 262, 366],
    [1, 9, 367],
    [":", 368],
    [1, 9, 369],
    [1, 262, -1],
    [0, 371,
     "(", 385],
    [e[58], 372,
     "[", 373,
     1, 249, 374],
    [1, 9, 371],
    [1, 9, 375],
    [1, 9, 376],
    [1, 249, 377],
    ["[", 378,
     0, -1],
    [1, 9, 379],
    [1, 9, 380],
    [",", 381,
     "]", -1],
    ["]", 382],
    [1, 9, 383],
    [1, 9, 376],
    [1, 249, 384],
    [1, 9, 379],
    [1, 9, 386],
    [1, 370, 387],
    [1, 9, 388],
    [")", -1],
    ["(", 390],
    [1, 9, 391],
    [")", -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[29], -1,
     [5, 518], 392],
    [1, 531, -1],
    [3, "operator", "=", 394,
     2, 657, -1, {"name":"BlockOf"},
     2, 253, -1, {"name":"ArgList"}],
    [1, 9, 395],
    [1, 262, -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    ["::", 402,
     [5, 667], 398],
    [3, "variable qualifier", e[22], 399],
    [2, 407, 400, {"name":"TemplateArgs"},
     0, 400],
    [1, 9, 401],
    ["::", 402],
    [1, 9, 403],
    [/^\*?/, -1],
    [2, 396, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", "==", -1,
     3, "operator", "=", -1,
     3, "operator", e[43], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     /^(?:\(\)|\[\])/, -1,
     3, "keyword", e[44], 406,
     3, "keyword", e[39], 406],
    [/^(?:\[\])?/, -1],
    ["<", 408],
    [1, 9, 409],
    [1, 671, 410],
    [1, 9, 411],
    [">", -1],
    [3, "tag", /^\@f[\$\[\]]/, 421,
     3, "tag", /^\@param(?:\[(?:in|out|in\,out)\])?(?![a-zA-Z0-9¡-￿_])/, 413,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 414,
     3, "tag", e[47], 421,
     "{", 415],
    [e[45], 413,
     3, "def", e[46], 421,
     "<", 416,
     0, 421],
    [e[45], 414,
     3, "type", e[46], 421,
     0, 421],
    [3, "tag", e[47], 417],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 418],
    [/^[\t ]*/, 419],
    [">", 421],
    [1, 711, 420],
    ["}", 421],
    [e[48], 422,
     0, -1],
    [0, 421,
     0, 421],
    ["[", 424],
    [1, 9, 425],
    [" ", 426,
     "[", -1],
    [1, 9, 425],
    [1, 715, 428,
     3, "meta", e[22], 429,
     0, -1],
    [1, 9, 427],
    [1, 9, 430],
    ["(", 431,
     0, 432],
    [1, 9, 433],
    [1, 9, 434],
    [1, 722, 435,
     ")", 432],
    [e[49], 436],
    [1, 9, 433],
    [1, 9, 437],
    [",", 438,
     0, -1],
    [1, 9, 439],
    [1, 715, 440,
     3, "meta", e[22], 441],
    [1, 9, 439],
    [1, 9, 442],
    ["(", 443,
     0, 444],
    [1, 9, 445],
    [1, 9, 446],
    [1, 722, 447,
     ")", 444],
    [e[49], 448],
    [1, 9, 445],
    [1, 9, 437],
    ["::", 454,
     [5, 732], 450],
    [3, "type qualifier", e[22], 451],
    [2, 407, 452, {"name":"TemplateArgs"},
     0, 452],
    [1, 9, 453],
    ["::", 454],
    [1, 9, 455],
    [/^\*?/, -1],
    [3, "keyword", e[50], 457,
     0, 457,
     0, -1],
    [1, 9, 458],
    [3, "keyword", e[51], 459,
     0, 459],
    [1, 9, 460],
    [1, 474, 461],
    [1, 9, 462],
    [",", 463,
     0, -1],
    [1, 9, 464],
    [3, "keyword", e[50], 465,
     0, 465],
    [1, 9, 466],
    [3, "keyword", e[51], 467,
     0, 467],
    [1, 9, 468],
    [1, 474, 469],
    [1, 9, 462],
    ["{", 471],
    [1, 9, 472],
    [2, 736, 473, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 472],
    [3, "keyword", e[18], 475,
     1, 159, -1,
     0, 477],
    [1, 9, 476],
    [1, 474, -1],
    [3, "keyword", e[30], 478,
     3, "keyword", e[31], 478,
     3, "keyword", e[32], 478,
     3, "keyword", e[13], 479,
     0, 479],
    [1, 9, 477],
    [1, 9, 480],
    [3, "keyword", e[29], 481,
     0, 482,
     1, 531, 483],
    [1, 9, 484],
    [3, "type", e[33], 485],
    [1, 9, 486],
    [/^\&?/, -1],
    [0, 482,
     1, 9, 487,
     0, 483],
    [1, 536, 488,
     0, -1],
    [3, "type", e[34], 483],
    [1, 9, 486],
    ["<", 490],
    [1, 9, 491],
    [1, 753, 492],
    [1, 9, 493],
    [">", -1],
    ["{", 495],
    [1, 9, 496],
    [3, "keyword", e[16], 497,
     3, "def property", e[22], 498,
     0, 512],
    [1, 405, 498],
    [1, 9, 499],
    [3, "operator", "=", 500,
     0, 501],
    [1, 9, 502],
    [1, 9, 503],
    [1, 262, 501],
    [",", 504,
     0, 512],
    [1, 9, 505],
    [3, "keyword", e[16], 506,
     3, "def property", e[22], 507,
     0, 508],
    [1, 405, 507],
    [1, 9, 509],
    [1, 9, 503],
    [3, "operator", "=", 510,
     0, 508],
    [1, 9, 511],
    [1, 262, 508],
    [1, 9, 513],
    ["}", -1],
    ["(", 515],
    [1, 9, 516],
    [1, 779, 517,
     ")", -1],
    [1, 9, 516],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 519],
    [1, 531, 520],
    [1, 9, 521],
    [1, 536, 522,
     /^(?:[a-z]|[A-Z]|[¡-￿]|_|\.\.\.)/, -1,
     "(", 523],
    [1, 9, 521],
    [1, 9, 524],
    ["*", 525],
    [1, 9, 526],
    [e[22], 527],
    [1, 9, 528],
    [")", 529],
    [1, 9, 530],
    ["(", -1],
    [3, "keyword", e[18], 532,
     0, 533],
    [1, 9, 533],
    [0, 534,
     3, "type", e[22], -1],
    [1, 449, 535],
    [0, 534,
     3, "type qualified", e[22], -1],
    [2, 407, -1, {"name":"TemplateArgs"},
     "::", 537,
     1, 142, -1,
     "[", 541,
     /^[\*\&]/, -1,
     3, "keyword", e[32], -1],
    [1, 9, 538],
    [3, "keyword", e[16], 539,
     3, "type qualified", e[22], -1],
    [1, 9, 540],
    [1, 405, -1],
    [1, 9, 542],
    [1, 262, 543,
     0, 543],
    [1, 9, 544],
    ["]", -1],
    ["::", 550,
     [5, 784], 546],
    [3, "qualifier def", e[22], 547],
    [2, 407, 548, {"name":"TemplateArgs"},
     0, 548],
    [1, 9, 549],
    ["::", 550],
    [1, 9, 551],
    [/^\*?/, -1],
    [1, 262, 553,
     0, -1],
    [1, 9, 554],
    [e[49], 555],
    [1, 9, 556],
    [",", 557,
     0, -1],
    [1, 9, 558],
    [1, 262, 559],
    [1, 9, 560],
    [e[49], 561],
    [1, 9, 556],
    [3, "keyword", e[39], 563,
     3, "keyword", e[44], 567,
     2, 136, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 564],
    ["[", 565,
     0, -1],
    [1, 9, 566],
    ["]", -1],
    [1, 9, 568],
    ["[", 569,
     0, 570],
    [1, 9, 571],
    [1, 9, 572],
    ["]", 570],
    ["(", 573,
     0, 574],
    [1, 9, 575],
    [1, 9, 576],
    [1, 262, 577],
    [1, 142, -1,
     0, -1],
    [1, 9, 578],
    [")", 574],
    [3, "keyword", e[52], -1,
     2, 788, -1, {"name":"Lambda"},
     3, "keyword", e[53], 580,
     2, 634, -1, {"name":"BlockOf"},
     2, 796, 592, {"name":"ParenExpr"},
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 131, 595, {"name":"string","token":"string"},
     2, 657, -1, {"name":"BlockOf"},
     3, "keyword", e[55], 598,
     1, 216, -1,
     1, 123, -1],
    [1, 9, 581],
    ["<", 582],
    [1, 9, 583],
    [1, 474, 584],
    [1, 9, 585],
    [">", 586],
    [1, 9, 587],
    ["(", 588],
    [1, 9, 589],
    [1, 262, 590],
    [1, 9, 591],
    [")", -1],
    [1, 9, 593],
    [/^(?![\[\(\-\+])/, 594,
     0, -1],
    [1, 262, -1],
    [1, 9, 596],
    [2, 131, 597, {"name":"string","token":"string"},
     0, -1],
    [1, 9, 596],
    [1, 9, 599],
    ["(", 600,
     e[49], 601],
    [1, 9, 602],
    [1, 9, 603],
    [1, 474, 604],
    [1, 262, -1],
    [1, 9, 605],
    [")", -1],
    ["(", 607],
    [1, 9, 608],
    [1, 801, 609],
    [1, 9, 610],
    [")", -1],
    [1, 474, 612,
     0, -1],
    [1, 9, 613],
    [",", 614,
     0, -1],
    [1, 9, 615],
    [1, 474, 616],
    [1, 9, 613],
    [":", 618],
    [1, 9, 619],
    [1, 827, -1],
    [e[22], 621],
    [1, 9, 622],
    ["&&", -1],
    [1, 474, 624],
    [1, 9, 625],
    [2, 656, 626, {"name":"fieldName","token":"property"},
     0, 626],
    [1, 9, 627],
    [":", 628,
     "[", 629,
     0, -1],
    [1, 9, 630],
    [1, 9, 631],
    [3, "number", e[20], -1],
    [1, 262, 632,
     0, 632],
    [1, 9, 633],
    ["]", -1],
    ["{", 635],
    [1, 9, 636],
    [".", 637,
     0, 638,
     0, 654],
    [1, 9, 639],
    [1, 9, 640],
    [2, 656, 641, {"name":"fieldName","token":"property"}],
    [1, 262, 642],
    [1, 9, 643],
    [1, 9, 644],
    [3, "operator", "=", 638],
    [",", 645,
     0, 654],
    [1, 9, 646],
    [".", 647,
     0, 648,
     0, 649],
    [1, 9, 650],
    [1, 9, 651],
    [1, 9, 644],
    [2, 656, 652, {"name":"fieldName","token":"property"}],
    [1, 262, 649],
    [1, 9, 653],
    [3, "operator", "=", 648],
    [1, 9, 655],
    ["}", -1],
    [3, "callee", e[56], -1,
     e[22], -1],
    ["{", 658],
    [1, 9, 659],
    [1, 262, 660,
     0, 665],
    [1, 9, 661],
    [",", 662,
     0, 665],
    [1, 9, 663],
    [1, 262, 664,
     0, 664],
    [1, 9, 661],
    [1, 9, 666],
    ["}", -1],
    [3, "variable qualifier", e[22], 668],
    [1, 833, 669,
     0, 669],
    [1, 9, 670],
    ["::", -1],
    [3, "keyword", e[26], 672,
     0, 673,
     0, 674,
     0, -1],
    [1, 9, 675],
    [1, 9, 676],
    [3, "keyword", e[30], 677,
     3, "keyword", e[31], 677,
     [5, 838], 678,
     1, 474, 679],
    [2, 407, 673, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 680,
     3, "keyword", e[18], 680],
    [1, 9, 674],
    [1, 839, 681],
    [1, 9, 682],
    [1, 9, 683],
    [1, 9, 684],
    [2, 606, 681, {"name":"ParamList"},
     1, 393, 681,
     0, 685,
     0, 681],
    [1, 474, 686],
    [e[49], 686],
    [e[57], 687],
    [1, 9, 688],
    [1, 347, 689],
    [",", 690,
     0, -1],
    [1, 9, 691],
    [1, 9, 692],
    [0, 685,
     0, 681],
    [3, "keyword", e[26], 693,
     0, 694,
     0, 695],
    [1, 9, 696],
    [1, 9, 697],
    [3, "keyword", e[30], 698,
     3, "keyword", e[31], 698,
     [5, 845], 699,
     1, 474, 700],
    [2, 407, 694, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 701,
     3, "keyword", e[18], 701],
    [1, 9, 695],
    [1, 839, 702],
    [1, 9, 703],
    [1, 9, 704],
    [1, 9, 705],
    [2, 606, 702, {"name":"ParamList"},
     1, 393, 702,
     0, 706,
     0, 702],
    [1, 474, 707],
    [e[49], 707],
    [e[57], 708],
    [1, 9, 688],
    [1, 347, 709],
    [1, 9, 710],
    [0, 706,
     0, 702],
    [3, "attribute", "{", 712,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 711,
     "\n", 713,
     0, -1],
    [1, 711, 714],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 711],
    [/^(?=\*\/)/, 711,
     3, "attribute", "}", 711],
    ["::", 720,
     [5, 846], 716],
    [3, "meta", e[22], 717],
    [2, 407, 718, {"name":"TemplateArgs"},
     0, 718],
    [1, 9, 719],
    ["::", 720],
    [1, 9, 721],
    [/^\*?/, -1],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     e[22], -1,
     3, "operator", e[43], -1,
     ",", -1,
     "(", 723,
     "[", 726,
     "{", 729],
    [1, 9, 724],
    [1, 722, 725,
     ")", -1],
    [1, 9, 724],
    [1, 9, 727],
    [1, 722, 728,
     "]", -1],
    [1, 9, 727],
    [1, 9, 730],
    [1, 722, 731,
     "}", -1],
    [1, 9, 730],
    [3, "type qualifier", e[22], 733],
    [1, 833, 734,
     0, 734],
    [1, 9, 735],
    ["::", -1],
    [3, "keyword", e[51], 737,
     2, 189, -1, {"name":"Template"},
     1, 174, -1,
     3, "keyword", e[0], 739,
     1, 216, 743,
     0, 745],
    [1, 9, 738],
    [":", -1],
    [1, 9, 740],
    [2, 253, 741, {"name":"ArgList"}],
    [1, 9, 742],
    [";", -1],
    [1, 9, 744],
    [/^\;?/, -1],
    [3, "keyword", e[30], 746,
     3, "keyword", e[31], 746,
     1, 198, 747,
     1, 159, 748,
     2, 850, -1, {"name":"ObjectMember"}],
    [1, 9, 745],
    [1, 9, 749],
    [1, 9, 750],
    [/^\;?/, -1],
    [1, 249, 751,
     0, 751],
    [1, 9, 752],
    [/^\;?/, -1],
    [1, 871, 754,
     1, 474, 755,
     0, -1],
    [1, 9, 756],
    [1, 9, 757],
    [",", 758,
     0, -1],
    ["...", 759,
     1, 370, 760],
    [1, 9, 761],
    [1, 9, 757],
    [1, 9, 762],
    [1, 871, 763,
     1, 474, 764],
    [2, 606, 765, {"name":"ParamList"},
     0, 765],
    [1, 9, 756],
    [1, 9, 766],
    [1, 9, 767],
    ["...", 768,
     1, 370, 769],
    [3, "keyword", e[30], 770,
     3, "keyword", e[31], 770,
     3, "keyword", e[32], 770,
     3, "operator", "=", 771,
     0, 754],
    [1, 9, 766],
    [1, 9, 772],
    [1, 9, 767],
    [1, 9, 773],
    [2, 606, 774, {"name":"ParamList"},
     0, 774],
    [1, 839, 754],
    [1, 9, 775],
    [3, "keyword", e[30], 776,
     3, "keyword", e[31], 776,
     3, "keyword", e[32], 776,
     3, "operator", "=", 777,
     0, 763],
    [1, 9, 775],
    [1, 9, 778],
    [1, 839, 763],
    [2, 514, -1, {"name":"ParenTokens"},
     2, 884, -1, {"name":"BracketTokens"},
     2, 888, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[54], -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     3, "operator", e[43], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     0, 780,
     2, 396, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 781,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 782],
    [0, 780,
     2, 404, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[22], 783],
    ["::", 781],
    [3, "qualifier def", e[22], 785],
    [1, 833, 786,
     0, 786],
    [1, 9, 787],
    ["::", -1],
    ["[", 789],
    [1, 9, 790],
    [/^(?!\[)/, 791],
    [1, 892, 792],
    [1, 9, 793],
    ["]", 794],
    [1, 9, 795],
    [2, 279, -1, {"name":"FunctionDef"},
     2, 211, -1, {"name":"Block"}],
    ["(", 797],
    [1, 9, 798],
    [1, 243, 799,
     0, 799],
    [1, 9, 800],
    [")", -1],
    [1, 474, 802,
     "...", 803,
     0, -1],
    [1, 9, 804],
    [1, 9, 805],
    [1, 370, 806,
     0, 807],
    [",", 808,
     0, -1],
    [1, 9, 809],
    [1, 9, 810],
    [1, 9, 811],
    [2, 606, 812, {"name":"ParamList"},
     0, 812],
    [e[49], 803],
    [1, 474, 813,
     "...", 814],
    [1, 9, 815],
    [1, 9, 816],
    [1, 9, 805],
    [3, "operator", "=", 817,
     0, 807],
    [1, 370, 818,
     0, 819],
    [1, 9, 820],
    [1, 9, 821],
    [1, 9, 822],
    [1, 262, 807],
    [2, 606, 823, {"name":"ParamList"},
     0, 823],
    [e[49], 814],
    [1, 9, 824],
    [3, "operator", "=", 825,
     0, 819],
    [1, 9, 826],
    [1, 262, 819],
    [1, 902, 828,
     0, -1],
    [1, 9, 829],
    [",", 830,
     0, -1],
    [1, 9, 831],
    [1, 902, 832],
    [1, 9, 829],
    ["<", 834],
    [1, 9, 835],
    [e[57], 836,
     ">", -1],
    [1, 833, 837,
     2, 131, 837, {"name":"string","token":"string"},
     /^[^]/, 837],
    [1, 9, 835],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [1, 562, 840,
     1, 579, 841],
    [1, 9, 839],
    [1, 9, 842],
    [e[57], 843,
     0, -1],
    [1, 347, 844],
    [1, 9, 842],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [3, "meta", e[22], 847],
    [1, 833, 848,
     0, 848],
    [1, 9, 849],
    ["::", -1],
    [3, "keyword", e[30], 851,
     3, "keyword", e[31], 851,
     3, "keyword", e[32], 851,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 859,
     1, 474, 852],
    [1, 9, 850],
    [1, 9, 853],
    [1, 916, 854],
    [1, 9, 855],
    [",", 856,
     0, 859],
    [1, 9, 857],
    [1, 916, 858],
    [1, 9, 855],
    [1, 9, 860],
    [2, 279, -1, {"name":"FunctionDef"},
     1, 393, 861,
     ":", 862,
     "[", 863,
     0, 861,
     1, 216, 864],
    [1, 9, 865],
    [1, 9, 866],
    [1, 9, 867],
    [1, 9, 868],
    [";", -1],
    [3, "number", e[20], 861],
    [1, 262, 869,
     0, 869],
    [/^\;?/, -1],
    [1, 9, 870],
    ["]", 861],
    [3, "keyword", e[26], 872,
     0, 874],
    [1, 9, 873],
    [2, 489, 874, {"name":"TemplateParams"}],
    [1, 9, 875],
    [3, "keyword", e[21], 876,
     3, "keyword", e[18], 876],
    [1, 9, 877],
    [e[49], 878],
    [1, 9, 879],
    [3, "type def", e[22], 880,
     0, 880],
    [1, 9, 881],
    [3, "operator", "=", 882,
     0, -1],
    [1, 9, 883],
    [1, 123, -1,
     3, "number", e[20], -1],
    ["[", 885],
    [1, 9, 886],
    [1, 779, 887,
     "]", -1],
    [1, 9, 886],
    ["{", 889],
    [1, 9, 890],
    [1, 779, 891,
     "}", -1],
    [1, 9, 890],
    [/^\&?/, 893,
     "=", 894,
     3, "keyword", e[52], 894,
     0, -1],
    [1, 9, 895],
    [1, 9, 896],
    [1, 123, 894,
     0, 894],
    [",", 897,
     0, -1],
    [1, 9, 898],
    [/^\&?/, 899,
     "=", 900,
     3, "keyword", e[52], 900],
    [1, 9, 901],
    [1, 9, 896],
    [1, 123, 900,
     0, 900],
    [1, 397, 903,
     2, 656, 904, {"name":"fieldName","token":"property"}],
    [1, 9, 902],
    [1, 9, 905],
    [2, 407, 906, {"name":"TemplateArgs"},
     0, 906],
    [1, 9, 907],
    ["(", 908,
     "{", 909],
    [1, 9, 910],
    [1, 9, 911],
    [1, 929, 912],
    [1, 929, 913],
    [1, 9, 914],
    [1, 9, 915],
    [")", -1],
    ["}", -1],
    [0, 917,
     "(", 925],
    [e[58], 918,
     3, "keyword", e[16], 919,
     3, "def property", e[22], 920],
    [1, 9, 917],
    [1, 405, 920],
    [1, 9, 921],
    ["[", 922,
     0, -1],
    [1, 9, 923],
    ["]", 924],
    [1, 9, 921],
    [1, 9, 926],
    [1, 916, 927],
    [1, 9, 928],
    [")", -1],
    [1, 262, 930,
     0, -1],
    [1, 9, 931],
    [",", 932,
     0, -1],
    [1, 9, 933],
    [1, 262, 934],
    [1, 9, 931]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos, _cx, nextLines) {
    var m1 = /^(\w+)\s*(::\s*(?:~?(\w+)|$)|$)/.exec(line.slice(pos));
    if (!m1) { return false }
    if (m1[3]) { return m1[3] == m1[1] }
    var m2 = (m1[2] ? /^\s*~?(\w+)/ : /^\s*::\s*~?(\w+)/).exec(nextLines && nextLines(1) || "");
    return m2 && m2[1] == m1[1]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var open = rawStringOpen.exec(cx.startLine);
    if (!open) { return false }
    var closing = ")" + open[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = (function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
