(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^constructor(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\()/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^[A-Z][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^is(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 31, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 33, 6, {"name":"Statement"}],
    [1, 69, 7],
    [1, 69, 8],
    [e[4], 6,
     2, 70, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [1, 31, 10],
    [1, 31, 11],
    [0, 3,
     0, 1],
    [1, 69, 12],
    [1, 69, 13],
    [3, "variable package", e[0], 14],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 15,
     "*", 16,
     3, "def", e[0], 17],
    [1, 69, 18],
    [1, 69, 19],
    [1, 69, 20],
    [1, 69, 21],
    [1, 31, 22],
    [".", 23],
    [/^\;?/, 6],
    [3, "keyword", e[1], 24,
     0, 16],
    [1, 69, 25],
    [1, 69, 13],
    [1, 69, 26],
    [".", 27,
     /^\;?/, 6],
    [3, "def", e[0], 16],
    [1, 69, 28],
    [3, "variable package", e[0], 29],
    [1, 69, 25],
    [3, "keyword", e[9], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[27], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[43], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[13], -1,
     3, "atom", e[29], -1,
     3, "number", e[30], -1,
     1, 75, -1,
     3, "string-2", e[31], -1,
     3, "operator", e[17], -1,
     2, 70, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    ["\n", 32,
     0, -1],
    [e[4], 32,
     2, 70, 32, {"name":"comment","token":"comment"},
     0, 31],
    [3, "meta", e[16], -1,
     1, 86, -1,
     1, 93, -1,
     3, "keyword", e[5], 34,
     3, "keyword", e[6], 47,
     3, "keyword", e[7], 55,
     1, 160, 67,
     ";", -1],
    [1, 192, 35],
    ["(", 36],
    [1, 192, 37],
    [1, 86, 38,
     1, 193, 39],
    [1, 192, 37],
    [1, 192, 40],
    [3, "keyword", e[8], 41],
    [1, 192, 42],
    [1, 160, 43],
    [1, 192, 44],
    [")", 45],
    [1, 192, 46],
    [2, 204, -1, {"name":"Block"},
     2, 33, -1, {"name":"Statement"}],
    [1, 69, 48],
    [1, 31, 49],
    [1, 69, 50],
    [2, 208, 51, {"name":"ParenthesizedExpression"}],
    [1, 69, 52],
    [1, 31, 53],
    [1, 69, 54],
    [2, 204, -1, {"name":"Block"},
     2, 33, -1, {"name":"Statement"},
     ";", -1],
    [1, 69, 56],
    [1, 31, 57],
    [1, 69, 58],
    [2, 204, 59, {"name":"Block"},
     2, 33, 59, {"name":"Statement"}],
    [1, 69, 60],
    [1, 31, 61],
    [1, 69, 62],
    [3, "keyword", e[6], 63],
    [1, 69, 64],
    [1, 31, 65],
    [1, 69, 66],
    [2, 208, -1, {"name":"ParenthesizedExpression"}],
    [1, 69, 68],
    [/^\;?/, -1],
    [e[4], 69,
     2, 70, 69, {"name":"comment","token":"comment"},
     0, -1],
    [/^\/\*\*(?!\/)/, 71,
     "/*", 74,
     /^\/\/.*/, -1],
    [e[21], 72,
     0, 73],
    [0, 71,
     0, 71],
    [2, 213, 73, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 74,
     "*/", -1],
    [3, "string", "\"\"\"", 76,
     3, "string", "\"", 81],
    [2, 224, 76, {"name":"str","token":"string"},
     3, "string", "${", 77,
     2, 226, 76, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 192, 78],
    [1, 160, 79],
    [1, 192, 80],
    [3, "string", "}", 76],
    [2, 224, 81, {"name":"str","token":"string"},
     3, "string", "${", 82,
     3, "string", /^(?:(?!\"|\$\{|\\).)+/, 81,
     3, "string", "\"", -1],
    [1, 192, 83],
    [1, 160, 84],
    [1, 192, 85],
    [3, "string", "}", 81],
    [2, 228, 87, {"name":"AnnotationHead","token":"meta"}],
    [1, 192, 88],
    [1, 233, -1,
     "[", 89],
    [1, 192, 90],
    [1, 233, 91],
    [1, 192, 92],
    [0, 90,
     "]", -1],
    [3, "keyword", e[9], 94,
     3, "keyword", e[10], 94,
     3, "keyword", e[11], 110,
     3, "keyword", e[12], 118,
     3, "keyword", e[13], 124,
     3, "keyword", e[14], 150],
    [1, 192, 95],
    [3, "type def", e[0], 96],
    [1, 192, 97],
    [2, 243, 98, {"name":"TypeParams"},
     0, 98],
    [1, 192, 99],
    [2, 248, 100, {"name":"Constructor"},
     0, 100],
    [1, 192, 101],
    [":", 102,
     0, 103],
    [1, 192, 104],
    [1, 192, 105],
    [1, 252, 103],
    [3, "keyword", e[15], 106,
     0, 107],
    [1, 192, 108],
    [1, 192, 109],
    [1, 270, 107],
    [2, 288, -1, {"name":"ClassBody"},
     0, -1],
    [1, 192, 111],
    [3, "def", e[0], 112],
    [1, 192, 113],
    [":", 114,
     0, 115],
    [1, 192, 116],
    [1, 192, 117],
    [1, 252, 115],
    [2, 288, -1, {"name":"ClassBody"},
     0, -1],
    [1, 192, 119],
    [2, 243, 120, {"name":"TypeParams"},
     0, 120],
    [1, 192, 121],
    [3, "def", e[0], 122],
    [1, 192, 123],
    [2, 316, -1, {"name":"FunctionSpec"}],
    [1, 192, 125],
    [2, 243, 126, {"name":"TypeParams"},
     0, 126],
    [1, 192, 127],
    [1, 193, 128],
    [1, 192, 129],
    [3, "keyword", e[15], 130,
     0, 131],
    [1, 192, 132],
    [1, 192, 133],
    [1, 270, 131],
    [3, "operator", "=", 134,
     3, "keyword", e[23], 135,
     0, 136],
    [1, 192, 137],
    [1, 192, 138],
    [1, 192, 139],
    [1, 160, 136],
    [1, 160, 136],
    [/^\;?/, 140],
    [1, 192, 141],
    [1, 329, 142,
     1, 343, 143,
     0, -1],
    [1, 192, 144],
    [1, 192, 145],
    [";", 146,
     0, -1],
    [";", 147],
    [1, 192, 148],
    [1, 192, 149],
    [1, 343, -1],
    [1, 329, -1,
     0, -1],
    [1, 192, 151],
    [3, "type def", e[0], 152],
    [1, 192, 153],
    [2, 243, 154, {"name":"TypeParams"},
     0, 154],
    [1, 192, 155],
    [3, "operator", "=", 156],
    [1, 192, 157],
    [1, 355, 158],
    [1, 192, 159],
    [/^\;?/, -1],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 161,
     3, "meta", e[16], 161,
     1, 86, 161,
     1, 386, 164],
    [1, 69, 162],
    [1, 31, 163],
    [1, 69, 160],
    [1, 69, 165],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 166,
     [5, 462], 167,
     3, "operator", e[17], 168,
     /^\!?/, 169,
     3, "keyword", e[1], 170,
     2, 463, 166, {"name":"ArgList"},
     /^(?:\?\.|\.|\:\:)/, 171,
     "[", 172,
     3, "variable callee", [0, [6, 468], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 173,
     0, -1],
    [1, 69, 165],
    [2, 469, 166, {"name":"TypeArgs"}],
    [1, 69, 174],
    [1, 69, 175],
    [1, 69, 176],
    [1, 69, 177],
    [1, 69, 178],
    [1, 69, 179],
    [1, 31, 180],
    [3, "keyword", e[8], 168,
     3, "keyword", e[1], 168],
    [/^\??/, 168],
    [1, 31, 181],
    [1, 31, 182],
    [1, 31, 183],
    [1, 69, 184],
    [1, 69, 185],
    [1, 69, 186],
    [1, 69, 187],
    [1, 386, 166],
    [3, "keyword", e[9], 166,
     3, "property callee", e[38], 166,
     3, "property", e[0], 166,
     2, 208, 166, {"name":"ParenthesizedExpression"}],
    [1, 474, 188],
    [1, 386, 166],
    [1, 69, 189],
    [1, 31, 190],
    [1, 69, 191],
    ["]", 166],
    [e[4], 192,
     2, 70, 192, {"name":"comment","token":"comment"},
     "\n", 192,
     0, -1],
    ["(", 194,
     0, 198],
    [1, 192, 195],
    [1, 482, 196],
    [1, 192, 197],
    [")", -1],
    [1, 86, 199,
     3, "def", e[0], 200],
    [1, 192, 198],
    [1, 192, 201],
    [":", 202,
     0, -1],
    [1, 192, 203],
    [1, 355, -1],
    ["{", 205],
    [1, 192, 206],
    [2, 33, 207, {"name":"Statement"},
     "}", -1],
    [1, 192, 206],
    ["(", 209],
    [1, 192, 210],
    [1, 160, 211],
    [1, 192, 212],
    [")", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 214,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 215,
     3, "tag", e[20], 222,
     "{", 216],
    [e[18], 214,
     3, "def", e[19], 222,
     "<", 217,
     0, 222],
    [e[18], 215,
     3, "type", e[19], 222,
     0, 222],
    [3, "tag", e[20], 218],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 219],
    [/^[\t ]*/, 220],
    [">", 222],
    [1, 490, 221],
    ["}", 222],
    [e[21], 223,
     0, -1],
    [0, 222,
     0, 222],
    ["\\", 225],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$\{|\\)/, /^[^]/], 227],
    [0, 226,
     0, -1],
    ["@", 229],
    [1, 69, 230],
    [[0, [5, 494], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 231,
     0, -1],
    [1, 69, 232],
    [":", -1],
    [3, "meta", e[0], 234],
    [1, 192, 235],
    [2, 243, 236, {"name":"TypeParams"},
     0, 236],
    [1, 192, 237],
    [".", 238,
     2, 463, -1, {"name":"ArgList"},
     0, -1],
    [1, 192, 239],
    [3, "meta", e[0], 240],
    [1, 192, 241],
    [2, 243, 242, {"name":"TypeParams"},
     0, 242],
    [1, 192, 237],
    ["<", 244],
    [1, 192, 245],
    [1, 497, 246],
    [1, 192, 247],
    [">", -1],
    [1, 515, 249,
     3, "keyword", e[22], 250,
     0, 250],
    [1, 192, 248],
    [1, 192, 251],
    [2, 516, -1, {"name":"ParamList"}],
    [1, 515, 253,
     1, 355, 254],
    [1, 192, 252],
    [1, 192, 255],
    [3, "keyword", e[23], 256,
     2, 463, 258, {"name":"ArgList"},
     0, 258],
    [1, 192, 257],
    [1, 160, 258],
    [1, 69, 259],
    [",", 260,
     0, -1],
    [1, 69, 261],
    [1, 31, 262],
    [1, 69, 263],
    [1, 515, 264,
     1, 355, 265,
     0, 266],
    [1, 192, 263],
    [1, 192, 267],
    [1, 69, 259],
    [3, "keyword", e[23], 268,
     2, 463, 266, {"name":"ArgList"},
     0, 266],
    [1, 192, 269],
    [1, 160, 266],
    [1, 86, 271,
     3, "variable", e[0], 272],
    [1, 192, 270],
    [1, 192, 273],
    [":", 274],
    [1, 192, 275],
    [1, 355, 276],
    [1, 69, 277],
    [",", 278,
     0, -1],
    [1, 69, 279],
    [1, 31, 280],
    [1, 69, 281],
    [1, 86, 282,
     3, "variable", e[0], 283,
     0, 284],
    [1, 192, 281],
    [1, 192, 285],
    [1, 69, 277],
    [":", 286],
    [1, 192, 287],
    [1, 355, 284],
    ["{", 289],
    [1, 192, 290],
    [1, 86, 291,
     1, 93, 291,
     3, "keyword", e[24], 292,
     3, "keyword", e[25], 293,
     3, "keyword", e[22], 294,
     1, 521, 295,
     "}", -1],
    [1, 192, 290],
    [1, 192, 296],
    [1, 192, 297],
    [1, 192, 298],
    [1, 192, 299],
    [3, "keyword", e[11], 300],
    [2, 204, 291, {"name":"Block"}],
    [2, 516, 301, {"name":"ParamList"}],
    [";", 291],
    [1, 192, 302],
    [1, 192, 303],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 304],
    [":", 305,
     0, 306],
    [1, 192, 307],
    [1, 192, 308],
    [1, 192, 309],
    [":", 310,
     0, 311],
    [3, "keyword", e[26], 312,
     3, "keyword", e[27], 312],
    [2, 204, 291, {"name":"Block"},
     0, 291],
    [1, 192, 313],
    [1, 192, 314],
    [1, 192, 315],
    [1, 252, 311],
    [2, 288, 291, {"name":"ClassBody"},
     0, 291],
    [2, 463, 306, {"name":"ArgList"}],
    [2, 516, 317, {"name":"ParamList"}],
    [1, 192, 318],
    [":", 319,
     0, 321],
    [1, 192, 320],
    [1, 355, 321],
    [1, 192, 322],
    [3, "keyword", e[15], 323,
     0, 325],
    [1, 192, 324],
    [1, 270, 325],
    [1, 192, 326],
    [2, 204, -1, {"name":"Block"},
     3, "operator", "=", 327],
    [1, 192, 328],
    [1, 160, -1],
    [1, 515, 330,
     3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 331],
    [1, 192, 329],
    [1, 192, 332],
    ["(", 333,
     0, 335],
    [1, 192, 334],
    [")", 335],
    [1, 192, 336],
    [":", 337,
     0, 339],
    [1, 192, 338],
    [1, 355, 339],
    [1, 192, 340],
    [2, 204, -1, {"name":"Block"},
     3, "operator", "=", 341],
    [1, 192, 342],
    [1, 160, -1],
    [1, 515, 344,
     3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 345],
    [1, 192, 343],
    [1, 192, 346],
    [2, 516, 347, {"name":"ParamList"},
     0, 347],
    [1, 192, 348],
    [":", 349,
     0, 351],
    [1, 192, 350],
    [1, 355, 351],
    [1, 192, 352],
    [2, 204, -1, {"name":"Block"},
     3, "operator", "=", 353],
    [1, 192, 354],
    [1, 160, -1],
    [1, 86, 356,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 356,
     3, "keyword", e[28], 383,
     3, "type", e[0], 359,
     [5, 539], 360,
     "(", 361],
    [1, 69, 357],
    [1, 31, 358],
    [1, 69, 355],
    [1, 69, 362],
    [2, 552, 363, {"name":"ParamTypeList"}],
    [1, 69, 364],
    [".", 365,
     0, 383],
    [1, 69, 366],
    [1, 31, 367],
    [1, 69, 368],
    [1, 31, 369],
    [1, 69, 370],
    [1, 31, 371],
    [1, 69, 372],
    [1, 355, 373],
    [1, 69, 374],
    [3, "operator", "->", 375],
    [1, 69, 376],
    [3, "type", e[0], 377],
    [1, 69, 378],
    [1, 31, 379],
    [1, 69, 362],
    [1, 31, 380],
    [1, 69, 381],
    [1, 69, 382],
    [")", 383],
    [1, 355, 383],
    [1, 69, 384],
    ["?", 385,
     0, -1],
    [1, 69, 384],
    [2, 208, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[29], -1,
     3, "number", e[30], -1,
     1, 75, -1,
     3, "string-2", e[31], -1,
     2, 557, -1, {"name":"Lambda"},
     3, "keyword", e[11], 387,
     3, "keyword", e[12], 397,
     3, "keyword", e[26], 401,
     3, "keyword", e[27], 405,
     3, "keyword", e[32], 419,
     3, "keyword", e[33], 429,
     3, "keyword", e[34], 444,
     3, "keyword", e[35], 450,
     3, "keyword", e[36], 452,
     3, "keyword", e[37], 458,
     2, 566, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", e[41], -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[0], -1],
    [1, 69, 388],
    [1, 31, 389],
    [1, 69, 390],
    [":", 391,
     0, 392],
    [1, 192, 393],
    [1, 69, 394],
    [1, 252, 395],
    [2, 288, -1, {"name":"ClassBody"}],
    [1, 69, 396],
    [1, 31, 392],
    [1, 69, 398],
    [1, 31, 399],
    [1, 69, 400],
    [2, 316, -1, {"name":"FunctionSpec"}],
    [1, 69, 402],
    ["@", 403,
     0, -1],
    [1, 69, 404],
    [e[0], -1],
    [1, 69, 406],
    ["<", 407,
     0, 408],
    [1, 69, 409],
    [1, 69, 410],
    [1, 31, 411],
    ["@", 412,
     0, -1],
    [1, 69, 413],
    [1, 69, 414],
    [1, 355, 415],
    [e[0], -1],
    [1, 69, 416],
    [1, 31, 417],
    [1, 69, 418],
    [">", 408],
    [1, 69, 420],
    [1, 31, 421],
    [1, 69, 422],
    [2, 208, 423, {"name":"ParenthesizedExpression"}],
    [1, 69, 424],
    [1, 31, 425],
    [1, 69, 426],
    [2, 204, 427, {"name":"Block"},
     2, 33, 427, {"name":"Statement"},
     ";", 427],
    [1, 69, 428],
    [2, 567, -1, {"name":"Alternative"}],
    [1, 192, 430],
    ["(", 431],
    [1, 192, 432],
    [1, 86, 433,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 434,
     0, 435],
    [1, 192, 432],
    [1, 192, 436],
    [1, 192, 437],
    [1, 193, 438],
    [1, 160, 439],
    [1, 192, 440],
    [1, 192, 441],
    [3, "operator", "=", 435],
    [")", 442],
    [1, 192, 443],
    [2, 575, -1, {"name":"WhenBody"}],
    [1, 69, 445],
    [1, 31, 446],
    [1, 69, 447],
    [2, 204, 448, {"name":"Block"}],
    [1, 69, 449],
    [2, 584, -1, {"name":"CatchFinally"}],
    [1, 69, 451],
    [1, 160, -1],
    [1, 69, 453],
    ["@", 454,
     0, 455],
    [1, 69, 456],
    [1, 69, 457],
    [e[0], 455],
    [1, 160, -1,
     0, -1],
    [1, 69, 459],
    ["@", 460,
     0, -1],
    [1, 69, 461],
    [e[0], -1],
    [2, 469, -1, {"name":"TypeArgs"}],
    ["(", 464],
    [1, 192, 465],
    [1, 623, 466,
     0, 466],
    [1, 192, 467],
    [")", -1],
    [3, "keyword", e[39], -1],
    ["<", 470],
    [1, 192, 471],
    [1, 645, 472],
    [1, 192, 473],
    [">", -1],
    [1, 160, 475],
    [1, 69, 476],
    [",", 477,
     0, -1],
    [1, 69, 478],
    [1, 31, 479],
    [1, 69, 480],
    [1, 160, 481,
     0, 481],
    [1, 69, 476],
    [1, 193, 483],
    [1, 69, 484],
    [",", 485,
     0, -1],
    [1, 69, 486],
    [1, 31, 487],
    [1, 69, 488],
    [1, 193, 489,
     0, 489],
    [1, 69, 484],
    [3, "attribute", "{", 491,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 490,
     "\n", 492,
     0, -1],
    [1, 490, 493],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 490],
    [/^(?=\*\/)/, 490,
     3, "attribute", "}", 490],
    [e[0], 495],
    [1, 69, 496],
    [":", -1],
    [1, 515, 498,
     3, "type", e[0], 499],
    [1, 192, 497],
    [1, 192, 500],
    [":", 501,
     0, 503],
    [1, 192, 502],
    [1, 355, 503],
    [1, 69, 504],
    [",", 505,
     0, -1],
    [1, 69, 506],
    [1, 31, 507],
    [1, 69, 508],
    [1, 515, 509,
     3, "type", e[0], 510,
     0, 511],
    [1, 192, 508],
    [1, 192, 512],
    [1, 69, 504],
    [":", 513,
     0, 511],
    [1, 192, 514],
    [1, 355, 511],
    [3, "keyword", e[40], -1,
     1, 86, -1],
    ["(", 517],
    [1, 192, 518],
    [1, 657, 519,
     0, 519],
    [1, 192, 520],
    [")", -1],
    [1, 515, 522,
     3, "def", e[0], 523],
    [1, 192, 521],
    [1, 192, 524],
    [2, 463, 525, {"name":"ArgList"},
     0, 525],
    [1, 192, 526],
    [2, 288, 527, {"name":"ClassBody"},
     0, 527],
    [1, 69, 528],
    [",", 529,
     0, -1],
    [1, 69, 530],
    [1, 31, 531],
    [1, 69, 532],
    [1, 515, 533,
     3, "def", e[0], 534,
     0, 535],
    [1, 192, 532],
    [1, 192, 536],
    [1, 69, 528],
    [2, 463, 537, {"name":"ArgList"},
     0, 537],
    [1, 192, 538],
    [2, 288, 535, {"name":"ClassBody"},
     0, 535],
    ["(", 540],
    [1, 69, 541],
    [1, 31, 542],
    [1, 69, 543],
    [2, 228, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 544],
    [1, 69, 545],
    [1, 31, 546],
    [1, 69, 547],
    [")", 548,
     ":", -1],
    [1, 69, 549],
    [1, 31, 550],
    [1, 69, 551],
    ["->", -1],
    ["(", 553],
    [1, 192, 554],
    [1, 687, 555,
     0, 555],
    [1, 192, 556],
    [")", -1],
    ["{", 558],
    [1, 192, 559],
    [[5, 703], 560,
     0, 563],
    [1, 193, 561],
    [1, 192, 562],
    [3, "operator", "->", 563],
    [1, 192, 564],
    [2, 33, 565, {"name":"Statement"},
     "}", -1],
    [1, 192, 564],
    [3, "type", e[41], -1],
    [[5, 706], 568,
     0, -1],
    [1, 31, 569],
    [1, 69, 570],
    [3, "keyword", e[39], 571],
    [1, 69, 572],
    [1, 31, 573],
    [1, 69, 574],
    [2, 204, -1, {"name":"Block"},
     2, 33, -1, {"name":"Statement"},
     ";", -1],
    ["{", 576],
    [1, 192, 577],
    [3, "keyword", e[39], 578,
     1, 709, 578],
    [1, 192, 579],
    [3, "operator", "->", 580],
    [1, 192, 581],
    [2, 204, 582, {"name":"Block"},
     2, 33, 582, {"name":"Statement"},
     ";", 582],
    [1, 192, 583],
    ["}", -1],
    [[5, 737], 585,
     [5, 740], 616,
     0, -1],
    [1, 31, 586],
    [1, 69, 587],
    [3, "keyword", e[42], 588],
    [1, 69, 589],
    [1, 31, 590],
    [1, 69, 591],
    ["(", 592],
    [1, 69, 593],
    [1, 31, 594],
    [1, 69, 595],
    [1, 86, 596,
     3, "def", e[0], 597],
    [1, 69, 598],
    [1, 69, 599],
    [1, 31, 600],
    [1, 31, 601],
    [1, 69, 595],
    [1, 69, 602],
    [":", 603],
    [1, 69, 604],
    [1, 31, 605],
    [1, 69, 606],
    [1, 355, 607],
    [1, 69, 608],
    [1, 31, 609],
    [1, 69, 610],
    [")", 611],
    [1, 69, 612],
    [1, 31, 613],
    [1, 69, 614],
    [2, 204, 615, {"name":"Block"}],
    [1, 69, 584],
    [1, 31, 617],
    [1, 69, 618],
    [3, "keyword", e[43], 619],
    [1, 69, 620],
    [1, 31, 621],
    [1, 69, 622],
    [2, 204, -1, {"name":"Block"}],
    [1, 86, 624,
     [0, [5, 743], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 625,
     0, 626],
    [1, 192, 623],
    [1, 192, 627],
    [1, 192, 628],
    [3, "operator", "=", 626],
    [/^\*?/, 629],
    [1, 192, 630],
    [1, 160, 631],
    [1, 69, 632],
    [",", 633,
     0, -1],
    [1, 69, 634],
    [1, 31, 635],
    [1, 69, 636],
    [1, 86, 637,
     [0, [5, 746], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 638,
     0, 639,
     0, 640],
    [1, 192, 636],
    [1, 192, 641],
    [1, 192, 642],
    [1, 69, 632],
    [3, "operator", "=", 639],
    [/^\*?/, 643],
    [1, 192, 644],
    [1, 160, 640],
    ["*", 648,
     0, 646],
    [1, 86, 647,
     3, "keyword", e[44], 647,
     1, 355, 648],
    [1, 192, 646],
    [1, 69, 649],
    [",", 650,
     0, -1],
    [1, 69, 651],
    [1, 31, 652],
    [1, 69, 653],
    ["*", 654,
     0, 655,
     0, 654],
    [1, 69, 649],
    [1, 86, 656,
     3, "keyword", e[44], 656,
     1, 355, 654],
    [1, 192, 655],
    [1, 515, 658,
     3, "keyword", e[13], 659,
     0, 659],
    [1, 192, 657],
    [1, 192, 660],
    [3, "def", e[0], 661],
    [1, 192, 662],
    [":", 663,
     0, 664],
    [1, 192, 665],
    [1, 192, 666],
    [1, 355, 664],
    [3, "operator", "=", 667,
     0, 669],
    [1, 192, 668],
    [1, 160, 669],
    [1, 69, 670],
    [",", 671,
     0, -1],
    [1, 69, 672],
    [1, 31, 673],
    [1, 69, 674],
    [1, 515, 675,
     3, "keyword", e[13], 676,
     0, 676,
     0, 677],
    [1, 192, 674],
    [1, 192, 678],
    [1, 69, 670],
    [3, "def", e[0], 679],
    [1, 192, 680],
    [":", 681,
     0, 682],
    [1, 192, 683],
    [1, 192, 684],
    [1, 355, 682],
    [3, "operator", "=", 685,
     0, 677],
    [1, 192, 686],
    [1, 160, 677],
    [[0, [5, 749], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 688,
     0, 689],
    [1, 192, 690],
    [1, 192, 691],
    [":", 689],
    [1, 355, 692],
    [1, 69, 693],
    [",", 694,
     0, -1],
    [1, 69, 695],
    [1, 31, 696],
    [1, 69, 697],
    [[0, [5, 752], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 698,
     0, 699,
     0, 700],
    [1, 192, 701],
    [1, 192, 702],
    [1, 69, 693],
    [":", 699],
    [1, 355, 700],
    [1, 193, 704],
    [1, 192, 705],
    ["->", -1],
    [1, 31, 707],
    [1, 69, 708],
    [3, "keyword", e[39], -1],
    [[5, 755], 710,
     [5, 758], 711,
     1, 160, 720],
    [3, "operator", "!", 712,
     0, 712],
    [3, "operator", "!", 713,
     0, 713],
    [1, 192, 714],
    [1, 192, 715],
    [3, "keyword", e[8], 716],
    [3, "keyword", e[45], 717],
    [1, 192, 718],
    [1, 192, 719],
    [1, 160, 720],
    [1, 355, 720],
    [1, 69, 721],
    [",", 722,
     0, -1],
    [1, 69, 723],
    [1, 31, 724],
    [1, 69, 725],
    [[5, 761], 726,
     [5, 764], 727,
     1, 160, 728,
     0, 728],
    [3, "operator", "!", 729,
     0, 729],
    [3, "operator", "!", 730,
     0, 730],
    [1, 69, 721],
    [1, 192, 731],
    [1, 192, 732],
    [3, "keyword", e[8], 733],
    [3, "keyword", e[45], 734],
    [1, 192, 735],
    [1, 192, 736],
    [1, 160, 728],
    [1, 355, 728],
    [1, 31, 738],
    [1, 69, 739],
    [3, "keyword", e[42], -1],
    [1, 31, 741],
    [1, 69, 742],
    [3, "keyword", e[43], -1],
    [e[0], 744],
    [1, 192, 745],
    ["=", -1],
    [e[0], 747],
    [1, 192, 748],
    ["=", -1],
    [e[0], 750],
    [1, 192, 751],
    [":", -1],
    [e[0], 753],
    [1, 192, 754],
    [":", -1],
    [/^\!?/, 756],
    [1, 192, 757],
    [3, "keyword", e[8], -1],
    [/^\!?/, 759],
    [1, 192, 760],
    [3, "keyword", e[45], -1],
    [/^\!?/, 762],
    [1, 192, 763],
    [3, "keyword", e[8], -1],
    [/^\!?/, 765],
    [1, 192, 766],
    [3, "keyword", e[45], -1]
  ];
  var start = 0;
  var token = 30;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", Lambda: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "Lambda", "Constructor", "ForStatement", "CatchFinally"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.conf = conf;
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.conf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
