(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 57, 14],
    [1, 57, 15],
    [/^\;?/, 6],
    [1, 57, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 57, 14],
    [1, 57, 12],
    [3, "keyword", e[9], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[27], -1,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     3, "operator", e[14], -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[13], -1,
     1, 73, -1,
     1, 80, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 92, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 73, 31,
     1, 114, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 92, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 125, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 129, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 125, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 125, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 129, -1, {"name":"ParenthesizedExpression"}],
    [1, 57, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     "/*", 56,
     /^\/\/.*/, -1],
    [e[19], 54,
     0, 55],
    [0, 53,
     0, 53],
    [2, 134, 55, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 56,
     "*/", -1],
    [e[4], 57,
     2, 52, 57, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 59,
     3, "string", "\"", 66],
    [2, 145, 59, {"name":"str","token":"string"},
     3, "string", "${", 60,
     3, "string", "$", 61,
     2, 147, 59, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 62],
    [1, 25, 63],
    [1, 92, 64],
    [3, "variable", e[0], 59],
    [1, 25, 65],
    [3, "string", "}", 59],
    [2, 145, 66, {"name":"str","token":"string"},
     3, "string", "${", 67,
     3, "string", "$", 68,
     3, "string", /^(?:(?![\"\$\\]).)+/, 66,
     3, "string", "\"", -1],
    [1, 25, 69],
    [1, 25, 70],
    [1, 92, 71],
    [3, "variable", e[0], 66],
    [1, 25, 72],
    [3, "string", "}", 66],
    [2, 149, 74, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 75],
    [1, 154, -1,
     "[", 76],
    [1, 25, 77],
    [1, 154, 78],
    [1, 25, 79],
    [0, 77,
     "]", -1],
    [1, 164, 81,
     3, "keyword", e[9], 82,
     3, "keyword", e[10], 82,
     1, 165, -1,
     3, "keyword", e[11], 83,
     1, 174, -1,
     1, 191, -1,
     1, 206, -1,
     3, "keyword", e[12], 84],
    [1, 25, 80],
    [1, 25, 85],
    [1, 25, 86],
    [1, 25, 87],
    [3, "type def", e[0], 88],
    [2, 219, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 89],
    [1, 25, 90],
    [1, 25, 91],
    [2, 224, -1, {"name":"ClassSpec"}],
    [2, 237, -1, {"name":"TypeAliasSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 93,
     3, "meta", e[13], 93,
     1, 73, 93,
     1, 244, 94],
    [1, 25, 92],
    [1, 57, 95],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 96,
     [5, 302], 97,
     3, "operator", e[14], 98,
     "!", 99,
     0, 100,
     3, "keyword", e[1], 101,
     2, 303, 96, {"name":"ArgList"},
     0, 102,
     /^(?:\?\.|\.|\:\:)/, 103,
     "[", 104,
     3, "variable callee", [0, [6, 308], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 105,
     0, -1],
    [1, 57, 95],
    [2, 309, 96, {"name":"TypeArgs"}],
    [1, 25, 106],
    [1, 57, 100],
    [3, "keyword", e[8], 98,
     3, "keyword", e[15], 98],
    [1, 57, 107],
    [1, 73, 102,
     2, 314, 96, {"name":"LambdaBlock"}],
    [1, 25, 108],
    [1, 25, 109],
    [1, 25, 110],
    [1, 244, 96],
    ["?", 111,
     0, 98],
    [3, "keyword", e[9], 96,
     3, "property callee", e[36], 96,
     3, "property", e[0], 96,
     2, 129, 96, {"name":"ParenthesizedExpression"}],
    [1, 323, 112],
    [1, 244, 96],
    [1, 57, 98],
    [1, 25, 113],
    ["]", 96],
    ["(", 115,
     0, 119],
    [1, 25, 116],
    [1, 329, 117],
    [1, 25, 118],
    [")", -1],
    [1, 73, 120,
     3, "def", e[0], 121],
    [1, 25, 119],
    [1, 25, 122],
    [":", 123,
     0, -1],
    [1, 25, 124],
    [1, 335, -1],
    ["{", 126],
    [1, 25, 127],
    [2, 26, 128, {"name":"Statement"},
     "}", -1],
    [1, 25, 127],
    ["(", 130],
    [1, 25, 131],
    [1, 92, 132],
    [1, 25, 133],
    [")", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 135,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 136,
     3, "tag", e[18], 143,
     "{", 137],
    [e[16], 135,
     3, "def", e[17], 143,
     "<", 138,
     0, 143],
    [e[16], 136,
     3, "type", e[17], 143,
     0, 143],
    [3, "tag", e[18], 139],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 140],
    [/^[\t ]*/, 141],
    [">", 143],
    [1, 358, 142],
    ["}", 143],
    [e[19], 144,
     0, -1],
    [0, 143,
     0, 143],
    ["\\", 146],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 148],
    [0, 147,
     0, -1],
    ["@", 150],
    [1, 57, 151],
    [[0, [5, 362], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 152,
     0, -1],
    [1, 57, 153],
    [":", -1],
    [3, "meta", e[0], 155],
    [1, 25, 156],
    [2, 309, 157, {"name":"TypeArgs"},
     0, 157],
    [1, 25, 158],
    [".", 159,
     2, 303, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 160],
    [3, "meta", e[0], 161],
    [1, 25, 162],
    [2, 309, 163, {"name":"TypeArgs"},
     0, 163],
    [1, 25, 158],
    [3, "keyword", e[20], -1,
     1, 73, -1],
    [3, "keyword", e[21], 166],
    [1, 25, 167],
    [3, "def", e[0], 168],
    [1, 25, 169],
    [":", 170,
     0, 172],
    [1, 25, 171],
    [1, 365, 172],
    [1, 25, 173],
    [2, 381, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 175],
    [1, 25, 176],
    [2, 385, 177, {"name":"TypeParams"},
     0, 177],
    [1, 25, 178],
    [1, 114, 179],
    [1, 25, 180],
    [3, "keyword", e[23], 181,
     0, 183],
    [1, 25, 182],
    [1, 390, 183],
    [1, 25, 184],
    [3, "operator", "=", 185,
     3, "keyword", e[39], 186,
     0, 189],
    [1, 25, 187],
    [1, 25, 188],
    [1, 92, 189],
    [1, 92, 189],
    [1, 25, 190],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 192],
    [1, 25, 193],
    ["(", 194,
     0, 196],
    [1, 25, 195],
    [")", 196],
    [1, 25, 197],
    [":", 198,
     0, 200],
    [1, 25, 199],
    [1, 335, 200],
    [1, 25, 201],
    [2, 125, 204, {"name":"Block"},
     3, "operator", "=", 202],
    [1, 25, 203],
    [1, 92, 204],
    [1, 25, 205],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 207],
    [1, 25, 208],
    [2, 406, 209, {"name":"ParamList"},
     0, 209],
    [1, 25, 210],
    [":", 211,
     0, 213],
    [1, 25, 212],
    [1, 335, 213],
    [1, 25, 214],
    [2, 125, 217, {"name":"Block"},
     3, "operator", "=", 215],
    [1, 25, 216],
    [1, 92, 217],
    [1, 25, 218],
    [/^\;?/, -1],
    [2, 385, 220, {"name":"TypeParams"},
     0, 220],
    [1, 25, 221],
    [3, "def", e[0], 222],
    [1, 25, 223],
    [2, 411, -1, {"name":"FunctionSpec"}],
    [2, 385, 225, {"name":"TypeParams"},
     0, 225],
    [1, 25, 226],
    [2, 424, 227, {"name":"Constructor"},
     0, 227],
    [1, 25, 228],
    [":", 229,
     0, 231],
    [1, 25, 230],
    [1, 365, 231],
    [1, 25, 232],
    [3, "keyword", e[23], 233,
     0, 235],
    [1, 25, 234],
    [1, 390, 235],
    [1, 25, 236],
    [2, 381, -1, {"name":"ClassBody"},
     0, -1],
    [2, 385, 238, {"name":"TypeParams"},
     0, 238],
    [1, 25, 239],
    [3, "operator", "=", 240],
    [1, 25, 241],
    [1, 335, 242],
    [1, 25, 243],
    [/^\;?/, -1],
    [2, 129, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     2, 314, -1, {"name":"LambdaBlock"},
     3, "keyword", e[21], 245,
     3, "keyword", e[11], 251,
     3, "keyword", e[27], 253,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], 257,
     3, "keyword", e[30], 267,
     3, "keyword", e[31], 272,
     3, "keyword", e[32], 287,
     3, "keyword", e[33], 290,
     3, "keyword", e[34], 292,
     3, "keyword", e[35], 298,
     2, 428, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[36], -1,
     3, "variable", e[0], -1],
    [1, 25, 246],
    [":", 247,
     0, 248],
    [1, 25, 249],
    [2, 381, -1, {"name":"ClassBody"}],
    [1, 365, 250],
    [1, 25, 248],
    [1, 25, 252],
    [2, 411, -1, {"name":"FunctionSpec"}],
    [1, 57, 254],
    ["@", 255,
     0, -1],
    [1, 57, 256],
    [e[0], -1],
    [1, 57, 258],
    ["<", 259,
     0, 260],
    [1, 25, 261],
    ["@", 262,
     0, -1],
    [1, 335, 263],
    [1, 57, 264],
    [1, 25, 265],
    [e[0], -1],
    [">", 266],
    [1, 57, 260],
    [1, 25, 268],
    [2, 129, 269, {"name":"ParenthesizedExpression"}],
    [1, 25, 270],
    [2, 125, 271, {"name":"Block"},
     2, 26, 271, {"name":"Statement"},
     ";", 271],
    [2, 429, -1, {"name":"Alternative"}],
    [1, 25, 273],
    ["(", 274],
    [1, 25, 275],
    [1, 73, 276,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 277,
     0, 278],
    [1, 25, 275],
    [1, 25, 279],
    [1, 25, 280],
    [1, 114, 281],
    [1, 92, 282],
    [1, 25, 283],
    [1, 25, 284],
    [3, "operator", "=", 278],
    [")", 285],
    [1, 25, 286],
    [2, 434, -1, {"name":"WhenBody"}],
    [1, 25, 288],
    [2, 125, 289, {"name":"Block"}],
    [2, 443, -1, {"name":"CatchFinally"}],
    [1, 57, 291],
    [1, 92, -1],
    [1, 57, 293],
    ["@", 294,
     0, 295],
    [1, 57, 296],
    [1, 92, -1,
     0, -1],
    [e[0], 297],
    [1, 57, 295],
    [1, 57, 299],
    ["@", 300,
     0, -1],
    [1, 57, 301],
    [e[0], -1],
    [2, 309, -1, {"name":"TypeArgs"}],
    ["(", 304],
    [1, 25, 305],
    [1, 463, 306,
     0, 306],
    [1, 25, 307],
    [")", -1],
    [3, "keyword", e[37], -1],
    ["<", 310],
    [1, 25, 311],
    [1, 483, 312],
    [1, 25, 313],
    [">", -1],
    ["{", 315],
    [1, 25, 316],
    [[5, 493], 317,
     0, 320],
    [1, 496, 318],
    [1, 25, 319],
    [3, "operator", "->", 320],
    [1, 25, 321],
    [2, 26, 322, {"name":"Statement"},
     "}", -1],
    [1, 25, 321],
    [1, 92, 324],
    [1, 57, 325],
    [",", 326,
     0, -1],
    [1, 25, 327],
    [1, 92, 328,
     0, 325],
    [1, 57, 325],
    [1, 114, 330],
    [1, 57, 331],
    [",", 332,
     0, -1],
    [1, 25, 333],
    [1, 114, 334,
     0, 331],
    [1, 57, 331],
    [1, 73, 336,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 336,
     3, "keyword", e[38], 355,
     3, "type", e[0], 337,
     [5, 510], 338,
     "(", 339],
    [1, 25, 335],
    [1, 57, 340],
    [2, 517, 341, {"name":"ParamTypeList"}],
    [1, 25, 342],
    [2, 309, 343, {"name":"TypeArgs"},
     0, 344],
    [1, 25, 345],
    [1, 335, 346],
    [1, 57, 344],
    [".", 347,
     0, 355],
    [3, "operator", "->", 348],
    [1, 25, 349],
    [1, 25, 350],
    [1, 25, 351],
    [")", 355],
    [3, "type", e[0], 352],
    [1, 335, 355],
    [1, 57, 353],
    [2, 309, 354, {"name":"TypeArgs"},
     0, 344],
    [1, 57, 344],
    [1, 57, 356],
    ["?", 357,
     0, -1],
    [1, 57, 356],
    [3, "attribute", "{", 359,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 358,
     "\n", 360,
     0, -1],
    [1, 358, 361],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 358],
    [/^(?=\*\/)/, 358,
     3, "attribute", "}", 358],
    [e[0], 363],
    [1, 57, 364],
    [":", -1],
    [1, 164, 366,
     1, 335, 367],
    [1, 25, 365],
    [1, 25, 368],
    [3, "keyword", e[39], 369,
     2, 303, 371, {"name":"ArgList"},
     0, 371],
    [1, 25, 370],
    [1, 92, 371],
    [1, 57, 372],
    [",", 373,
     0, -1],
    [1, 25, 374],
    [1, 164, 375,
     1, 335, 376,
     0, 372],
    [1, 25, 374],
    [1, 25, 377],
    [3, "keyword", e[39], 378,
     2, 303, 379, {"name":"ArgList"},
     0, 379],
    [1, 25, 380],
    [1, 57, 372],
    [1, 92, 379],
    ["{", 382],
    [1, 25, 383],
    [2, 522, 384, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 383],
    ["<", 386],
    [1, 25, 387],
    [1, 553, 388],
    [1, 25, 389],
    [">", -1],
    [1, 73, 391,
     3, "variable", e[0], 392],
    [1, 25, 390],
    [1, 25, 393],
    [":", 394],
    [1, 25, 395],
    [1, 335, 396],
    [1, 57, 397],
    [",", 398,
     0, -1],
    [1, 25, 399],
    [1, 73, 400,
     3, "variable", e[0], 401,
     0, 397],
    [1, 25, 399],
    [1, 25, 402],
    [":", 403],
    [1, 25, 404],
    [1, 335, 405],
    [1, 57, 397],
    ["(", 407],
    [1, 25, 408],
    [1, 569, 409,
     0, 409],
    [1, 25, 410],
    [")", -1],
    [2, 406, 412, {"name":"ParamList"}],
    [1, 25, 413],
    [":", 414,
     0, 416],
    [1, 25, 415],
    [1, 335, 416],
    [1, 25, 417],
    [3, "keyword", e[23], 418,
     0, 420],
    [1, 25, 419],
    [1, 390, 420],
    [1, 25, 421],
    [2, 125, -1, {"name":"Block"},
     3, "operator", "=", 422,
     0, -1],
    [1, 25, 423],
    [1, 92, -1],
    [1, 164, 425,
     3, "keyword", e[40], 426,
     0, 426],
    [1, 25, 424],
    [1, 25, 427],
    [2, 593, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 598], 430,
     0, -1],
    [1, 25, 431],
    [3, "keyword", e[37], 432],
    [1, 25, 433],
    [2, 125, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 435],
    [1, 25, 436],
    [3, "keyword", e[37], 437,
     1, 600, 437],
    [1, 25, 438],
    [3, "operator", "->", 439],
    [1, 25, 440],
    [2, 125, 441, {"name":"Block"},
     2, 26, 441, {"name":"Statement"},
     ";", 441],
    [1, 25, 442],
    ["}", -1],
    [[5, 626], 444,
     [5, 628], 459,
     0, -1],
    [1, 25, 445],
    [3, "keyword", e[41], 446],
    [1, 25, 447],
    ["(", 448],
    [1, 25, 449],
    [1, 73, 450,
     3, "def", e[0], 451],
    [1, 25, 449],
    [1, 25, 452],
    [":", 453],
    [1, 25, 454],
    [1, 335, 455],
    [1, 25, 456],
    [")", 457],
    [1, 25, 458],
    [2, 125, 443, {"name":"Block"}],
    [1, 25, 460],
    [3, "keyword", e[42], 461],
    [1, 25, 462],
    [2, 125, -1, {"name":"Block"}],
    [1, 73, 464,
     [0, [5, 630], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 465,
     0, 466],
    [1, 25, 463],
    [1, 25, 467],
    [1, 25, 468],
    [3, "operator", "=", 466],
    [/^\*?/, 469],
    [1, 25, 470],
    [1, 92, 471],
    [1, 57, 472],
    [",", 473,
     0, -1],
    [1, 25, 474],
    [1, 73, 475,
     [0, [5, 633], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 476,
     0, 477,
     0, 472],
    [1, 25, 474],
    [1, 25, 478],
    [1, 25, 479],
    [3, "operator", "=", 477],
    [/^\*?/, 480],
    [1, 25, 481],
    [1, 92, 482],
    [1, 57, 472],
    ["*", 486,
     0, 484],
    [1, 73, 485,
     3, "keyword", e[43], 485,
     1, 335, 486],
    [1, 25, 484],
    [1, 57, 487],
    [",", 488,
     0, -1],
    [1, 25, 489],
    ["*", 490,
     0, 491,
     0, 487],
    [1, 57, 487],
    [1, 73, 492,
     3, "keyword", e[43], 492,
     1, 335, 490],
    [1, 25, 491],
    [1, 496, 494],
    [1, 25, 495],
    [3, "operator", "->", -1],
    [3, "def", e[0], 497],
    [1, 25, 498],
    [":", 499,
     0, 501],
    [1, 25, 500],
    [1, 335, 501],
    [1, 57, 502],
    [",", 503,
     0, -1],
    [1, 25, 504],
    [3, "def", e[0], 505,
     0, 502],
    [1, 25, 506],
    [":", 507,
     0, 508],
    [1, 25, 509],
    [1, 57, 502],
    [1, 335, 508],
    ["(", 511],
    [1, 25, 512],
    [2, 149, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 513],
    [1, 25, 514],
    [")", 515,
     ":", -1],
    [1, 25, 516],
    ["->", -1],
    ["(", 518],
    [1, 25, 519],
    [1, 636, 520,
     0, 520],
    [1, 25, 521],
    [")", -1],
    [1, 73, -1,
     1, 650, -1,
     3, "keyword", e[44], 523,
     3, "keyword", e[45], 533,
     3, "keyword", e[40], 535,
     0, 545],
    [1, 25, 524],
    [3, "keyword", e[21], 525],
    [1, 25, 526],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 527],
    [1, 25, 528],
    [":", 529,
     0, 530],
    [1, 25, 531],
    [1, 25, 532],
    [1, 365, 530],
    [2, 381, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 534],
    [2, 125, -1, {"name":"Block"}],
    [1, 25, 536],
    [2, 406, 537, {"name":"ParamList"}],
    [1, 25, 538],
    [":", 539,
     0, 540],
    [1, 25, 541],
    [1, 25, 542],
    [3, "keyword", e[27], 543,
     3, "keyword", e[29], 543],
    [2, 125, -1, {"name":"Block"},
     0, -1],
    [1, 25, 544],
    [2, 303, 540, {"name":"ArgList"}],
    [1, 164, 546,
     3, "def property", e[0], 547],
    [1, 25, 545],
    [1, 25, 548],
    [2, 303, 549, {"name":"ArgList"},
     0, 549],
    [1, 25, 550],
    [2, 381, 551, {"name":"ClassBody"},
     0, 551],
    [1, 25, 552],
    [/^[\,\;]/, -1],
    [1, 164, 554,
     3, "type def", e[0], 555],
    [1, 25, 553],
    [1, 25, 556],
    [":", 557,
     0, 559],
    [1, 25, 558],
    [1, 335, 559],
    [1, 57, 560],
    [",", 561,
     0, -1],
    [1, 25, 562],
    [1, 164, 563,
     3, "type def", e[0], 564,
     0, 560],
    [1, 25, 562],
    [1, 25, 565],
    [":", 566,
     0, 567],
    [1, 25, 568],
    [1, 57, 560],
    [1, 335, 567],
    [1, 164, 570,
     3, "def", e[0], 571],
    [1, 25, 569],
    [1, 25, 572],
    [":", 573,
     0, 574],
    [1, 25, 575],
    [1, 25, 576],
    [1, 335, 574],
    [3, "operator", "=", 577,
     0, 579],
    [1, 25, 578],
    [1, 92, 579],
    [1, 57, 580],
    [",", 581,
     0, -1],
    [1, 25, 582],
    [1, 164, 583,
     3, "def", e[0], 584,
     0, 580],
    [1, 25, 582],
    [1, 25, 585],
    [":", 586,
     0, 587],
    [1, 25, 588],
    [1, 25, 589],
    [1, 335, 587],
    [3, "operator", "=", 590,
     0, 591],
    [1, 25, 592],
    [1, 57, 580],
    [1, 92, 591],
    ["(", 594],
    [1, 25, 595],
    [1, 662, 596,
     0, 596],
    [1, 25, 597],
    [")", -1],
    [1, 25, 599],
    [3, "keyword", e[37], -1],
    [[5, 690], 601,
     [5, 693], 602,
     1, 92, 611],
    [3, "operator", "!", 603,
     0, 603],
    [3, "operator", "!", 604,
     0, 604],
    [1, 25, 605],
    [1, 25, 606],
    [3, "keyword", e[8], 607],
    [3, "keyword", e[15], 608],
    [1, 25, 609],
    [1, 25, 610],
    [1, 92, 611],
    [1, 335, 611],
    [1, 57, 612],
    [",", 613,
     0, -1],
    [1, 25, 614],
    [[5, 696], 615,
     [5, 699], 616,
     1, 92, 617,
     0, 612],
    [3, "operator", "!", 618,
     0, 618],
    [3, "operator", "!", 619,
     0, 619],
    [1, 57, 612],
    [1, 25, 620],
    [1, 25, 621],
    [3, "keyword", e[8], 622],
    [3, "keyword", e[15], 623],
    [1, 25, 624],
    [1, 25, 625],
    [1, 92, 617],
    [1, 335, 617],
    [1, 25, 627],
    [3, "keyword", e[41], -1],
    [1, 25, 629],
    [3, "keyword", e[42], -1],
    [e[0], 631],
    [1, 25, 632],
    ["=", -1],
    [e[0], 634],
    [1, 25, 635],
    ["=", -1],
    [[0, [5, 702], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 637,
     0, 638],
    [1, 25, 639],
    [1, 25, 640],
    [":", 638],
    [1, 335, 641],
    [1, 57, 642],
    [",", 643,
     0, -1],
    [1, 25, 644],
    [[0, [5, 705], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 645,
     0, 646,
     0, 642],
    [1, 25, 647],
    [1, 25, 648],
    [":", 646],
    [1, 335, 649],
    [1, 57, 642],
    [1, 164, 651,
     3, "keyword", e[9], 652,
     3, "keyword", e[10], 652,
     1, 708, -1,
     3, "keyword", e[11], 653,
     1, 717, -1,
     1, 191, -1,
     1, 206, -1,
     3, "keyword", e[12], 654],
    [1, 25, 650],
    [1, 25, 655],
    [1, 25, 656],
    [1, 25, 657],
    [3, "type def", e[0], 658],
    [2, 734, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 659],
    [1, 25, 660],
    [1, 25, 661],
    [2, 224, -1, {"name":"ClassSpec"}],
    [2, 237, -1, {"name":"TypeAliasSpec"}],
    [1, 164, 663,
     3, "keyword", e[22], 664,
     3, "def", e[0], 665],
    [1, 25, 662],
    [1, 25, 666],
    [1, 25, 667],
    [3, "def property", e[0], 665],
    [":", 668,
     0, 669],
    [1, 25, 670],
    [1, 25, 671],
    [1, 335, 669],
    [3, "operator", "=", 672,
     0, 674],
    [1, 25, 673],
    [1, 92, 674],
    [1, 57, 675],
    [",", 676,
     0, -1],
    [1, 25, 677],
    [1, 164, 678,
     3, "keyword", e[22], 679,
     3, "def", e[0], 680,
     0, 675],
    [1, 25, 677],
    [1, 25, 681],
    [1, 25, 682],
    [3, "def property", e[0], 680],
    [":", 683,
     0, 684],
    [1, 25, 685],
    [1, 25, 686],
    [1, 335, 684],
    [3, "operator", "=", 687,
     0, 688],
    [1, 25, 689],
    [1, 57, 675],
    [1, 92, 688],
    [/^\!?/, 691],
    [1, 25, 692],
    [3, "keyword", e[8], -1],
    [/^\!?/, 694],
    [1, 25, 695],
    [3, "keyword", e[15], -1],
    [/^\!?/, 697],
    [1, 25, 698],
    [3, "keyword", e[8], -1],
    [/^\!?/, 700],
    [1, 25, 701],
    [3, "keyword", e[15], -1],
    [e[0], 703],
    [1, 25, 704],
    [":", -1],
    [e[0], 706],
    [1, 25, 707],
    [":", -1],
    [3, "keyword", e[21], 709],
    [1, 25, 710],
    [3, "def property", e[0], 711],
    [1, 25, 712],
    [":", 713,
     0, 715],
    [1, 25, 714],
    [1, 365, 715],
    [1, 25, 716],
    [2, 381, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 718],
    [1, 25, 719],
    [2, 385, 720, {"name":"TypeParams"},
     0, 720],
    [1, 25, 721],
    [1, 739, 722],
    [1, 25, 723],
    [3, "keyword", e[23], 724,
     0, 726],
    [1, 25, 725],
    [1, 390, 726],
    [1, 25, 727],
    [3, "operator", "=", 728,
     3, "keyword", e[39], 729,
     0, 732],
    [1, 25, 730],
    [1, 25, 731],
    [1, 92, 732],
    [1, 92, 732],
    [1, 25, 733],
    [/^\;?/, -1],
    [2, 385, 735, {"name":"TypeParams"},
     0, 735],
    [1, 25, 736],
    [3, "def property", e[0], 737],
    [1, 25, 738],
    [2, 411, -1, {"name":"FunctionSpec"}],
    ["(", 740,
     0, 744],
    [1, 25, 741],
    [1, 750, 742],
    [1, 25, 743],
    [")", -1],
    [1, 73, 745,
     3, "def property", e[0], 746],
    [1, 25, 744],
    [1, 25, 747],
    [":", 748,
     0, -1],
    [1, 25, 749],
    [1, 335, -1],
    [1, 739, 751],
    [1, 57, 752],
    [",", 753,
     0, -1],
    [1, 25, 754],
    [1, 739, 755,
     0, 752],
    [1, 57, 752]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
