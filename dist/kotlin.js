(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\()/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 57, 14],
    [1, 57, 15],
    [/^\;?/, 6],
    [1, 57, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 57, 14],
    [1, 57, 12],
    [3, "keyword", e[9], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[27], -1,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     3, "operator", e[14], -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[13], -1,
     1, 73, -1,
     1, 80, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 92, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 73, 31,
     1, 113, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 92, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 124, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 128, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 124, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 124, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 128, -1, {"name":"ParenthesizedExpression"}],
    [1, 57, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     "/*", 56,
     /^\/\/.*/, -1],
    [e[19], 54,
     0, 55],
    [0, 53,
     0, 53],
    [2, 133, 55, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 56,
     "*/", -1],
    [e[4], 57,
     2, 52, 57, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 59,
     3, "string", "\"", 66],
    [2, 144, 59, {"name":"str","token":"string"},
     3, "string", "${", 60,
     3, "string", "$", 61,
     2, 146, 59, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 62],
    [1, 25, 63],
    [1, 92, 64],
    [3, "variable", e[0], 59],
    [1, 25, 65],
    [3, "string", "}", 59],
    [2, 144, 66, {"name":"str","token":"string"},
     3, "string", "${", 67,
     3, "string", "$", 68,
     3, "string", /^(?:(?![\"\$\\]).)+/, 66,
     3, "string", "\"", -1],
    [1, 25, 69],
    [1, 25, 70],
    [1, 92, 71],
    [3, "variable", e[0], 66],
    [1, 25, 72],
    [3, "string", "}", 66],
    [2, 148, 74, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 75],
    [1, 153, -1,
     "[", 76],
    [1, 25, 77],
    [1, 153, 78],
    [1, 25, 79],
    [0, 77,
     "]", -1],
    [1, 163, 81,
     3, "keyword", e[9], 82,
     3, "keyword", e[10], 82,
     1, 164, -1,
     3, "keyword", e[11], 83,
     1, 173, -1,
     3, "keyword", e[12], 84],
    [1, 25, 80],
    [1, 25, 85],
    [1, 25, 86],
    [1, 25, 87],
    [3, "type def", e[0], 88],
    [2, 200, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 89],
    [1, 25, 90],
    [1, 25, 91],
    [2, 205, -1, {"name":"ClassSpec"}],
    [2, 218, -1, {"name":"TypeAliasSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 93,
     3, "meta", e[13], 93,
     1, 73, 93,
     1, 225, 94],
    [1, 25, 92],
    [1, 57, 95],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 96,
     [5, 283], 97,
     3, "operator", e[14], 98,
     "!", 99,
     0, 100,
     3, "keyword", e[1], 101,
     2, 284, 96, {"name":"ArgList"},
     /^(?:\?\.|\.|\:\:)/, 102,
     "[", 103,
     3, "variable callee", [0, [6, 289], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 104,
     0, -1],
    [1, 57, 95],
    [2, 290, 96, {"name":"TypeArgs"}],
    [1, 25, 105],
    [1, 57, 100],
    [3, "keyword", e[8], 98,
     3, "keyword", e[15], 98],
    [1, 57, 106],
    [1, 25, 107],
    [1, 25, 108],
    [1, 25, 109],
    [1, 225, 96],
    ["?", 110,
     0, 98],
    [3, "keyword", e[9], 96,
     3, "property callee", e[36], 96,
     3, "property", e[0], 96,
     2, 128, 96, {"name":"ParenthesizedExpression"}],
    [1, 295, 111],
    [1, 225, 96],
    [1, 57, 98],
    [1, 25, 112],
    ["]", 96],
    ["(", 114,
     0, 118],
    [1, 25, 115],
    [1, 301, 116],
    [1, 25, 117],
    [")", -1],
    [1, 73, 119,
     3, "def", e[0], 120],
    [1, 25, 118],
    [1, 25, 121],
    [":", 122,
     0, -1],
    [1, 25, 123],
    [1, 307, -1],
    ["{", 125],
    [1, 25, 126],
    [2, 26, 127, {"name":"Statement"},
     "}", -1],
    [1, 25, 126],
    ["(", 129],
    [1, 25, 130],
    [1, 92, 131],
    [1, 25, 132],
    [")", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 134,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 135,
     3, "tag", e[18], 142,
     "{", 136],
    [e[16], 134,
     3, "def", e[17], 142,
     "<", 137,
     0, 142],
    [e[16], 135,
     3, "type", e[17], 142,
     0, 142],
    [3, "tag", e[18], 138],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 139],
    [/^[\t ]*/, 140],
    [">", 142],
    [1, 330, 141],
    ["}", 142],
    [e[19], 143,
     0, -1],
    [0, 142,
     0, 142],
    ["\\", 145],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 147],
    [0, 146,
     0, -1],
    ["@", 149],
    [1, 57, 150],
    [[0, [5, 334], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 151,
     0, -1],
    [1, 57, 152],
    [":", -1],
    [3, "meta", e[0], 154],
    [1, 25, 155],
    [2, 290, 156, {"name":"TypeArgs"},
     0, 156],
    [1, 25, 157],
    [".", 158,
     2, 284, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 159],
    [3, "meta", e[0], 160],
    [1, 25, 161],
    [2, 290, 162, {"name":"TypeArgs"},
     0, 162],
    [1, 25, 157],
    [3, "keyword", e[20], -1,
     1, 73, -1],
    [3, "keyword", e[21], 165],
    [1, 25, 166],
    [3, "def", e[0], 167],
    [1, 25, 168],
    [":", 169,
     0, 171],
    [1, 25, 170],
    [1, 337, 171],
    [1, 25, 172],
    [2, 353, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 174],
    [1, 25, 175],
    [2, 357, 176, {"name":"TypeParams"},
     0, 176],
    [1, 25, 177],
    [1, 113, 178],
    [1, 25, 179],
    [3, "keyword", e[23], 180,
     0, 182],
    [1, 25, 181],
    [1, 362, 182],
    [1, 25, 183],
    [3, "operator", "=", 184,
     3, "keyword", e[39], 185,
     0, 188],
    [1, 25, 186],
    [1, 25, 187],
    [1, 92, 188],
    [1, 92, 188],
    [1, 25, 189],
    [/^\;?/, 190],
    [1, 25, 191],
    [1, 378, 192,
     1, 392, 193,
     0, -1],
    [1, 25, 194],
    [1, 25, 195],
    [";", 196,
     0, -1],
    [";", 197],
    [1, 25, 198],
    [1, 25, 199],
    [1, 392, -1],
    [1, 378, -1,
     0, -1],
    [2, 357, 201, {"name":"TypeParams"},
     0, 201],
    [1, 25, 202],
    [3, "def", e[0], 203],
    [1, 25, 204],
    [2, 404, -1, {"name":"FunctionSpec"}],
    [2, 357, 206, {"name":"TypeParams"},
     0, 206],
    [1, 25, 207],
    [2, 417, 208, {"name":"Constructor"},
     0, 208],
    [1, 25, 209],
    [":", 210,
     0, 212],
    [1, 25, 211],
    [1, 337, 212],
    [1, 25, 213],
    [3, "keyword", e[23], 214,
     0, 216],
    [1, 25, 215],
    [1, 362, 216],
    [1, 25, 217],
    [2, 353, -1, {"name":"ClassBody"},
     0, -1],
    [2, 357, 219, {"name":"TypeParams"},
     0, 219],
    [1, 25, 220],
    [3, "operator", "=", 221],
    [1, 25, 222],
    [1, 307, 223],
    [1, 25, 224],
    [/^\;?/, -1],
    [2, 128, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     2, 421, -1, {"name":"LambdaBlock"},
     3, "keyword", e[21], 226,
     3, "keyword", e[11], 232,
     3, "keyword", e[27], 234,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], 238,
     3, "keyword", e[30], 248,
     3, "keyword", e[31], 253,
     3, "keyword", e[32], 268,
     3, "keyword", e[33], 271,
     3, "keyword", e[34], 273,
     3, "keyword", e[35], 279,
     2, 430, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[36], -1,
     3, "variable", e[0], -1],
    [1, 25, 227],
    [":", 228,
     0, 229],
    [1, 25, 230],
    [2, 353, -1, {"name":"ClassBody"}],
    [1, 337, 231],
    [1, 25, 229],
    [1, 25, 233],
    [2, 404, -1, {"name":"FunctionSpec"}],
    [1, 57, 235],
    ["@", 236,
     0, -1],
    [1, 57, 237],
    [e[0], -1],
    [1, 57, 239],
    ["<", 240,
     0, 241],
    [1, 25, 242],
    ["@", 243,
     0, -1],
    [1, 307, 244],
    [1, 57, 245],
    [1, 25, 246],
    [e[0], -1],
    [">", 247],
    [1, 57, 241],
    [1, 25, 249],
    [2, 128, 250, {"name":"ParenthesizedExpression"}],
    [1, 25, 251],
    [2, 124, 252, {"name":"Block"},
     2, 26, 252, {"name":"Statement"},
     ";", 252],
    [2, 431, -1, {"name":"Alternative"}],
    [1, 25, 254],
    ["(", 255],
    [1, 25, 256],
    [1, 73, 257,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 258,
     0, 259],
    [1, 25, 256],
    [1, 25, 260],
    [1, 25, 261],
    [1, 113, 262],
    [1, 92, 263],
    [1, 25, 264],
    [1, 25, 265],
    [3, "operator", "=", 259],
    [")", 266],
    [1, 25, 267],
    [2, 436, -1, {"name":"WhenBody"}],
    [1, 25, 269],
    [2, 124, 270, {"name":"Block"}],
    [2, 445, -1, {"name":"CatchFinally"}],
    [1, 57, 272],
    [1, 92, -1],
    [1, 57, 274],
    ["@", 275,
     0, 276],
    [1, 57, 277],
    [1, 92, -1,
     0, -1],
    [e[0], 278],
    [1, 57, 276],
    [1, 57, 280],
    ["@", 281,
     0, -1],
    [1, 57, 282],
    [e[0], -1],
    [2, 290, -1, {"name":"TypeArgs"}],
    ["(", 285],
    [1, 25, 286],
    [1, 465, 287,
     0, 287],
    [1, 25, 288],
    [")", -1],
    [3, "keyword", e[37], -1],
    ["<", 291],
    [1, 25, 292],
    [1, 485, 293],
    [1, 25, 294],
    [">", -1],
    [1, 92, 296],
    [1, 57, 297],
    [",", 298,
     0, -1],
    [1, 25, 299],
    [1, 92, 300,
     0, 297],
    [1, 57, 297],
    [1, 113, 302],
    [1, 57, 303],
    [",", 304,
     0, -1],
    [1, 25, 305],
    [1, 113, 306,
     0, 303],
    [1, 57, 303],
    [1, 73, 308,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 308,
     3, "keyword", e[38], 327,
     3, "type", e[0], 309,
     [5, 495], 310,
     "(", 311],
    [1, 25, 307],
    [1, 57, 312],
    [2, 502, 313, {"name":"ParamTypeList"}],
    [1, 25, 314],
    [2, 290, 315, {"name":"TypeArgs"},
     0, 316],
    [1, 25, 317],
    [1, 307, 318],
    [1, 57, 316],
    [".", 319,
     0, 327],
    [3, "operator", "->", 320],
    [1, 25, 321],
    [1, 25, 322],
    [1, 25, 323],
    [")", 327],
    [3, "type", e[0], 324],
    [1, 307, 327],
    [1, 57, 325],
    [2, 290, 326, {"name":"TypeArgs"},
     0, 316],
    [1, 57, 316],
    [1, 57, 328],
    ["?", 329,
     0, -1],
    [1, 57, 328],
    [3, "attribute", "{", 331,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 330,
     "\n", 332,
     0, -1],
    [1, 330, 333],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 330],
    [/^(?=\*\/)/, 330,
     3, "attribute", "}", 330],
    [e[0], 335],
    [1, 57, 336],
    [":", -1],
    [1, 163, 338,
     1, 307, 339],
    [1, 25, 337],
    [1, 25, 340],
    [3, "keyword", e[39], 341,
     2, 284, 343, {"name":"ArgList"},
     0, 343],
    [1, 25, 342],
    [1, 92, 343],
    [1, 57, 344],
    [",", 345,
     0, -1],
    [1, 25, 346],
    [1, 163, 347,
     1, 307, 348,
     0, 344],
    [1, 25, 346],
    [1, 25, 349],
    [3, "keyword", e[39], 350,
     2, 284, 351, {"name":"ArgList"},
     0, 351],
    [1, 25, 352],
    [1, 57, 344],
    [1, 92, 351],
    ["{", 354],
    [1, 25, 355],
    [2, 507, 356, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 355],
    ["<", 358],
    [1, 25, 359],
    [1, 538, 360],
    [1, 25, 361],
    [">", -1],
    [1, 73, 363,
     3, "variable", e[0], 364],
    [1, 25, 362],
    [1, 25, 365],
    [":", 366],
    [1, 25, 367],
    [1, 307, 368],
    [1, 57, 369],
    [",", 370,
     0, -1],
    [1, 25, 371],
    [1, 73, 372,
     3, "variable", e[0], 373,
     0, 369],
    [1, 25, 371],
    [1, 25, 374],
    [":", 375],
    [1, 25, 376],
    [1, 307, 377],
    [1, 57, 369],
    [1, 163, 379,
     3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 380],
    [1, 25, 378],
    [1, 25, 381],
    ["(", 382,
     0, 384],
    [1, 25, 383],
    [")", 384],
    [1, 25, 385],
    [":", 386,
     0, 388],
    [1, 25, 387],
    [1, 307, 388],
    [1, 25, 389],
    [2, 124, -1, {"name":"Block"},
     3, "operator", "=", 390],
    [1, 25, 391],
    [1, 92, -1],
    [1, 163, 393,
     3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 394],
    [1, 25, 392],
    [1, 25, 395],
    [2, 554, 396, {"name":"ParamList"},
     0, 396],
    [1, 25, 397],
    [":", 398,
     0, 400],
    [1, 25, 399],
    [1, 307, 400],
    [1, 25, 401],
    [2, 124, -1, {"name":"Block"},
     3, "operator", "=", 402],
    [1, 25, 403],
    [1, 92, -1],
    [2, 554, 405, {"name":"ParamList"}],
    [1, 25, 406],
    [":", 407,
     0, 409],
    [1, 25, 408],
    [1, 307, 409],
    [1, 25, 410],
    [3, "keyword", e[23], 411,
     0, 413],
    [1, 25, 412],
    [1, 362, 413],
    [1, 25, 414],
    [2, 124, -1, {"name":"Block"},
     3, "operator", "=", 415],
    [1, 25, 416],
    [1, 92, -1],
    [1, 163, 418,
     3, "keyword", e[40], 419,
     0, 419],
    [1, 25, 417],
    [1, 25, 420],
    [2, 559, -1, {"name":"ConstructorParamList"}],
    ["{", 422],
    [1, 25, 423],
    [[5, 564], 424,
     0, 427],
    [1, 567, 425],
    [1, 25, 426],
    [3, "operator", "->", 427],
    [1, 25, 428],
    [2, 26, 429, {"name":"Statement"},
     "}", -1],
    [1, 25, 428],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *\()/, -1],
    [[5, 581], 432,
     0, -1],
    [1, 25, 433],
    [3, "keyword", e[37], 434],
    [1, 25, 435],
    [2, 124, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 437],
    [1, 25, 438],
    [3, "keyword", e[37], 439,
     1, 583, 439],
    [1, 25, 440],
    [3, "operator", "->", 441],
    [1, 25, 442],
    [2, 124, 443, {"name":"Block"},
     2, 26, 443, {"name":"Statement"},
     ";", 443],
    [1, 25, 444],
    ["}", -1],
    [[5, 609], 446,
     [5, 611], 461,
     0, -1],
    [1, 25, 447],
    [3, "keyword", e[41], 448],
    [1, 25, 449],
    ["(", 450],
    [1, 25, 451],
    [1, 73, 452,
     3, "def", e[0], 453],
    [1, 25, 451],
    [1, 25, 454],
    [":", 455],
    [1, 25, 456],
    [1, 307, 457],
    [1, 25, 458],
    [")", 459],
    [1, 25, 460],
    [2, 124, 445, {"name":"Block"}],
    [1, 25, 462],
    [3, "keyword", e[42], 463],
    [1, 25, 464],
    [2, 124, -1, {"name":"Block"}],
    [1, 73, 466,
     [0, [5, 613], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 467,
     0, 468],
    [1, 25, 465],
    [1, 25, 469],
    [1, 25, 470],
    [3, "operator", "=", 468],
    [/^\*?/, 471],
    [1, 25, 472],
    [1, 92, 473],
    [1, 57, 474],
    [",", 475,
     0, -1],
    [1, 25, 476],
    [1, 73, 477,
     [0, [5, 616], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 478,
     0, 479,
     0, 474],
    [1, 25, 476],
    [1, 25, 480],
    [1, 25, 481],
    [3, "operator", "=", 479],
    [/^\*?/, 482],
    [1, 25, 483],
    [1, 92, 484],
    [1, 57, 474],
    ["*", 488,
     0, 486],
    [1, 73, 487,
     3, "keyword", e[43], 487,
     1, 307, 488],
    [1, 25, 486],
    [1, 57, 489],
    [",", 490,
     0, -1],
    [1, 25, 491],
    ["*", 492,
     0, 493,
     0, 489],
    [1, 57, 489],
    [1, 73, 494,
     3, "keyword", e[43], 494,
     1, 307, 492],
    [1, 25, 493],
    ["(", 496],
    [1, 25, 497],
    [2, 148, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 498],
    [1, 25, 499],
    [")", 500,
     ":", -1],
    [1, 25, 501],
    ["->", -1],
    ["(", 503],
    [1, 25, 504],
    [1, 619, 505,
     0, 505],
    [1, 25, 506],
    [")", -1],
    [1, 73, -1,
     1, 633, -1,
     3, "keyword", e[44], 508,
     3, "keyword", e[45], 518,
     3, "keyword", e[40], 520,
     0, 530],
    [1, 25, 509],
    [3, "keyword", e[21], 510],
    [1, 25, 511],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 512],
    [1, 25, 513],
    [":", 514,
     0, 515],
    [1, 25, 516],
    [1, 25, 517],
    [1, 337, 515],
    [2, 353, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 519],
    [2, 124, -1, {"name":"Block"}],
    [1, 25, 521],
    [2, 554, 522, {"name":"ParamList"}],
    [1, 25, 523],
    [":", 524,
     0, 525],
    [1, 25, 526],
    [1, 25, 527],
    [3, "keyword", e[27], 528,
     3, "keyword", e[29], 528],
    [2, 124, -1, {"name":"Block"},
     0, -1],
    [1, 25, 529],
    [2, 284, 525, {"name":"ArgList"}],
    [1, 163, 531,
     3, "def property", e[0], 532],
    [1, 25, 530],
    [1, 25, 533],
    [2, 284, 534, {"name":"ArgList"},
     0, 534],
    [1, 25, 535],
    [2, 353, 536, {"name":"ClassBody"},
     0, 536],
    [1, 25, 537],
    [/^[\,\;]/, -1],
    [1, 163, 539,
     3, "type def", e[0], 540],
    [1, 25, 538],
    [1, 25, 541],
    [":", 542,
     0, 544],
    [1, 25, 543],
    [1, 307, 544],
    [1, 57, 545],
    [",", 546,
     0, -1],
    [1, 25, 547],
    [1, 163, 548,
     3, "type def", e[0], 549,
     0, 545],
    [1, 25, 547],
    [1, 25, 550],
    [":", 551,
     0, 552],
    [1, 25, 553],
    [1, 57, 545],
    [1, 307, 552],
    ["(", 555],
    [1, 25, 556],
    [1, 645, 557,
     0, 557],
    [1, 25, 558],
    [")", -1],
    ["(", 560],
    [1, 25, 561],
    [1, 669, 562,
     0, 562],
    [1, 25, 563],
    [")", -1],
    [1, 567, 565],
    [1, 25, 566],
    [3, "operator", "->", -1],
    [3, "def", e[0], 568],
    [1, 25, 569],
    [":", 570,
     0, 572],
    [1, 25, 571],
    [1, 307, 572],
    [1, 57, 573],
    [",", 574,
     0, -1],
    [1, 25, 575],
    [3, "def", e[0], 576,
     0, 573],
    [1, 25, 577],
    [":", 578,
     0, 579],
    [1, 25, 580],
    [1, 57, 573],
    [1, 307, 579],
    [1, 25, 582],
    [3, "keyword", e[37], -1],
    [[5, 697], 584,
     [5, 700], 585,
     1, 92, 594],
    [3, "operator", "!", 586,
     0, 586],
    [3, "operator", "!", 587,
     0, 587],
    [1, 25, 588],
    [1, 25, 589],
    [3, "keyword", e[8], 590],
    [3, "keyword", e[15], 591],
    [1, 25, 592],
    [1, 25, 593],
    [1, 92, 594],
    [1, 307, 594],
    [1, 57, 595],
    [",", 596,
     0, -1],
    [1, 25, 597],
    [[5, 703], 598,
     [5, 706], 599,
     1, 92, 600,
     0, 595],
    [3, "operator", "!", 601,
     0, 601],
    [3, "operator", "!", 602,
     0, 602],
    [1, 57, 595],
    [1, 25, 603],
    [1, 25, 604],
    [3, "keyword", e[8], 605],
    [3, "keyword", e[15], 606],
    [1, 25, 607],
    [1, 25, 608],
    [1, 92, 600],
    [1, 307, 600],
    [1, 25, 610],
    [3, "keyword", e[41], -1],
    [1, 25, 612],
    [3, "keyword", e[42], -1],
    [e[0], 614],
    [1, 25, 615],
    ["=", -1],
    [e[0], 617],
    [1, 25, 618],
    ["=", -1],
    [[0, [5, 709], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 620,
     0, 621],
    [1, 25, 622],
    [1, 25, 623],
    [":", 621],
    [1, 307, 624],
    [1, 57, 625],
    [",", 626,
     0, -1],
    [1, 25, 627],
    [[0, [5, 712], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 628,
     0, 629,
     0, 625],
    [1, 25, 630],
    [1, 25, 631],
    [":", 629],
    [1, 307, 632],
    [1, 57, 625],
    [1, 163, 634,
     3, "keyword", e[9], 635,
     3, "keyword", e[10], 635,
     1, 715, -1,
     3, "keyword", e[11], 636,
     1, 724, -1,
     3, "keyword", e[12], 637],
    [1, 25, 633],
    [1, 25, 638],
    [1, 25, 639],
    [1, 25, 640],
    [3, "type def", e[0], 641],
    [2, 751, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 642],
    [1, 25, 643],
    [1, 25, 644],
    [2, 205, -1, {"name":"ClassSpec"}],
    [2, 218, -1, {"name":"TypeAliasSpec"}],
    [1, 163, 646,
     3, "def", e[0], 647],
    [1, 25, 645],
    [1, 25, 648],
    [":", 649,
     0, 650],
    [1, 25, 651],
    [1, 25, 652],
    [1, 307, 650],
    [3, "operator", "=", 653,
     0, 655],
    [1, 25, 654],
    [1, 92, 655],
    [1, 57, 656],
    [",", 657,
     0, -1],
    [1, 25, 658],
    [1, 163, 659,
     3, "def", e[0], 660,
     0, 656],
    [1, 25, 658],
    [1, 25, 661],
    [":", 662,
     0, 663],
    [1, 25, 664],
    [1, 25, 665],
    [1, 307, 663],
    [3, "operator", "=", 666,
     0, 667],
    [1, 25, 668],
    [1, 57, 656],
    [1, 92, 667],
    [1, 163, 670,
     3, "keyword", e[22], 671,
     3, "def", e[0], 672],
    [1, 25, 669],
    [1, 25, 673],
    [1, 25, 674],
    [3, "def property", e[0], 672],
    [":", 675,
     0, 676],
    [1, 25, 677],
    [1, 25, 678],
    [1, 307, 676],
    [3, "operator", "=", 679,
     0, 681],
    [1, 25, 680],
    [1, 92, 681],
    [1, 57, 682],
    [",", 683,
     0, -1],
    [1, 25, 684],
    [1, 163, 685,
     3, "keyword", e[22], 686,
     3, "def", e[0], 687,
     0, 682],
    [1, 25, 684],
    [1, 25, 688],
    [1, 25, 689],
    [3, "def property", e[0], 687],
    [":", 690,
     0, 691],
    [1, 25, 692],
    [1, 25, 693],
    [1, 307, 691],
    [3, "operator", "=", 694,
     0, 695],
    [1, 25, 696],
    [1, 57, 682],
    [1, 92, 695],
    [/^\!?/, 698],
    [1, 25, 699],
    [3, "keyword", e[8], -1],
    [/^\!?/, 701],
    [1, 25, 702],
    [3, "keyword", e[15], -1],
    [/^\!?/, 704],
    [1, 25, 705],
    [3, "keyword", e[8], -1],
    [/^\!?/, 707],
    [1, 25, 708],
    [3, "keyword", e[15], -1],
    [e[0], 710],
    [1, 25, 711],
    [":", -1],
    [e[0], 713],
    [1, 25, 714],
    [":", -1],
    [3, "keyword", e[21], 716],
    [1, 25, 717],
    [3, "def property", e[0], 718],
    [1, 25, 719],
    [":", 720,
     0, 722],
    [1, 25, 721],
    [1, 337, 722],
    [1, 25, 723],
    [2, 353, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 725],
    [1, 25, 726],
    [2, 357, 727, {"name":"TypeParams"},
     0, 727],
    [1, 25, 728],
    [1, 756, 729],
    [1, 25, 730],
    [3, "keyword", e[23], 731,
     0, 733],
    [1, 25, 732],
    [1, 362, 733],
    [1, 25, 734],
    [3, "operator", "=", 735,
     3, "keyword", e[39], 736,
     0, 739],
    [1, 25, 737],
    [1, 25, 738],
    [1, 92, 739],
    [1, 92, 739],
    [1, 25, 740],
    [/^\;?/, 741],
    [1, 25, 742],
    [1, 378, 743,
     1, 392, 744,
     0, -1],
    [1, 25, 745],
    [1, 25, 746],
    [";", 747,
     0, -1],
    [";", 748],
    [1, 25, 749],
    [1, 25, 750],
    [1, 392, -1],
    [1, 378, -1,
     0, -1],
    [2, 357, 752, {"name":"TypeParams"},
     0, 752],
    [1, 25, 753],
    [3, "def property", e[0], 754],
    [1, 25, 755],
    [2, 404, -1, {"name":"FunctionSpec"}],
    ["(", 757,
     0, 761],
    [1, 25, 758],
    [1, 767, 759],
    [1, 25, 760],
    [")", -1],
    [1, 73, 762,
     3, "def property", e[0], 763],
    [1, 25, 761],
    [1, 25, 764],
    [":", 765,
     0, -1],
    [1, 25, 766],
    [1, 307, -1],
    [1, 756, 768],
    [1, 57, 769],
    [",", 770,
     0, -1],
    [1, 25, 771],
    [1, 756, 772,
     0, 769],
    [1, 57, 769]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
