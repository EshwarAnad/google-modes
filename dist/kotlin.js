(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^in(?![a-zA-Z¡-￿_0-9])/, /^is(?![a-zA-Z¡-￿_0-9])/, /^\@(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\()/, /^else(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    [2, 7, 4, {"name":"TopItem"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[4], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[7], -1,
     3, "atom", e[27], -1,
     3, "number", e[28], -1,
     2, 26, -1, {"name":"string","token":"string"},
     3, "string-2", e[29], -1,
     3, "operator", e[23], -1,
     2, 29, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [[1, " ", "\t", "\n", "\r"], 6,
     2, 29, 6, {"name":"comment","token":"comment"},
     0, -1],
    [3, "keyword", e[0], 8,
     3, "keyword", e[1], 15,
     1, 34, -1],
    [1, 6, 9],
    [3, "variable package", e[2], 10],
    [1, 6, 11],
    [".", 12,
     /^\;?/, -1],
    [1, 6, 13],
    [3, "variable package", e[2], 14],
    [1, 6, 11],
    [1, 6, 16],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 17,
     "*", 18,
     3, "def", e[2], 19],
    [1, 6, 20],
    [1, 6, 21],
    [1, 6, 22],
    [".", 23],
    [/^\;?/, -1],
    [3, "keyword", e[3], 24,
     0, 18],
    [1, 6, 16],
    [1, 6, 25],
    [3, "def", e[2], 18],
    ["\"", 27],
    ["\\", 28,
     /^(?!\")./, 27,
     "\"", -1],
    [/^[^]/, 27],
    [/^\/\*\*(?!\/)/, 30,
     "/*", 33,
     /^\/\/.*/, -1],
    [e[14], 31,
     0, 32],
    [0, 30,
     0, 30],
    [2, 99, 32, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 33,
     "*/", -1],
    [1, 110, 35,
     3, "keyword", e[4], 36,
     3, "keyword", e[5], 36,
     3, "keyword", e[6], 37,
     2, 111, -1, {"name":"FunctionDeclaration"},
     3, "keyword", e[7], 38,
     3, "keyword", e[8], 39],
    [1, 6, 34],
    [1, 6, 40],
    [1, 6, 41],
    [1, 6, 42],
    [1, 6, 43],
    [3, "def", e[2], 44],
    [3, "def", e[2], 45],
    [2, 130, 46, {"name":"TypeParams"},
     0, 46],
    [3, "def", e[2], 47],
    [1, 6, 48],
    [1, 6, 49],
    [1, 6, 50],
    [1, 6, 51],
    [2, 130, 52, {"name":"TypeParams"},
     0, 52],
    [":", 53,
     0, 54],
    [1, 135, 55],
    [2, 130, 56, {"name":"TypeParams"},
     0, 56],
    [1, 6, 57],
    [1, 6, 58],
    [1, 6, 59],
    [1, 6, 60],
    [1, 6, 61],
    [1, 110, 62,
     3, "keyword", e[9], 63,
     0, 63,
     0, 64],
    [1, 146, 54],
    [2, 162, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[10], 65,
     0, 66],
    [3, "operator", "=", 67],
    [1, 6, 57],
    [1, 6, 68],
    [1, 6, 69],
    [1, 6, 70],
    [1, 6, 71],
    [1, 6, 72],
    [2, 191, 64, {"name":"ParamList"}],
    [":", 73,
     0, 74],
    [1, 196, 66],
    [3, "operator", "=", 75,
     3, "keyword", e[17], 76,
     0, 77],
    [1, 212, 78],
    [1, 6, 79],
    [1, 6, 80],
    [1, 6, 81],
    [1, 6, 82],
    [1, 6, 83],
    [1, 6, 84],
    [1, 146, 74],
    [3, "keyword", e[10], 85,
     0, 86],
    [1, 231, 77],
    [1, 231, 77],
    [/^\;?/, 87],
    [/^\;?/, -1],
    [1, 6, 88],
    [1, 6, 89],
    [1, 6, 90],
    [1, 196, 86],
    [2, 162, -1, {"name":"ClassBody"},
     0, -1],
    [1, 252, 91,
     1, 266, 92,
     0, -1],
    [1, 6, 93],
    [1, 6, 94],
    [/^\;?/, 95,
     0, -1],
    [/^\;?/, 96],
    [1, 6, 97],
    [1, 6, 98],
    [1, 266, -1],
    [1, 252, -1,
     0, -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 100,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 101,
     3, "tag", e[13], 108,
     "{", 102],
    [e[11], 100,
     3, "def", e[12], 108,
     "<", 103,
     0, 108],
    [e[11], 101,
     3, "type", e[12], 108,
     0, 108],
    [3, "tag", e[13], 104],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 105],
    [/^[\t ]*/, 106],
    [">", 108],
    [1, 278, 107],
    ["}", 108],
    [e[14], 109,
     0, -1],
    [0, 108,
     0, 108],
    [3, "keyword", e[15], -1,
     1, 282, -1],
    [3, "keyword", e[16], 112],
    [1, 6, 113],
    [2, 130, 114, {"name":"TypeParams"},
     0, 114],
    [1, 6, 115],
    [3, "def", e[2], 116],
    [1, 6, 117],
    [2, 191, 118, {"name":"ParamList"}],
    [1, 6, 119],
    [":", 120,
     0, 122],
    [1, 6, 121],
    [1, 212, 122],
    [1, 6, 123],
    [3, "keyword", e[10], 124,
     0, 126],
    [1, 6, 125],
    [1, 196, 126],
    [1, 6, 127],
    [2, 295, -1, {"name":"Block"},
     3, "operator", "=", 128],
    [1, 6, 129],
    [1, 231, -1],
    ["<", 131],
    [1, 6, 132],
    [1, 299, 133],
    [1, 6, 134],
    [">", -1],
    ["(", 136,
     0, 140],
    [1, 6, 137],
    [1, 315, 138],
    [1, 6, 139],
    [")", -1],
    [1, 282, 141,
     3, "def", e[2], 142],
    [1, 6, 140],
    [1, 6, 143],
    [":", 144,
     0, -1],
    [1, 6, 145],
    [1, 212, -1],
    [1, 110, 147,
     1, 212, 148],
    [1, 6, 146],
    [1, 6, 149],
    [3, "keyword", e[17], 150,
     2, 321, 152, {"name":"ArgList"},
     0, 152],
    [1, 6, 151],
    [1, 231, 152],
    [1, 6, 153],
    [",", 154,
     0, -1],
    [1, 6, 155],
    [1, 110, 156,
     1, 212, 157,
     0, 158],
    [1, 6, 155],
    [1, 6, 159],
    [1, 6, 153],
    [3, "keyword", e[17], 160,
     2, 321, 158, {"name":"ArgList"},
     0, 158],
    [1, 6, 161],
    [1, 231, 158],
    ["{", 163],
    [1, 6, 164],
    [1, 282, 165,
     1, 34, 166,
     3, "keyword", e[18], 167,
     3, "keyword", e[19], 168,
     3, "keyword", e[9], 169,
     1, 326, 170,
     "}", -1],
    [1, 6, 164],
    [1, 6, 164],
    [1, 6, 171],
    [1, 6, 172],
    [1, 6, 173],
    [1, 6, 174],
    [3, "keyword", e[6], 175],
    [2, 295, 166, {"name":"Block"}],
    [2, 191, 176, {"name":"ParamList"}],
    [";", 166],
    [1, 6, 177],
    [1, 6, 178],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 179],
    [":", 180,
     0, 181],
    [1, 6, 182],
    [1, 6, 183],
    [1, 6, 184],
    [":", 185,
     0, 186],
    [3, "keyword", e[20], 187,
     3, "keyword", e[21], 187],
    [2, 295, 166, {"name":"Block"},
     0, 166],
    [1, 6, 188],
    [1, 6, 189],
    [1, 6, 190],
    [1, 146, 186],
    [2, 162, 166, {"name":"ClassBody"},
     0, 166],
    [2, 321, 181, {"name":"ArgList"}],
    ["(", 192],
    [1, 6, 193],
    [1, 342, 194,
     0, 194],
    [1, 6, 195],
    [")", -1],
    [1, 282, 197,
     3, "variable", e[2], 198],
    [1, 6, 196],
    [1, 6, 199],
    [":", 200],
    [1, 6, 201],
    [1, 212, 202],
    [1, 6, 203],
    [",", 204,
     0, -1],
    [1, 6, 205],
    [1, 282, 206,
     3, "variable", e[2], 207,
     0, 208],
    [1, 6, 205],
    [1, 6, 209],
    [1, 6, 203],
    [":", 210],
    [1, 6, 211],
    [1, 212, 208],
    [1, 282, 213,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 213,
     3, "keyword", e[22], 228,
     3, "type", e[2], 214,
     [5, 370], 215,
     "(", 216],
    [1, 6, 212],
    [1, 6, 217],
    [2, 191, 218, {"name":"ParamList"}],
    [1, 6, 219],
    [".", 220,
     0, 228],
    [1, 6, 221],
    [1, 212, 222],
    [1, 6, 223],
    [3, "operator", "->", 224],
    [1, 6, 225],
    [3, "type", e[2], 226],
    [1, 6, 227],
    [")", 228],
    [1, 6, 217],
    [1, 212, 228],
    [1, 6, 229],
    ["?", 230,
     0, -1],
    [1, 6, 229],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 232,
     1, 375, 233],
    [1, 6, 231],
    [1, 6, 234],
    [[7, "noNL"], 235,
     0, -1],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 236,
     [5, 456], 237,
     3, "operator", e[23], 238,
     3, "keyword", e[24], 238,
     3, "keyword", e[25], 238,
     3, "keyword", e[3], 239,
     2, 321, 236, {"name":"ArgList"},
     /^\??/, 240,
     "::", 241,
     "[", 242,
     3, "variable callee", e[2], 243],
    [1, 6, 234],
    [2, 457, 236, {"name":"TypeArgs"}],
    [1, 6, 244],
    [1, 6, 245],
    [1, 6, 246],
    [1, 6, 247],
    [1, 6, 248],
    [1, 6, 249],
    [1, 375, 236],
    [/^\??/, 238],
    [".", 241],
    [3, "keyword", e[4], 236,
     3, "property callee", e[36], 236,
     3, "property", e[2], 236,
     2, 462, 236, {"name":"ParenthesizedExpression"}],
    [1, 467, 250],
    [1, 375, 236],
    [1, 6, 251],
    ["]", 236],
    [1, 110, 253,
     3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 254],
    [1, 6, 252],
    [1, 6, 255],
    ["(", 256,
     0, 258],
    [1, 6, 257],
    [")", 258],
    [1, 6, 259],
    [":", 260,
     0, 262],
    [1, 6, 261],
    [1, 212, 262],
    [1, 6, 263],
    [2, 295, -1, {"name":"Block"},
     3, "operator", "=", 264],
    [1, 6, 265],
    [1, 231, -1],
    [1, 110, 267,
     3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 268],
    [1, 6, 266],
    [1, 6, 269],
    [2, 191, 270, {"name":"ParamList"},
     0, 270],
    [1, 6, 271],
    [":", 272,
     0, 274],
    [1, 6, 273],
    [1, 212, 274],
    [1, 6, 275],
    [2, 295, -1, {"name":"Block"},
     3, "operator", "=", 276],
    [1, 6, 277],
    [1, 231, -1],
    [3, "attribute", "{", 279,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 278,
     "\n", 280,
     0, -1],
    [1, 278, 281],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 278],
    [/^(?=\*\/)/, 278,
     3, "attribute", "}", 278],
    [3, "meta", e[26], 283],
    [1, 6, 284],
    [/^\:?/, 285],
    [1, 6, 286],
    [1, 212, 287,
     "[", 288],
    [1, 6, 289],
    [1, 6, 290],
    [2, 321, -1, {"name":"ArgList"},
     0, -1],
    [1, 212, 291],
    [1, 6, 292],
    [2, 321, 293, {"name":"ArgList"},
     0, 293],
    [1, 6, 294],
    [0, 290,
     "]", -1],
    ["{", 296],
    [1, 6, 297],
    [2, 473, 298, {"name":"Statement"},
     "}", -1],
    [1, 6, 297],
    [1, 110, 300,
     3, "type", e[2], 301],
    [1, 6, 299],
    [1, 6, 302],
    [":", 303,
     0, 305],
    [1, 6, 304],
    [1, 212, 305],
    [1, 6, 306],
    [",", 307,
     0, -1],
    [1, 6, 308],
    [1, 110, 309,
     3, "type", e[2], 310,
     0, 311],
    [1, 6, 308],
    [1, 6, 312],
    [1, 6, 306],
    [":", 313,
     0, 311],
    [1, 6, 314],
    [1, 212, 311],
    [1, 135, 316],
    [1, 6, 317],
    [",", 318,
     0, -1],
    [1, 6, 319],
    [1, 135, 320,
     0, 320],
    [1, 6, 317],
    ["(", 322],
    [1, 6, 323],
    [1, 508, 324,
     0, 324],
    [1, 6, 325],
    [")", -1],
    [1, 110, 327,
     3, "def", e[2], 328],
    [1, 6, 326],
    [1, 6, 329],
    [2, 321, 330, {"name":"ArgList"},
     0, 330],
    [1, 6, 331],
    [2, 162, 332, {"name":"ClassBody"},
     0, 332],
    [1, 6, 333],
    [",", 334,
     0, -1],
    [1, 6, 335],
    [1, 110, 336,
     3, "def", e[2], 337,
     0, 338],
    [1, 6, 335],
    [1, 6, 339],
    [1, 6, 333],
    [2, 321, 340, {"name":"ArgList"},
     0, 340],
    [1, 6, 341],
    [2, 162, 338, {"name":"ClassBody"},
     0, 338],
    [1, 110, 343,
     3, "keyword", e[7], 344,
     0, 344],
    [1, 6, 342],
    [1, 6, 345],
    [3, "def", e[2], 346],
    [1, 6, 347],
    [":", 348],
    [1, 6, 349],
    [1, 212, 350],
    [1, 6, 351],
    [3, "operator", "=", 352,
     0, 354],
    [1, 6, 353],
    [1, 231, 354],
    [1, 6, 355],
    [",", 356,
     0, -1],
    [1, 6, 357],
    [1, 110, 358,
     3, "keyword", e[7], 359,
     0, 359,
     0, 360],
    [1, 6, 357],
    [1, 6, 361],
    [1, 6, 355],
    [3, "def", e[2], 362],
    [1, 6, 363],
    [":", 364],
    [1, 6, 365],
    [1, 212, 366],
    [1, 6, 367],
    [3, "operator", "=", 368,
     0, 360],
    [1, 6, 369],
    [1, 231, 360],
    ["(", 371],
    [1, 6, 372],
    [3, "meta", e[26], -1,
     e[2], 373],
    [1, 6, 374],
    [":", -1],
    [[5, 528], 376,
     2, 462, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[27], -1,
     3, "number", e[28], -1,
     2, 26, -1, {"name":"string","token":"string"},
     3, "string-2", e[29], -1,
     2, 533, -1, {"name":"Lambda"},
     3, "keyword", e[6], 377,
     3, "keyword", e[20], 383,
     3, "keyword", e[21], 387,
     3, "keyword", e[30], 397,
     3, "keyword", e[31], 409,
     3, "keyword", e[32], 424,
     3, "keyword", e[33], 444,
     3, "keyword", e[34], 446,
     3, "keyword", e[35], 452,
     3, "variable callee", e[36], -1,
     3, "variable", e[2], -1],
    [2, 542, -1, {"name":"FunctionExpression"}],
    [1, 6, 378],
    [":", 379,
     0, 380],
    [1, 6, 381],
    [1, 6, 382],
    [1, 146, 380],
    [2, 162, -1, {"name":"ClassBody"}],
    [1, 6, 384],
    ["@", 385,
     0, -1],
    [1, 6, 386],
    [e[2], -1],
    [1, 6, 388],
    ["<", 389,
     0, 390],
    [1, 6, 391],
    [1, 6, 392],
    [1, 212, 393],
    ["@", 394,
     0, -1],
    [1, 6, 395],
    [1, 6, 396],
    [">", 390],
    [e[2], -1],
    [1, 6, 398],
    ["(", 399],
    [1, 6, 400],
    [1, 231, 401],
    [1, 6, 402],
    [")", 403],
    [1, 6, 404],
    [2, 295, 405, {"name":"Block"},
     2, 473, 405, {"name":"Statement"},
     ";", 405],
    [1, 6, 406],
    [3, "keyword", e[37], 407,
     0, -1],
    [1, 6, 408],
    [2, 295, -1, {"name":"Block"},
     2, 473, -1, {"name":"Statement"},
     ";", -1],
    [1, 6, 410],
    ["(", 411],
    [1, 6, 412],
    [1, 282, 413,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 414,
     0, 415],
    [1, 6, 412],
    [1, 6, 416],
    [1, 6, 417],
    [1, 135, 418],
    [1, 231, 419],
    [1, 6, 420],
    [1, 6, 421],
    [3, "operator", "=", 415],
    [")", 422],
    [1, 6, 423],
    [2, 555, -1, {"name":"WhenBody"}],
    [1, 6, 425],
    [2, 295, 426, {"name":"Block"}],
    [1, 6, 427],
    [3, "keyword", e[38], 428,
     3, "keyword", e[39], 429,
     0, -1],
    [1, 6, 430],
    [1, 6, 431],
    ["(", 432],
    [2, 295, -1, {"name":"Block"}],
    [1, 6, 433],
    [1, 282, 434,
     3, "def", e[2], 435],
    [1, 6, 433],
    [1, 6, 436],
    [":", 437],
    [1, 6, 438],
    [1, 212, 439],
    [1, 6, 440],
    [")", 441],
    [1, 6, 442],
    [2, 295, 443, {"name":"Block"}],
    [1, 6, 427],
    [1, 6, 445],
    [1, 231, -1],
    [1, 6, 447],
    ["@", 448,
     0, 449],
    [1, 6, 450],
    [1, 6, 451],
    [e[2], 449],
    [1, 231, -1],
    [1, 6, 453],
    ["@", 454,
     0, -1],
    [1, 6, 455],
    [e[2], -1],
    [2, 457, -1, {"name":"TypeArgs"}],
    ["<", 458],
    [1, 6, 459],
    [1, 564, 460],
    [1, 6, 461],
    [">", -1],
    ["(", 463],
    [1, 6, 464],
    [1, 231, 465],
    [1, 6, 466],
    [")", -1],
    [1, 231, 468],
    [1, 6, 469],
    [",", 470,
     0, -1],
    [1, 6, 471],
    [1, 231, 472,
     0, 472],
    [1, 6, 469],
    [3, "meta", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, 474,
     1, 282, 474,
     1, 34, -1,
     3, "keyword", e[40], 475,
     3, "keyword", e[41], 476,
     3, "keyword", e[42], 477,
     1, 231, 478,
     ";", -1],
    [1, 6, 473],
    [1, 6, 479],
    [1, 6, 480],
    [1, 6, 481],
    [1, 6, 482],
    ["(", 483],
    ["(", 484],
    [2, 295, 485, {"name":"Block"},
     2, 473, 485, {"name":"Statement"}],
    [/^\;?/, -1],
    [1, 6, 486],
    [1, 6, 487],
    [1, 6, 488],
    [1, 282, 489,
     1, 135, 490],
    [1, 231, 491],
    [3, "keyword", e[41], 492],
    [1, 6, 486],
    [1, 6, 493],
    [1, 6, 494],
    [1, 6, 495],
    [3, "keyword", e[24], 496],
    [")", 497],
    ["(", 498],
    [1, 6, 499],
    [1, 6, 500],
    [1, 6, 501],
    [1, 231, 502],
    [2, 295, -1, {"name":"Block"},
     2, 473, -1, {"name":"Statement"},
     ";", -1],
    [1, 231, 503],
    [1, 6, 504],
    [1, 6, 505],
    [")", 506],
    [")", -1],
    [1, 6, 507],
    [2, 295, -1, {"name":"Block"},
     2, 473, -1, {"name":"Statement"}],
    [1, 282, 509,
     [0, [5, 574], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 510,
     0, 511],
    [1, 6, 508],
    [1, 6, 512],
    [1, 6, 513],
    [3, "operator", "=", 511],
    [/^\*?/, 514],
    [1, 6, 515],
    [1, 231, 516],
    [1, 6, 517],
    [",", 518,
     0, -1],
    [1, 6, 519],
    [1, 282, 520,
     [0, [5, 577], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 521,
     0, 522,
     0, 523],
    [1, 6, 519],
    [1, 6, 524],
    [1, 6, 525],
    [1, 6, 517],
    [3, "operator", "=", 522],
    [/^\*?/, 526],
    [1, 6, 527],
    [1, 231, 523],
    ["(", 529],
    [1, 6, 530],
    [3, "meta", e[26], -1,
     e[2], 531],
    [1, 6, 532],
    [":", -1],
    ["{", 534],
    [1, 6, 535],
    [[5, 580], 536,
     0, 539],
    [1, 135, 537],
    [1, 6, 538],
    [3, "operator", "->", 539],
    [1, 6, 540],
    [2, 473, 541, {"name":"Statement"},
     "}", -1],
    [1, 6, 540],
    [2, 191, 543, {"name":"ParamList"}],
    [1, 6, 544],
    [":", 545,
     0, 547],
    [1, 6, 546],
    [1, 212, 547],
    [1, 6, 548],
    [3, "keyword", e[10], 549,
     0, 551],
    [1, 6, 550],
    [1, 196, 551],
    [1, 6, 552],
    [2, 295, -1, {"name":"Block"},
     3, "operator", "=", 553],
    [1, 6, 554],
    [1, 231, -1],
    ["{", 556],
    [1, 6, 557],
    [3, "keyword", e[37], 558,
     1, 583, 558],
    [1, 6, 559],
    [3, "operator", "->", 560],
    [1, 6, 561],
    [2, 295, 562, {"name":"Block"},
     2, 473, 562, {"name":"Statement"},
     ";", 562],
    [1, 6, 563],
    ["}", -1],
    ["*", 567,
     0, 565],
    [1, 282, 566,
     3, "keyword", e[43], 566,
     1, 212, 567],
    [1, 6, 565],
    [1, 6, 568],
    [",", 569,
     0, -1],
    [1, 6, 570],
    ["*", 571,
     0, 572,
     0, 571],
    [1, 6, 568],
    [1, 282, 573,
     3, "keyword", e[43], 573,
     1, 212, 571],
    [1, 6, 572],
    [e[2], 575],
    [1, 6, 576],
    ["=", -1],
    [e[2], 578],
    [1, 6, 579],
    ["=", -1],
    [1, 135, 581],
    [1, 6, 582],
    ["->", -1],
    [[5, 609], 584,
     [5, 612], 585,
     1, 231, 594],
    [3, "operator", "!", 586,
     0, 586],
    [3, "operator", "!", 587,
     0, 587],
    [1, 6, 588],
    [1, 6, 589],
    [3, "keyword", e[24], 590],
    [3, "keyword", e[25], 591],
    [1, 6, 592],
    [1, 6, 593],
    [1, 231, 594],
    [1, 212, 594],
    [1, 6, 595],
    [",", 596,
     0, -1],
    [1, 6, 597],
    [[5, 615], 598,
     [5, 618], 599,
     1, 231, 600,
     0, 600],
    [3, "operator", "!", 601,
     0, 601],
    [3, "operator", "!", 602,
     0, 602],
    [1, 6, 595],
    [1, 6, 603],
    [1, 6, 604],
    [3, "keyword", e[24], 605],
    [3, "keyword", e[25], 606],
    [1, 6, 607],
    [1, 6, 608],
    [1, 231, 600],
    [1, 212, 600],
    [/^\!?/, 610],
    [1, 6, 611],
    [3, "keyword", e[24], -1],
    [/^\!?/, 613],
    [1, 6, 614],
    [3, "keyword", e[25], -1],
    [/^\!?/, 616],
    [1, 6, 617],
    [3, "keyword", e[24], -1],
    [/^\!?/, 619],
    [1, 6, 620],
    [3, "keyword", e[25], -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}", ObjectPattern: "}", EnumBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && brack != ")") { return base }
      return base + config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^(else\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionDeclaration", "Lambda", "FunctionExpression", "ForStatement"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar, {
        predicates: {noNL: noNL}
      });
      this.conf = conf;
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.conf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  function noNL(string, pos) {
    return /\S/.test(string.slice(0, pos))
  }

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
