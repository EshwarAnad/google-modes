(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 57, 14],
    [1, 57, 15],
    [/^\;?/, 6],
    [1, 57, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 57, 14],
    [1, 57, 12],
    [3, "keyword", e[9], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[27], -1,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     3, "operator", e[14], -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[13], -1,
     1, 73, -1,
     1, 80, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 96, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 73, 31,
     1, 118, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 96, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 129, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 133, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 129, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 129, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 133, -1, {"name":"ParenthesizedExpression"}],
    [1, 57, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     "/*", 56,
     /^\/\/.*/, -1],
    [e[19], 54,
     0, 55],
    [0, 53,
     0, 53],
    [2, 138, 55, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 56,
     "*/", -1],
    [e[4], 57,
     2, 52, 57, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 59,
     3, "string", "\"", 66],
    [2, 149, 59, {"name":"str","token":"string"},
     3, "string", "${", 60,
     3, "string", "$", 61,
     2, 151, 59, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 62],
    [1, 25, 63],
    [1, 96, 64],
    [3, "variable", e[0], 59],
    [1, 25, 65],
    [3, "string", "}", 59],
    [2, 149, 66, {"name":"str","token":"string"},
     3, "string", "${", 67,
     3, "string", "$", 68,
     3, "string", /^(?:(?![\"\$\\]).)+/, 66,
     3, "string", "\"", -1],
    [1, 25, 69],
    [1, 25, 70],
    [1, 96, 71],
    [3, "variable", e[0], 66],
    [1, 25, 72],
    [3, "string", "}", 66],
    [2, 153, 74, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 75],
    [1, 158, -1,
     "[", 76],
    [1, 25, 77],
    [1, 158, 78],
    [1, 25, 79],
    [0, 77,
     "]", -1],
    [1, 168, 81,
     3, "keyword", e[9], 82,
     3, "keyword", e[10], 82,
     1, 169, -1,
     3, "keyword", e[11], 83,
     1, 178, -1,
     1, 195, -1,
     1, 210, -1,
     3, "keyword", e[12], 84],
    [1, 25, 80],
    [1, 25, 85],
    [1, 25, 86],
    [1, 25, 87],
    [3, "type def", e[0], 88],
    [3, "keyword", e[10], 89,
     2, 223, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 90],
    [1, 25, 91],
    [1, 25, 92],
    [1, 25, 93],
    [2, 228, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 94],
    [2, 241, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 95],
    [2, 228, -1, {"name":"ClassSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 97,
     3, "meta", e[13], 97,
     1, 73, 97,
     1, 248, 98],
    [1, 25, 96],
    [1, 57, 99],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 100,
     [5, 306], 101,
     3, "operator", e[14], 102,
     "!", 103,
     0, 104,
     3, "keyword", e[1], 105,
     2, 307, 100, {"name":"ArgList"},
     0, 106,
     /^(?:\?\.|\.|\:\:)/, 107,
     "[", 108,
     3, "variable callee", [0, [6, 312], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 109,
     0, -1],
    [1, 57, 99],
    [2, 313, 100, {"name":"TypeArgs"}],
    [1, 25, 110],
    [1, 57, 104],
    [3, "keyword", e[8], 102,
     3, "keyword", e[15], 102],
    [1, 57, 111],
    [1, 73, 106,
     2, 318, 100, {"name":"LambdaBlock"}],
    [1, 25, 112],
    [1, 25, 113],
    [1, 25, 114],
    [1, 248, 100],
    ["?", 115,
     0, 102],
    [3, "keyword", e[9], 100,
     3, "property callee", e[36], 100,
     3, "property", e[0], 100,
     2, 133, 100, {"name":"ParenthesizedExpression"}],
    [1, 327, 116],
    [1, 248, 100],
    [1, 57, 102],
    [1, 25, 117],
    ["]", 100],
    ["(", 119,
     0, 123],
    [1, 25, 120],
    [1, 333, 121],
    [1, 25, 122],
    [")", -1],
    [1, 73, 124,
     3, "def", e[0], 125],
    [1, 25, 123],
    [1, 25, 126],
    [":", 127,
     0, -1],
    [1, 25, 128],
    [1, 339, -1],
    ["{", 130],
    [1, 25, 131],
    [2, 26, 132, {"name":"Statement"},
     "}", -1],
    [1, 25, 131],
    ["(", 134],
    [1, 25, 135],
    [1, 96, 136],
    [1, 25, 137],
    [")", -1],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 139,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 140,
     3, "tag", e[18], 147,
     "{", 141],
    [e[16], 139,
     3, "def", e[17], 147,
     "<", 142,
     0, 147],
    [e[16], 140,
     3, "type", e[17], 147,
     0, 147],
    [3, "tag", e[18], 143],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 144],
    [/^[\t ]*/, 145],
    [">", 147],
    [1, 362, 146],
    ["}", 147],
    [e[19], 148,
     0, -1],
    [0, 147,
     0, 147],
    ["\\", 150],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 152],
    [0, 151,
     0, -1],
    ["@", 154],
    [1, 57, 155],
    [[0, [5, 366], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 156,
     0, -1],
    [1, 57, 157],
    [":", -1],
    [3, "meta", e[0], 159],
    [1, 25, 160],
    [2, 313, 161, {"name":"TypeArgs"},
     0, 161],
    [1, 25, 162],
    [".", 163,
     2, 307, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 164],
    [3, "meta", e[0], 165],
    [1, 25, 166],
    [2, 313, 167, {"name":"TypeArgs"},
     0, 167],
    [1, 25, 162],
    [3, "keyword", e[20], -1,
     1, 73, -1],
    [3, "keyword", e[21], 170],
    [1, 25, 171],
    [3, "def", e[0], 172],
    [1, 25, 173],
    [":", 174,
     0, 176],
    [1, 25, 175],
    [1, 369, 176],
    [1, 25, 177],
    [2, 385, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 179],
    [1, 25, 180],
    [2, 389, 181, {"name":"TypeParams"},
     0, 181],
    [1, 25, 182],
    [1, 118, 183],
    [1, 25, 184],
    [3, "keyword", e[23], 185,
     0, 187],
    [1, 25, 186],
    [1, 394, 187],
    [1, 25, 188],
    [3, "operator", "=", 189,
     3, "keyword", e[39], 190,
     0, 193],
    [1, 25, 191],
    [1, 25, 192],
    [1, 96, 193],
    [1, 96, 193],
    [1, 25, 194],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 196],
    [1, 25, 197],
    ["(", 198,
     0, 200],
    [1, 25, 199],
    [")", 200],
    [1, 25, 201],
    [":", 202,
     0, 204],
    [1, 25, 203],
    [1, 339, 204],
    [1, 25, 205],
    [2, 129, 208, {"name":"Block"},
     3, "operator", "=", 206],
    [1, 25, 207],
    [1, 96, 208],
    [1, 25, 209],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 211],
    [1, 25, 212],
    [2, 410, 213, {"name":"ParamList"},
     0, 213],
    [1, 25, 214],
    [":", 215,
     0, 217],
    [1, 25, 216],
    [1, 339, 217],
    [1, 25, 218],
    [2, 129, 221, {"name":"Block"},
     3, "operator", "=", 219],
    [1, 25, 220],
    [1, 96, 221],
    [1, 25, 222],
    [/^\;?/, -1],
    [2, 389, 224, {"name":"TypeParams"},
     0, 224],
    [1, 25, 225],
    [3, "def", e[0], 226],
    [1, 25, 227],
    [2, 415, -1, {"name":"FunctionSpec"}],
    [2, 389, 229, {"name":"TypeParams"},
     0, 229],
    [1, 25, 230],
    [2, 428, 231, {"name":"Constructor"},
     0, 231],
    [1, 25, 232],
    [":", 233,
     0, 235],
    [1, 25, 234],
    [1, 369, 235],
    [1, 25, 236],
    [3, "keyword", e[23], 237,
     0, 239],
    [1, 25, 238],
    [1, 394, 239],
    [1, 25, 240],
    [2, 385, -1, {"name":"ClassBody"},
     0, -1],
    [2, 389, 242, {"name":"TypeParams"},
     0, 242],
    [1, 25, 243],
    [3, "operator", "=", 244],
    [1, 25, 245],
    [1, 339, 246],
    [1, 25, 247],
    [/^\;?/, -1],
    [2, 133, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 58, -1,
     3, "string-2", e[26], -1,
     2, 318, -1, {"name":"LambdaBlock"},
     3, "keyword", e[21], 249,
     3, "keyword", e[11], 255,
     3, "keyword", e[27], 257,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], 261,
     3, "keyword", e[30], 271,
     3, "keyword", e[31], 276,
     3, "keyword", e[32], 291,
     3, "keyword", e[33], 294,
     3, "keyword", e[34], 296,
     3, "keyword", e[35], 302,
     2, 432, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[36], -1,
     3, "variable", e[0], -1],
    [1, 25, 250],
    [":", 251,
     0, 252],
    [1, 25, 253],
    [2, 385, -1, {"name":"ClassBody"}],
    [1, 369, 254],
    [1, 25, 252],
    [1, 25, 256],
    [2, 415, -1, {"name":"FunctionSpec"}],
    [1, 57, 258],
    ["@", 259,
     0, -1],
    [1, 57, 260],
    [e[0], -1],
    [1, 57, 262],
    ["<", 263,
     0, 264],
    [1, 25, 265],
    ["@", 266,
     0, -1],
    [1, 339, 267],
    [1, 57, 268],
    [1, 25, 269],
    [e[0], -1],
    [">", 270],
    [1, 57, 264],
    [1, 25, 272],
    [2, 133, 273, {"name":"ParenthesizedExpression"}],
    [1, 25, 274],
    [2, 129, 275, {"name":"Block"},
     2, 26, 275, {"name":"Statement"},
     ";", 275],
    [2, 433, -1, {"name":"Alternative"}],
    [1, 25, 277],
    ["(", 278],
    [1, 25, 279],
    [1, 73, 280,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 281,
     0, 282],
    [1, 25, 279],
    [1, 25, 283],
    [1, 25, 284],
    [1, 118, 285],
    [1, 96, 286],
    [1, 25, 287],
    [1, 25, 288],
    [3, "operator", "=", 282],
    [")", 289],
    [1, 25, 290],
    [2, 438, -1, {"name":"WhenBody"}],
    [1, 25, 292],
    [2, 129, 293, {"name":"Block"}],
    [2, 447, -1, {"name":"CatchFinally"}],
    [1, 57, 295],
    [1, 96, -1],
    [1, 57, 297],
    ["@", 298,
     0, 299],
    [1, 57, 300],
    [1, 96, -1,
     0, -1],
    [e[0], 301],
    [1, 57, 299],
    [1, 57, 303],
    ["@", 304,
     0, -1],
    [1, 57, 305],
    [e[0], -1],
    [2, 313, -1, {"name":"TypeArgs"}],
    ["(", 308],
    [1, 25, 309],
    [1, 467, 310,
     0, 310],
    [1, 25, 311],
    [")", -1],
    [3, "keyword", e[37], -1],
    ["<", 314],
    [1, 25, 315],
    [1, 487, 316],
    [1, 25, 317],
    [">", -1],
    ["{", 319],
    [1, 25, 320],
    [[5, 497], 321,
     0, 324],
    [1, 500, 322],
    [1, 25, 323],
    [3, "operator", "->", 324],
    [1, 25, 325],
    [2, 26, 326, {"name":"Statement"},
     "}", -1],
    [1, 25, 325],
    [1, 96, 328],
    [1, 57, 329],
    [",", 330,
     0, -1],
    [1, 25, 331],
    [1, 96, 332,
     0, 329],
    [1, 57, 329],
    [1, 118, 334],
    [1, 57, 335],
    [",", 336,
     0, -1],
    [1, 25, 337],
    [1, 118, 338,
     0, 335],
    [1, 57, 335],
    [1, 73, 340,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 340,
     3, "keyword", e[38], 359,
     3, "type", e[0], 341,
     [5, 514], 342,
     "(", 343],
    [1, 25, 339],
    [1, 57, 344],
    [2, 521, 345, {"name":"ParamTypeList"}],
    [1, 25, 346],
    [2, 313, 347, {"name":"TypeArgs"},
     0, 348],
    [1, 25, 349],
    [1, 339, 350],
    [1, 57, 348],
    [".", 351,
     0, 359],
    [3, "operator", "->", 352],
    [1, 25, 353],
    [1, 25, 354],
    [1, 25, 355],
    [")", 359],
    [3, "type", e[0], 356],
    [1, 339, 359],
    [1, 57, 357],
    [2, 313, 358, {"name":"TypeArgs"},
     0, 348],
    [1, 57, 348],
    [1, 57, 360],
    ["?", 361,
     0, -1],
    [1, 57, 360],
    [3, "attribute", "{", 363,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 362,
     "\n", 364,
     0, -1],
    [1, 362, 365],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 362],
    [/^(?=\*\/)/, 362,
     3, "attribute", "}", 362],
    [e[0], 367],
    [1, 57, 368],
    [":", -1],
    [1, 168, 370,
     1, 339, 371],
    [1, 25, 369],
    [1, 25, 372],
    [3, "keyword", e[39], 373,
     2, 307, 375, {"name":"ArgList"},
     0, 375],
    [1, 25, 374],
    [1, 96, 375],
    [1, 57, 376],
    [",", 377,
     0, -1],
    [1, 25, 378],
    [1, 168, 379,
     1, 339, 380,
     0, 376],
    [1, 25, 378],
    [1, 25, 381],
    [3, "keyword", e[39], 382,
     2, 307, 383, {"name":"ArgList"},
     0, 383],
    [1, 25, 384],
    [1, 57, 376],
    [1, 96, 383],
    ["{", 386],
    [1, 25, 387],
    [2, 526, 388, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 387],
    ["<", 390],
    [1, 25, 391],
    [1, 557, 392],
    [1, 25, 393],
    [">", -1],
    [1, 73, 395,
     3, "variable", e[0], 396],
    [1, 25, 394],
    [1, 25, 397],
    [":", 398],
    [1, 25, 399],
    [1, 339, 400],
    [1, 57, 401],
    [",", 402,
     0, -1],
    [1, 25, 403],
    [1, 73, 404,
     3, "variable", e[0], 405,
     0, 401],
    [1, 25, 403],
    [1, 25, 406],
    [":", 407],
    [1, 25, 408],
    [1, 339, 409],
    [1, 57, 401],
    ["(", 411],
    [1, 25, 412],
    [1, 573, 413,
     0, 413],
    [1, 25, 414],
    [")", -1],
    [2, 410, 416, {"name":"ParamList"}],
    [1, 25, 417],
    [":", 418,
     0, 420],
    [1, 25, 419],
    [1, 339, 420],
    [1, 25, 421],
    [3, "keyword", e[23], 422,
     0, 424],
    [1, 25, 423],
    [1, 394, 424],
    [1, 25, 425],
    [2, 129, -1, {"name":"Block"},
     3, "operator", "=", 426,
     0, -1],
    [1, 25, 427],
    [1, 96, -1],
    [1, 168, 429,
     3, "keyword", e[40], 430,
     0, 430],
    [1, 25, 428],
    [1, 25, 431],
    [2, 597, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 602], 434,
     0, -1],
    [1, 25, 435],
    [3, "keyword", e[37], 436],
    [1, 25, 437],
    [2, 129, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 439],
    [1, 25, 440],
    [3, "keyword", e[37], 441,
     1, 604, 441],
    [1, 25, 442],
    [3, "operator", "->", 443],
    [1, 25, 444],
    [2, 129, 445, {"name":"Block"},
     2, 26, 445, {"name":"Statement"},
     ";", 445],
    [1, 25, 446],
    ["}", -1],
    [[5, 630], 448,
     [5, 632], 463,
     0, -1],
    [1, 25, 449],
    [3, "keyword", e[41], 450],
    [1, 25, 451],
    ["(", 452],
    [1, 25, 453],
    [1, 73, 454,
     3, "def", e[0], 455],
    [1, 25, 453],
    [1, 25, 456],
    [":", 457],
    [1, 25, 458],
    [1, 339, 459],
    [1, 25, 460],
    [")", 461],
    [1, 25, 462],
    [2, 129, 447, {"name":"Block"}],
    [1, 25, 464],
    [3, "keyword", e[42], 465],
    [1, 25, 466],
    [2, 129, -1, {"name":"Block"}],
    [1, 73, 468,
     [0, [5, 634], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 469,
     0, 470],
    [1, 25, 467],
    [1, 25, 471],
    [1, 25, 472],
    [3, "operator", "=", 470],
    [/^\*?/, 473],
    [1, 25, 474],
    [1, 96, 475],
    [1, 57, 476],
    [",", 477,
     0, -1],
    [1, 25, 478],
    [1, 73, 479,
     [0, [5, 637], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 480,
     0, 481,
     0, 476],
    [1, 25, 478],
    [1, 25, 482],
    [1, 25, 483],
    [3, "operator", "=", 481],
    [/^\*?/, 484],
    [1, 25, 485],
    [1, 96, 486],
    [1, 57, 476],
    ["*", 490,
     0, 488],
    [1, 73, 489,
     3, "keyword", e[43], 489,
     1, 339, 490],
    [1, 25, 488],
    [1, 57, 491],
    [",", 492,
     0, -1],
    [1, 25, 493],
    ["*", 494,
     0, 495,
     0, 491],
    [1, 57, 491],
    [1, 73, 496,
     3, "keyword", e[43], 496,
     1, 339, 494],
    [1, 25, 495],
    [1, 500, 498],
    [1, 25, 499],
    [3, "operator", "->", -1],
    [3, "def", e[0], 501],
    [1, 25, 502],
    [":", 503,
     0, 505],
    [1, 25, 504],
    [1, 339, 505],
    [1, 57, 506],
    [",", 507,
     0, -1],
    [1, 25, 508],
    [3, "def", e[0], 509,
     0, 506],
    [1, 25, 510],
    [":", 511,
     0, 512],
    [1, 25, 513],
    [1, 57, 506],
    [1, 339, 512],
    ["(", 515],
    [1, 25, 516],
    [2, 153, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 517],
    [1, 25, 518],
    [")", 519,
     ":", -1],
    [1, 25, 520],
    ["->", -1],
    ["(", 522],
    [1, 25, 523],
    [1, 640, 524,
     0, 524],
    [1, 25, 525],
    [")", -1],
    [1, 73, -1,
     1, 654, -1,
     3, "keyword", e[44], 527,
     3, "keyword", e[45], 537,
     3, "keyword", e[40], 539,
     0, 549],
    [1, 25, 528],
    [3, "keyword", e[21], 529],
    [1, 25, 530],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 531],
    [1, 25, 532],
    [":", 533,
     0, 534],
    [1, 25, 535],
    [1, 25, 536],
    [1, 369, 534],
    [2, 385, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 538],
    [2, 129, -1, {"name":"Block"}],
    [1, 25, 540],
    [2, 410, 541, {"name":"ParamList"}],
    [1, 25, 542],
    [":", 543,
     0, 544],
    [1, 25, 545],
    [1, 25, 546],
    [3, "keyword", e[27], 547,
     3, "keyword", e[29], 547],
    [2, 129, -1, {"name":"Block"},
     0, -1],
    [1, 25, 548],
    [2, 307, 544, {"name":"ArgList"}],
    [1, 168, 550,
     3, "def property", e[0], 551],
    [1, 25, 549],
    [1, 25, 552],
    [2, 307, 553, {"name":"ArgList"},
     0, 553],
    [1, 25, 554],
    [2, 385, 555, {"name":"ClassBody"},
     0, 555],
    [1, 25, 556],
    [/^[\,\;]/, -1],
    [1, 168, 558,
     3, "type def", e[0], 559],
    [1, 25, 557],
    [1, 25, 560],
    [":", 561,
     0, 563],
    [1, 25, 562],
    [1, 339, 563],
    [1, 57, 564],
    [",", 565,
     0, -1],
    [1, 25, 566],
    [1, 168, 567,
     3, "type def", e[0], 568,
     0, 564],
    [1, 25, 566],
    [1, 25, 569],
    [":", 570,
     0, 571],
    [1, 25, 572],
    [1, 57, 564],
    [1, 339, 571],
    [1, 168, 574,
     3, "def", e[0], 575],
    [1, 25, 573],
    [1, 25, 576],
    [":", 577,
     0, 578],
    [1, 25, 579],
    [1, 25, 580],
    [1, 339, 578],
    [3, "operator", "=", 581,
     0, 583],
    [1, 25, 582],
    [1, 96, 583],
    [1, 57, 584],
    [",", 585,
     0, -1],
    [1, 25, 586],
    [1, 168, 587,
     3, "def", e[0], 588,
     0, 584],
    [1, 25, 586],
    [1, 25, 589],
    [":", 590,
     0, 591],
    [1, 25, 592],
    [1, 25, 593],
    [1, 339, 591],
    [3, "operator", "=", 594,
     0, 595],
    [1, 25, 596],
    [1, 57, 584],
    [1, 96, 595],
    ["(", 598],
    [1, 25, 599],
    [1, 670, 600,
     0, 600],
    [1, 25, 601],
    [")", -1],
    [1, 25, 603],
    [3, "keyword", e[37], -1],
    [[5, 698], 605,
     [5, 701], 606,
     1, 96, 615],
    [3, "operator", "!", 607,
     0, 607],
    [3, "operator", "!", 608,
     0, 608],
    [1, 25, 609],
    [1, 25, 610],
    [3, "keyword", e[8], 611],
    [3, "keyword", e[15], 612],
    [1, 25, 613],
    [1, 25, 614],
    [1, 96, 615],
    [1, 339, 615],
    [1, 57, 616],
    [",", 617,
     0, -1],
    [1, 25, 618],
    [[5, 704], 619,
     [5, 707], 620,
     1, 96, 621,
     0, 616],
    [3, "operator", "!", 622,
     0, 622],
    [3, "operator", "!", 623,
     0, 623],
    [1, 57, 616],
    [1, 25, 624],
    [1, 25, 625],
    [3, "keyword", e[8], 626],
    [3, "keyword", e[15], 627],
    [1, 25, 628],
    [1, 25, 629],
    [1, 96, 621],
    [1, 339, 621],
    [1, 25, 631],
    [3, "keyword", e[41], -1],
    [1, 25, 633],
    [3, "keyword", e[42], -1],
    [e[0], 635],
    [1, 25, 636],
    ["=", -1],
    [e[0], 638],
    [1, 25, 639],
    ["=", -1],
    [[0, [5, 710], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 641,
     0, 642],
    [1, 25, 643],
    [1, 25, 644],
    [":", 642],
    [1, 339, 645],
    [1, 57, 646],
    [",", 647,
     0, -1],
    [1, 25, 648],
    [[0, [5, 713], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 649,
     0, 650,
     0, 646],
    [1, 25, 651],
    [1, 25, 652],
    [":", 650],
    [1, 339, 653],
    [1, 57, 646],
    [1, 168, 655,
     3, "keyword", e[9], 656,
     3, "keyword", e[10], 656,
     1, 716, -1,
     3, "keyword", e[11], 657,
     1, 725, -1,
     1, 195, -1,
     1, 210, -1,
     3, "keyword", e[12], 658],
    [1, 25, 654],
    [1, 25, 659],
    [1, 25, 660],
    [1, 25, 661],
    [3, "type def", e[0], 662],
    [3, "keyword", e[10], 663,
     2, 742, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 664],
    [1, 25, 665],
    [1, 25, 666],
    [1, 25, 667],
    [2, 228, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 668],
    [2, 241, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 669],
    [2, 228, -1, {"name":"ClassSpec"}],
    [1, 168, 671,
     3, "keyword", e[22], 672,
     3, "def", e[0], 673],
    [1, 25, 670],
    [1, 25, 674],
    [1, 25, 675],
    [3, "def property", e[0], 673],
    [":", 676,
     0, 677],
    [1, 25, 678],
    [1, 25, 679],
    [1, 339, 677],
    [3, "operator", "=", 680,
     0, 682],
    [1, 25, 681],
    [1, 96, 682],
    [1, 57, 683],
    [",", 684,
     0, -1],
    [1, 25, 685],
    [1, 168, 686,
     3, "keyword", e[22], 687,
     3, "def", e[0], 688,
     0, 683],
    [1, 25, 685],
    [1, 25, 689],
    [1, 25, 690],
    [3, "def property", e[0], 688],
    [":", 691,
     0, 692],
    [1, 25, 693],
    [1, 25, 694],
    [1, 339, 692],
    [3, "operator", "=", 695,
     0, 696],
    [1, 25, 697],
    [1, 57, 683],
    [1, 96, 696],
    [/^\!?/, 699],
    [1, 25, 700],
    [3, "keyword", e[8], -1],
    [/^\!?/, 702],
    [1, 25, 703],
    [3, "keyword", e[15], -1],
    [/^\!?/, 705],
    [1, 25, 706],
    [3, "keyword", e[8], -1],
    [/^\!?/, 708],
    [1, 25, 709],
    [3, "keyword", e[15], -1],
    [e[0], 711],
    [1, 25, 712],
    [":", -1],
    [e[0], 714],
    [1, 25, 715],
    [":", -1],
    [3, "keyword", e[21], 717],
    [1, 25, 718],
    [3, "def property", e[0], 719],
    [1, 25, 720],
    [":", 721,
     0, 723],
    [1, 25, 722],
    [1, 369, 723],
    [1, 25, 724],
    [2, 385, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 726],
    [1, 25, 727],
    [2, 389, 728, {"name":"TypeParams"},
     0, 728],
    [1, 25, 729],
    [1, 747, 730],
    [1, 25, 731],
    [3, "keyword", e[23], 732,
     0, 734],
    [1, 25, 733],
    [1, 394, 734],
    [1, 25, 735],
    [3, "operator", "=", 736,
     3, "keyword", e[39], 737,
     0, 740],
    [1, 25, 738],
    [1, 25, 739],
    [1, 96, 740],
    [1, 96, 740],
    [1, 25, 741],
    [/^\;?/, -1],
    [2, 389, 743, {"name":"TypeParams"},
     0, 743],
    [1, 25, 744],
    [3, "def property", e[0], 745],
    [1, 25, 746],
    [2, 415, -1, {"name":"FunctionSpec"}],
    ["(", 748,
     0, 752],
    [1, 25, 749],
    [1, 758, 750],
    [1, 25, 751],
    [")", -1],
    [1, 73, 753,
     3, "def property", e[0], 754],
    [1, 25, 752],
    [1, 25, 755],
    [":", 756,
     0, -1],
    [1, 25, 757],
    [1, 339, -1],
    [1, 747, 759],
    [1, 57, 760],
    [",", 761,
     0, -1],
    [1, 25, 762],
    [1, 747, 763,
     0, 760],
    [1, 57, 760]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true, dontAlign: ["LambdaBlock"]};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
