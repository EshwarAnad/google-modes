(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, [6, 142], /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailred|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 58, 14],
    [1, 58, 15],
    [/^\;?/, 6],
    [1, 58, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 58, 14],
    [1, 58, 12],
    [3, "keyword", e[9], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[27], -1,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[22], -1,
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 59, -1,
     3, "string-2", e[26], -1,
     3, "operator", e[14], -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[13], -1,
     1, 74, -1,
     1, 81, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 97, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 74, 31,
     1, 119, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 97, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 130, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 134, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 130, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 130, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 134, -1, {"name":"ParenthesizedExpression"}],
    [1, 58, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     "/*", 57,
     /^\/\/.*/, -1],
    [0, 54,
     2, 139, 53, {"name":"doccomment.link","token":"link"},
     0, 55],
    [e[19], 56],
    [2, 143, 55, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 54,
     0, 53],
    [[0, /^(?!\*\/)/, /^[^]/], 57,
     "*/", -1],
    [e[4], 58,
     2, 52, 58, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 60,
     3, "string", "\"", 67],
    [2, 155, 60, {"name":"str","token":"string"},
     3, "string", "${", 61,
     3, "string", "$", 62,
     2, 157, 60, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 63],
    [1, 25, 64],
    [1, 97, 65],
    [3, "variable", e[0], 60],
    [1, 25, 66],
    [3, "string", "}", 60],
    [2, 155, 67, {"name":"str","token":"string"},
     3, "string", "${", 68,
     3, "string", "$", 69,
     3, "string", /^(?:(?![\"\$\\]).)+/, 67,
     3, "string", "\"", -1],
    [1, 25, 70],
    [1, 25, 71],
    [1, 97, 72],
    [3, "variable", e[0], 67],
    [1, 25, 73],
    [3, "string", "}", 67],
    [2, 159, 75, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 76],
    [1, 164, -1,
     "[", 77],
    [1, 25, 78],
    [1, 164, 79],
    [1, 25, 80],
    [0, 78,
     "]", -1],
    [1, 174, 82,
     3, "keyword", e[9], 83,
     3, "keyword", e[10], 83,
     1, 175, -1,
     3, "keyword", e[11], 84,
     1, 184, -1,
     1, 201, -1,
     1, 216, -1,
     3, "keyword", e[12], 85],
    [1, 25, 81],
    [1, 25, 86],
    [1, 25, 87],
    [1, 25, 88],
    [3, "type def", e[0], 89],
    [3, "keyword", e[10], 90,
     2, 229, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 91],
    [1, 25, 92],
    [1, 25, 93],
    [1, 25, 94],
    [2, 234, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 95],
    [2, 247, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 96],
    [2, 234, -1, {"name":"ClassSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 98,
     3, "meta", e[13], 98,
     1, 74, 98,
     1, 254, 99],
    [1, 25, 97],
    [1, 58, 100],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 101,
     [5, 312], 102,
     3, "operator", e[14], 103,
     "!", 104,
     0, 105,
     3, "keyword", e[1], 106,
     2, 313, 101, {"name":"ArgList"},
     0, 107,
     /^(?:\?\.|\.|\:\:)/, 108,
     "[", 109,
     3, "variable callee", [0, [6, 318], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 110,
     0, -1],
    [1, 58, 100],
    [2, 319, 101, {"name":"TypeArgs"}],
    [1, 25, 111],
    [1, 58, 105],
    [3, "keyword", e[8], 103,
     3, "keyword", e[15], 103],
    [1, 58, 112],
    [1, 74, 107,
     2, 324, 101, {"name":"LambdaBlock"}],
    [1, 25, 113],
    [1, 25, 114],
    [1, 25, 115],
    [1, 254, 101],
    ["?", 116,
     0, 103],
    [3, "keyword", e[9], 101,
     3, "property callee", e[36], 101,
     3, "property", e[0], 101,
     2, 134, 101, {"name":"ParenthesizedExpression"}],
    [1, 333, 117],
    [1, 254, 101],
    [1, 58, 103],
    [1, 25, 118],
    ["]", 101],
    ["(", 120,
     0, 124],
    [1, 25, 121],
    [1, 339, 122],
    [1, 25, 123],
    [")", -1],
    [1, 74, 125,
     3, "def", e[0], 126],
    [1, 25, 124],
    [1, 25, 127],
    [":", 128,
     0, -1],
    [1, 25, 129],
    [1, 345, -1],
    ["{", 131],
    [1, 25, 132],
    [2, 26, 133, {"name":"Statement"},
     "}", -1],
    [1, 25, 132],
    ["(", 135],
    [1, 25, 136],
    [1, 97, 137],
    [1, 25, 138],
    [")", -1],
    ["[", 140],
    [[0, /^(?!\])/, /^[^]/], 141],
    [0, 140,
     "]", -1],
    [/^(?:\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, -1,
     2, 139, -1, {"name":"doccomment.link","token":"link"}],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 144,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 145,
     3, "tag", e[18], 152,
     "{", 146],
    [e[16], 144,
     3, "def", e[17], 152,
     "<", 147,
     0, 152],
    [e[16], 145,
     3, "type", e[17], 152,
     0, 152],
    [3, "tag", e[18], 148],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 149],
    [/^[\t ]*/, 150],
    [">", 152],
    [1, 368, 151],
    ["}", 152],
    [0, 153,
     2, 139, 152, {"name":"doccomment.link","token":"link"},
     0, -1],
    [e[19], 154],
    [0, 153,
     0, 152],
    ["\\", 156],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 158],
    [0, 157,
     0, -1],
    ["@", 160],
    [1, 58, 161],
    [[0, [5, 372], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 162,
     0, -1],
    [1, 58, 163],
    [":", -1],
    [3, "meta", e[0], 165],
    [1, 25, 166],
    [2, 319, 167, {"name":"TypeArgs"},
     0, 167],
    [1, 25, 168],
    [".", 169,
     2, 313, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 170],
    [3, "meta", e[0], 171],
    [1, 25, 172],
    [2, 319, 173, {"name":"TypeArgs"},
     0, 173],
    [1, 25, 168],
    [3, "keyword", e[20], -1,
     1, 74, -1],
    [3, "keyword", e[21], 176],
    [1, 25, 177],
    [3, "def", e[0], 178],
    [1, 25, 179],
    [":", 180,
     0, 182],
    [1, 25, 181],
    [1, 375, 182],
    [1, 25, 183],
    [2, 391, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 185],
    [1, 25, 186],
    [2, 395, 187, {"name":"TypeParams"},
     0, 187],
    [1, 25, 188],
    [1, 119, 189],
    [1, 25, 190],
    [3, "keyword", e[23], 191,
     0, 193],
    [1, 25, 192],
    [1, 400, 193],
    [1, 25, 194],
    [3, "operator", "=", 195,
     3, "keyword", e[39], 196,
     0, 199],
    [1, 25, 197],
    [1, 25, 198],
    [1, 97, 199],
    [1, 97, 199],
    [1, 25, 200],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 202],
    [1, 25, 203],
    ["(", 204,
     0, 206],
    [1, 25, 205],
    [")", 206],
    [1, 25, 207],
    [":", 208,
     0, 210],
    [1, 25, 209],
    [1, 345, 210],
    [1, 25, 211],
    [2, 130, 214, {"name":"Block"},
     3, "operator", "=", 212],
    [1, 25, 213],
    [1, 97, 214],
    [1, 25, 215],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 217],
    [1, 25, 218],
    [2, 416, 219, {"name":"ParamList"},
     0, 219],
    [1, 25, 220],
    [":", 221,
     0, 223],
    [1, 25, 222],
    [1, 345, 223],
    [1, 25, 224],
    [2, 130, 227, {"name":"Block"},
     3, "operator", "=", 225],
    [1, 25, 226],
    [1, 97, 227],
    [1, 25, 228],
    [/^\;?/, -1],
    [2, 395, 230, {"name":"TypeParams"},
     0, 230],
    [1, 25, 231],
    [3, "def", e[0], 232],
    [1, 25, 233],
    [2, 421, -1, {"name":"FunctionSpec"}],
    [2, 395, 235, {"name":"TypeParams"},
     0, 235],
    [1, 25, 236],
    [2, 434, 237, {"name":"Constructor"},
     0, 237],
    [1, 25, 238],
    [":", 239,
     0, 241],
    [1, 25, 240],
    [1, 375, 241],
    [1, 25, 242],
    [3, "keyword", e[23], 243,
     0, 245],
    [1, 25, 244],
    [1, 400, 245],
    [1, 25, 246],
    [2, 391, -1, {"name":"ClassBody"},
     0, -1],
    [2, 395, 248, {"name":"TypeParams"},
     0, 248],
    [1, 25, 249],
    [3, "operator", "=", 250],
    [1, 25, 251],
    [1, 345, 252],
    [1, 25, 253],
    [/^\;?/, -1],
    [2, 134, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[24], -1,
     3, "number", e[25], -1,
     1, 59, -1,
     3, "string-2", e[26], -1,
     2, 324, -1, {"name":"LambdaBlock"},
     3, "keyword", e[21], 255,
     3, "keyword", e[11], 261,
     3, "keyword", e[27], 263,
     3, "variable-2", e[28], -1,
     3, "keyword", e[29], 267,
     3, "keyword", e[30], 277,
     3, "keyword", e[31], 282,
     3, "keyword", e[32], 297,
     3, "keyword", e[33], 300,
     3, "keyword", e[34], 302,
     3, "keyword", e[35], 308,
     2, 438, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[36], -1,
     3, "variable", e[0], -1],
    [1, 25, 256],
    [":", 257,
     0, 258],
    [1, 25, 259],
    [2, 391, -1, {"name":"ClassBody"}],
    [1, 375, 260],
    [1, 25, 258],
    [1, 25, 262],
    [2, 421, -1, {"name":"FunctionSpec"}],
    [1, 58, 264],
    ["@", 265,
     0, -1],
    [1, 58, 266],
    [e[0], -1],
    [1, 58, 268],
    ["<", 269,
     0, 270],
    [1, 25, 271],
    ["@", 272,
     0, -1],
    [1, 345, 273],
    [1, 58, 274],
    [1, 25, 275],
    [e[0], -1],
    [">", 276],
    [1, 58, 270],
    [1, 25, 278],
    [2, 134, 279, {"name":"ParenthesizedExpression"}],
    [1, 25, 280],
    [2, 130, 281, {"name":"Block"},
     2, 26, 281, {"name":"Statement"},
     ";", 281],
    [2, 439, -1, {"name":"Alternative"}],
    [1, 25, 283],
    ["(", 284],
    [1, 25, 285],
    [1, 74, 286,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 287,
     0, 288],
    [1, 25, 285],
    [1, 25, 289],
    [1, 25, 290],
    [1, 119, 291],
    [1, 97, 292],
    [1, 25, 293],
    [1, 25, 294],
    [3, "operator", "=", 288],
    [")", 295],
    [1, 25, 296],
    [2, 444, -1, {"name":"WhenBody"}],
    [1, 25, 298],
    [2, 130, 299, {"name":"Block"}],
    [2, 453, -1, {"name":"CatchFinally"}],
    [1, 58, 301],
    [1, 97, -1],
    [1, 58, 303],
    ["@", 304,
     0, 305],
    [1, 58, 306],
    [1, 97, -1,
     0, -1],
    [e[0], 307],
    [1, 58, 305],
    [1, 58, 309],
    ["@", 310,
     0, -1],
    [1, 58, 311],
    [e[0], -1],
    [2, 319, -1, {"name":"TypeArgs"}],
    ["(", 314],
    [1, 25, 315],
    [1, 473, 316,
     0, 316],
    [1, 25, 317],
    [")", -1],
    [3, "keyword", e[37], -1],
    ["<", 320],
    [1, 25, 321],
    [1, 493, 322],
    [1, 25, 323],
    [">", -1],
    ["{", 325],
    [1, 25, 326],
    [[5, 503], 327,
     0, 330],
    [1, 506, 328],
    [1, 25, 329],
    [3, "operator", "->", 330],
    [1, 25, 331],
    [2, 26, 332, {"name":"Statement"},
     "}", -1],
    [1, 25, 331],
    [1, 97, 334],
    [1, 58, 335],
    [",", 336,
     0, -1],
    [1, 25, 337],
    [1, 97, 338,
     0, 335],
    [1, 58, 335],
    [1, 119, 340],
    [1, 58, 341],
    [",", 342,
     0, -1],
    [1, 25, 343],
    [1, 119, 344,
     0, 341],
    [1, 58, 341],
    [1, 74, 346,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 346,
     3, "keyword", e[38], 365,
     3, "type", e[0], 347,
     [5, 520], 348,
     "(", 349],
    [1, 25, 345],
    [1, 58, 350],
    [2, 527, 351, {"name":"ParamTypeList"}],
    [1, 25, 352],
    [2, 319, 353, {"name":"TypeArgs"},
     0, 354],
    [1, 25, 355],
    [1, 345, 356],
    [1, 58, 354],
    [".", 357,
     0, 365],
    [3, "operator", "->", 358],
    [1, 25, 359],
    [1, 25, 360],
    [1, 25, 361],
    [")", 365],
    [3, "type", e[0], 362],
    [1, 345, 365],
    [1, 58, 363],
    [2, 319, 364, {"name":"TypeArgs"},
     0, 354],
    [1, 58, 354],
    [1, 58, 366],
    ["?", 367,
     0, -1],
    [1, 58, 366],
    [3, "attribute", "{", 369,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 368,
     "\n", 370,
     0, -1],
    [1, 368, 371],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 368],
    [/^(?=\*\/)/, 368,
     3, "attribute", "}", 368],
    [e[0], 373],
    [1, 58, 374],
    [":", -1],
    [1, 174, 376,
     1, 345, 377],
    [1, 25, 375],
    [1, 25, 378],
    [3, "keyword", e[39], 379,
     2, 313, 381, {"name":"ArgList"},
     0, 381],
    [1, 25, 380],
    [1, 97, 381],
    [1, 58, 382],
    [",", 383,
     0, -1],
    [1, 25, 384],
    [1, 174, 385,
     1, 345, 386,
     0, 382],
    [1, 25, 384],
    [1, 25, 387],
    [3, "keyword", e[39], 388,
     2, 313, 389, {"name":"ArgList"},
     0, 389],
    [1, 25, 390],
    [1, 58, 382],
    [1, 97, 389],
    ["{", 392],
    [1, 25, 393],
    [2, 532, 394, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 393],
    ["<", 396],
    [1, 25, 397],
    [1, 563, 398],
    [1, 25, 399],
    [">", -1],
    [1, 74, 401,
     3, "variable", e[0], 402],
    [1, 25, 400],
    [1, 25, 403],
    [":", 404],
    [1, 25, 405],
    [1, 345, 406],
    [1, 58, 407],
    [",", 408,
     0, -1],
    [1, 25, 409],
    [1, 74, 410,
     3, "variable", e[0], 411,
     0, 407],
    [1, 25, 409],
    [1, 25, 412],
    [":", 413],
    [1, 25, 414],
    [1, 345, 415],
    [1, 58, 407],
    ["(", 417],
    [1, 25, 418],
    [1, 579, 419,
     0, 419],
    [1, 25, 420],
    [")", -1],
    [2, 416, 422, {"name":"ParamList"}],
    [1, 25, 423],
    [":", 424,
     0, 426],
    [1, 25, 425],
    [1, 345, 426],
    [1, 25, 427],
    [3, "keyword", e[23], 428,
     0, 430],
    [1, 25, 429],
    [1, 400, 430],
    [1, 25, 431],
    [2, 130, -1, {"name":"Block"},
     3, "operator", "=", 432,
     0, -1],
    [1, 25, 433],
    [1, 97, -1],
    [1, 174, 435,
     3, "keyword", e[40], 436,
     0, 436],
    [1, 25, 434],
    [1, 25, 437],
    [2, 603, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 608], 440,
     0, -1],
    [1, 25, 441],
    [3, "keyword", e[37], 442],
    [1, 25, 443],
    [2, 130, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 445],
    [1, 25, 446],
    [3, "keyword", e[37], 447,
     1, 610, 447],
    [1, 25, 448],
    [3, "operator", "->", 449],
    [1, 25, 450],
    [2, 130, 451, {"name":"Block"},
     2, 26, 451, {"name":"Statement"},
     ";", 451],
    [1, 25, 452],
    ["}", -1],
    [[5, 636], 454,
     [5, 638], 469,
     0, -1],
    [1, 25, 455],
    [3, "keyword", e[41], 456],
    [1, 25, 457],
    ["(", 458],
    [1, 25, 459],
    [1, 74, 460,
     3, "def", e[0], 461],
    [1, 25, 459],
    [1, 25, 462],
    [":", 463],
    [1, 25, 464],
    [1, 345, 465],
    [1, 25, 466],
    [")", 467],
    [1, 25, 468],
    [2, 130, 453, {"name":"Block"}],
    [1, 25, 470],
    [3, "keyword", e[42], 471],
    [1, 25, 472],
    [2, 130, -1, {"name":"Block"}],
    [1, 74, 474,
     [0, [5, 640], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 475,
     0, 476],
    [1, 25, 473],
    [1, 25, 477],
    [1, 25, 478],
    [3, "operator", "=", 476],
    [/^\*?/, 479],
    [1, 25, 480],
    [1, 97, 481],
    [1, 58, 482],
    [",", 483,
     0, -1],
    [1, 25, 484],
    [1, 74, 485,
     [0, [5, 643], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 486,
     0, 487,
     0, 482],
    [1, 25, 484],
    [1, 25, 488],
    [1, 25, 489],
    [3, "operator", "=", 487],
    [/^\*?/, 490],
    [1, 25, 491],
    [1, 97, 492],
    [1, 58, 482],
    ["*", 496,
     0, 494],
    [1, 74, 495,
     3, "keyword", e[43], 495,
     1, 345, 496],
    [1, 25, 494],
    [1, 58, 497],
    [",", 498,
     0, -1],
    [1, 25, 499],
    ["*", 500,
     0, 501,
     0, 497],
    [1, 58, 497],
    [1, 74, 502,
     3, "keyword", e[43], 502,
     1, 345, 500],
    [1, 25, 501],
    [1, 506, 504],
    [1, 25, 505],
    [3, "operator", "->", -1],
    [3, "def", e[0], 507],
    [1, 25, 508],
    [":", 509,
     0, 511],
    [1, 25, 510],
    [1, 345, 511],
    [1, 58, 512],
    [",", 513,
     0, -1],
    [1, 25, 514],
    [3, "def", e[0], 515,
     0, 512],
    [1, 25, 516],
    [":", 517,
     0, 518],
    [1, 25, 519],
    [1, 58, 512],
    [1, 345, 518],
    ["(", 521],
    [1, 25, 522],
    [2, 159, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 523],
    [1, 25, 524],
    [")", 525,
     ":", -1],
    [1, 25, 526],
    ["->", -1],
    ["(", 528],
    [1, 25, 529],
    [1, 646, 530,
     0, 530],
    [1, 25, 531],
    [")", -1],
    [1, 74, -1,
     1, 660, -1,
     3, "keyword", e[44], 533,
     3, "keyword", e[45], 543,
     3, "keyword", e[40], 545,
     0, 555],
    [1, 25, 534],
    [3, "keyword", e[21], 535],
    [1, 25, 536],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 537],
    [1, 25, 538],
    [":", 539,
     0, 540],
    [1, 25, 541],
    [1, 25, 542],
    [1, 375, 540],
    [2, 391, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 544],
    [2, 130, -1, {"name":"Block"}],
    [1, 25, 546],
    [2, 416, 547, {"name":"ParamList"}],
    [1, 25, 548],
    [":", 549,
     0, 550],
    [1, 25, 551],
    [1, 25, 552],
    [3, "keyword", e[27], 553,
     3, "keyword", e[29], 553],
    [2, 130, -1, {"name":"Block"},
     0, -1],
    [1, 25, 554],
    [2, 313, 550, {"name":"ArgList"}],
    [1, 174, 556,
     3, "def property", e[0], 557],
    [1, 25, 555],
    [1, 25, 558],
    [2, 313, 559, {"name":"ArgList"},
     0, 559],
    [1, 25, 560],
    [2, 391, 561, {"name":"ClassBody"},
     0, 561],
    [1, 25, 562],
    [/^[\,\;]/, -1],
    [1, 174, 564,
     3, "type def", e[0], 565],
    [1, 25, 563],
    [1, 25, 566],
    [":", 567,
     0, 569],
    [1, 25, 568],
    [1, 345, 569],
    [1, 58, 570],
    [",", 571,
     0, -1],
    [1, 25, 572],
    [1, 174, 573,
     3, "type def", e[0], 574,
     0, 570],
    [1, 25, 572],
    [1, 25, 575],
    [":", 576,
     0, 577],
    [1, 25, 578],
    [1, 58, 570],
    [1, 345, 577],
    [1, 174, 580,
     3, "def", e[0], 581],
    [1, 25, 579],
    [1, 25, 582],
    [":", 583,
     0, 584],
    [1, 25, 585],
    [1, 25, 586],
    [1, 345, 584],
    [3, "operator", "=", 587,
     0, 589],
    [1, 25, 588],
    [1, 97, 589],
    [1, 58, 590],
    [",", 591,
     0, -1],
    [1, 25, 592],
    [1, 174, 593,
     3, "def", e[0], 594,
     0, 590],
    [1, 25, 592],
    [1, 25, 595],
    [":", 596,
     0, 597],
    [1, 25, 598],
    [1, 25, 599],
    [1, 345, 597],
    [3, "operator", "=", 600,
     0, 601],
    [1, 25, 602],
    [1, 58, 590],
    [1, 97, 601],
    ["(", 604],
    [1, 25, 605],
    [1, 676, 606,
     0, 606],
    [1, 25, 607],
    [")", -1],
    [1, 25, 609],
    [3, "keyword", e[37], -1],
    [[5, 704], 611,
     [5, 707], 612,
     1, 97, 621],
    [3, "operator", "!", 613,
     0, 613],
    [3, "operator", "!", 614,
     0, 614],
    [1, 25, 615],
    [1, 25, 616],
    [3, "keyword", e[8], 617],
    [3, "keyword", e[15], 618],
    [1, 25, 619],
    [1, 25, 620],
    [1, 97, 621],
    [1, 345, 621],
    [1, 58, 622],
    [",", 623,
     0, -1],
    [1, 25, 624],
    [[5, 710], 625,
     [5, 713], 626,
     1, 97, 627,
     0, 622],
    [3, "operator", "!", 628,
     0, 628],
    [3, "operator", "!", 629,
     0, 629],
    [1, 58, 622],
    [1, 25, 630],
    [1, 25, 631],
    [3, "keyword", e[8], 632],
    [3, "keyword", e[15], 633],
    [1, 25, 634],
    [1, 25, 635],
    [1, 97, 627],
    [1, 345, 627],
    [1, 25, 637],
    [3, "keyword", e[41], -1],
    [1, 25, 639],
    [3, "keyword", e[42], -1],
    [e[0], 641],
    [1, 25, 642],
    ["=", -1],
    [e[0], 644],
    [1, 25, 645],
    ["=", -1],
    [[0, [5, 716], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 647,
     0, 648],
    [1, 25, 649],
    [1, 25, 650],
    [":", 648],
    [1, 345, 651],
    [1, 58, 652],
    [",", 653,
     0, -1],
    [1, 25, 654],
    [[0, [5, 719], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 655,
     0, 656,
     0, 652],
    [1, 25, 657],
    [1, 25, 658],
    [":", 656],
    [1, 345, 659],
    [1, 58, 652],
    [1, 174, 661,
     3, "keyword", e[9], 662,
     3, "keyword", e[10], 662,
     1, 722, -1,
     3, "keyword", e[11], 663,
     1, 731, -1,
     1, 201, -1,
     1, 216, -1,
     3, "keyword", e[12], 664],
    [1, 25, 660],
    [1, 25, 665],
    [1, 25, 666],
    [1, 25, 667],
    [3, "type def", e[0], 668],
    [3, "keyword", e[10], 669,
     2, 748, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 670],
    [1, 25, 671],
    [1, 25, 672],
    [1, 25, 673],
    [2, 234, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 674],
    [2, 247, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 675],
    [2, 234, -1, {"name":"ClassSpec"}],
    [1, 174, 677,
     3, "keyword", e[22], 678,
     3, "def", e[0], 679],
    [1, 25, 676],
    [1, 25, 680],
    [1, 25, 681],
    [3, "def property", e[0], 679],
    [":", 682,
     0, 683],
    [1, 25, 684],
    [1, 25, 685],
    [1, 345, 683],
    [3, "operator", "=", 686,
     0, 688],
    [1, 25, 687],
    [1, 97, 688],
    [1, 58, 689],
    [",", 690,
     0, -1],
    [1, 25, 691],
    [1, 174, 692,
     3, "keyword", e[22], 693,
     3, "def", e[0], 694,
     0, 689],
    [1, 25, 691],
    [1, 25, 695],
    [1, 25, 696],
    [3, "def property", e[0], 694],
    [":", 697,
     0, 698],
    [1, 25, 699],
    [1, 25, 700],
    [1, 345, 698],
    [3, "operator", "=", 701,
     0, 702],
    [1, 25, 703],
    [1, 58, 689],
    [1, 97, 702],
    [/^\!?/, 705],
    [1, 25, 706],
    [3, "keyword", e[8], -1],
    [/^\!?/, 708],
    [1, 25, 709],
    [3, "keyword", e[15], -1],
    [/^\!?/, 711],
    [1, 25, 712],
    [3, "keyword", e[8], -1],
    [/^\!?/, 714],
    [1, 25, 715],
    [3, "keyword", e[15], -1],
    [e[0], 717],
    [1, 25, 718],
    [":", -1],
    [e[0], 720],
    [1, 25, 721],
    [":", -1],
    [3, "keyword", e[21], 723],
    [1, 25, 724],
    [3, "def property", e[0], 725],
    [1, 25, 726],
    [":", 727,
     0, 729],
    [1, 25, 728],
    [1, 375, 729],
    [1, 25, 730],
    [2, 391, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[22], 732],
    [1, 25, 733],
    [2, 395, 734, {"name":"TypeParams"},
     0, 734],
    [1, 25, 735],
    [1, 753, 736],
    [1, 25, 737],
    [3, "keyword", e[23], 738,
     0, 740],
    [1, 25, 739],
    [1, 400, 740],
    [1, 25, 741],
    [3, "operator", "=", 742,
     3, "keyword", e[39], 743,
     0, 746],
    [1, 25, 744],
    [1, 25, 745],
    [1, 97, 746],
    [1, 97, 746],
    [1, 25, 747],
    [/^\;?/, -1],
    [2, 395, 749, {"name":"TypeParams"},
     0, 749],
    [1, 25, 750],
    [3, "def property", e[0], 751],
    [1, 25, 752],
    [2, 421, -1, {"name":"FunctionSpec"}],
    ["(", 754,
     0, 758],
    [1, 25, 755],
    [1, 764, 756],
    [1, 25, 757],
    [")", -1],
    [1, 74, 759,
     3, "def property", e[0], 760],
    [1, 25, 758],
    [1, 25, 761],
    [":", 762,
     0, -1],
    [1, 25, 763],
    [1, 345, -1],
    [1, 753, 765],
    [1, 58, 766],
    [",", 767,
     0, -1],
    [1, 25, 768],
    [1, 753, 769,
     0, 766],
    [1, 58, 766]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = (function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true, dontAlign: ["LambdaBlock"]};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
